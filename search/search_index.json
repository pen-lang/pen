{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#pen-programming-language","title":"Pen programming language","text":"<p>Pen is the parallel, concurrent, and functional programming language for scalable software development, focused on software maintainability and portability.</p> <pre><code>import Core'Number\nimport Os'File\n\n# The `\\` prefix for \u03bb denotes a function.\nfindAnswer = \\(kind string) number {\n  # Secret source...\n\n  21\n}\n\nmain = \\(ctx context) none {\n  # The `go` function runs a given function in parallel.\n  # `x` is a future for the computed value.\n  x = go(\\() number { findAnswer(\"humanity\") })\n  y = findAnswer(\"dolphins\")\n\n  _ = File'Write(ctx, File'StdOut(), Number'String(x() + y))\n\n  none\n}</code></pre>"},{"location":"#vision","title":"Vision","text":"<p>Pen aims to make large-scale software development efficient where many engineers develop software together for a long time. To realize that, it focuses on software maintainability and portability.</p> <ul> <li>Maintainability<ul> <li>Simplicity: The language is small and easy to learn yet full featured.</li> <li>Testability: Tests are always fast and reliable.</li> <li>Flexibility: Developers can change codes easily without regression.</li> </ul> </li> <li>Portability<ul> <li>Programs written in Pen can be ported to different platforms including WebAssembly.</li> </ul> </li> </ul>"},{"location":"#features","title":"Features","text":""},{"location":"#minimal-language","title":"Minimal language","text":"<ul> <li>Its syntax and type system are small, simple, and easy to learn.</li> <li>Yet, the language supports all the modern features.</li> </ul>"},{"location":"#concurrentparallel-computation","title":"Concurrent/parallel computation","text":"<ul> <li>The language and its runtime enables thread-safe concurrent/parallel computation.</li> <li>For more information, see Concurrency and parallelism.</li> </ul>"},{"location":"#reliable-testing","title":"Reliable testing","text":"<ul> <li>Tests are always deterministic and fast.</li> <li>Tests are side-effect free and independent from test environment.</li> </ul>"},{"location":"#no-built-in-system-library","title":"No built-in system library","text":"<ul> <li>There is no built-in system library dependent on platforms.</li> <li>Developers choose system packages suitable for their applications.</li> <li>System packages encapsulate platform-dependent codes and side effects.</li> <li>No other kind of package causes side effects without explicit injection.</li> </ul>"},{"location":"#security","title":"Security","text":"<ul> <li>No runtime exception</li> <li>Memory safe</li> <li>No undefined behavior</li> <li>No data race</li> </ul>"},{"location":"#even-more","title":"Even more...","text":"<ul> <li>Static typing</li> <li>Immutable values</li> <li>Pure functions by default</li> <li>Errors as values</li> <li>Asynchronous I/O</li> <li>Cross compile</li> <li>Rust/C Foreign Function Interface (FFI)</li> </ul>"},{"location":"#license","title":"License","text":"<p>Pen is dual-licensed under MIT and Apache 2.0.</p>"},{"location":"roadmap/","title":"Roadmap","text":"<p>Items are ordered by priority.</p> <ul> <li> Basic syntax</li> <li> CPS transformation</li> <li> Asynchronous I/O<ul> <li> Asynchronous synchronization</li> </ul> </li> <li> Capability-based effect system</li> <li> Performant GC<ul> <li> Automatic reference counting</li> </ul> </li> <li> Foreign function interface</li> <li> Basic OS interface</li> <li> WASM backend</li> <li> Stream-based list type</li> <li> Testing framework</li> <li> TCP/UDP sockets</li> <li> System time</li> <li> Asynchronous operations</li> <li> Parallel computation</li> <li> Binary operations</li> <li> List comprehension</li> <li> Multiple system packages</li> <li> Map type</li> <li> Code formatter</li> <li> Documentation generator</li> <li> Process management</li> <li> Reflection</li> <li> Mutable state<ul> <li> Thread safety</li> </ul> </li> <li> IDE/editor support<ul> <li> Language server</li> </ul> </li> <li> Metaprogramming<ul> <li> Code generator</li> </ul> </li> <li> Serialization / deserialization</li> <li> Package manager</li> <li> Vector type</li> <li> Web browser interface<ul> <li>JavaScript backend (?)</li> </ul> </li> </ul>"},{"location":"the-zen/","title":"The Zen","text":"<ul> <li>Simple is better than complex.</li> <li>Explicit is better than implicit.</li> <li>Clear is better than clever.</li> <li>One way to do one thing</li> <li>One solution for many problems</li> <li>Steady value over volatile value</li> </ul>"},{"location":"the-zen/#references","title":"References","text":"<ul> <li>Go Proverbs</li> <li>The Zen of Python</li> <li>Zen | The Zig programming language</li> </ul>"},{"location":"advanced-features/cross-compile/","title":"Cross compile","text":"<p>The language's compiler supports cross compile. To compile applications and libraries for different targets, specify the <code>--target</code> option of the <code>pen build</code> subcommand.</p> <p>For example, run the following command to compile a <code>wasm32</code> binary for the WASI platform.</p> <pre><code>pen build --target wasm32-wasi</code></pre> <p>Note that we currently support those targets via Rust's cross compiler toolchain. Please install a Rust compiler through <code>rustup</code> to enable installation of toolchains for different targets.</p>"},{"location":"advanced-features/cross-compile/#supported-targets","title":"Supported targets","text":"<p>Run <code>pen build --help</code> to see all supported targets.</p>"},{"location":"advanced-features/cross-compile/#system-package-support","title":"System package support","text":"<p>Cross compile support of system packages are totally up to their developers. For example, the <code>Os</code> standard system package supports most targets as long as their platforms expose OS-like APIs. However, some custom system packages might not support those targets because of their limited use cases.</p>"},{"location":"advanced-features/ffi/","title":"Foreign Function Interface (FFI)","text":"<p>Using FFI, you can import or export functions in foreign languages, such as Rust and C.</p>"},{"location":"advanced-features/ffi/#importing-functions-in-foreign-languages","title":"Importing functions in foreign languages","text":"<p>You can import functions in foreign languages using foreign import statements. The statements specify the foreign functions' calling convention, names and types.</p> <p>You might specify calling conventions of foreign functions in a format of string literals after <code>import foreign</code> keywords optionally. Currently, only the C calling convention is supported as <code>\"c\"</code>. If the options are omitted, the functions are imported with the native calling convention of Pen.</p> <pre><code>import foreign \"c\" foo \\(number, number) number</code></pre> <p>Caveat: You can import foreign functions that might cause side effects only in system packages. See also Writing system packages.</p>"},{"location":"advanced-features/ffi/#exporting-functions-to-foreign-languages","title":"Exporting functions to foreign languages","text":"<p>You can export functions to foreign languages using foreign function definitions, which have <code>foreign</code> keywords in front of normal function definitions.</p> <p>You might specify calling conventions of exported foreign functions optionally after <code>foreign</code> keywords as well as imported foreign functions.</p> <pre><code>foreign \"c\" foo = \\(x number, y number) number {\n  ...\n}</code></pre>"},{"location":"advanced-features/ffi/#building-libraries-of-foreign-languages","title":"Building libraries of foreign languages","text":"<p>During builds of your packages, you might want to build libraries of foreign languages so that you can use their functions. If that's your case, you can set up <code>pen-ffi</code> scripts in your packages. The script files run on every build and output absolute paths to <code>.a</code> archive files of your libraries in foreign languages built by the scripts. The script files may or may not have file extensions.</p> <p>The <code>pen-ffi</code> scripts should accept the following command line arguments.</p> Argument Required Description <code>-t &lt;target&gt;</code> No Custom target triple of builds <p>One of examples in practice is a <code>pen-ffi.sh</code> file in the <code>Core</code> library.</p>"},{"location":"advanced-features/ffi/#native-calling-convention-in-pen","title":"Native calling convention in Pen","text":"<p>TBD</p>"},{"location":"advanced-features/writing-system-packages/","title":"Writing system packages","text":"<p>Using existing system packages covers most use cases in application development. However, by writing your own system packages, you can achieve the following:</p> <ul> <li>Define your own system interfaces of functions and types with side effects.</li> <li>Link applications in arbitrary file formats.</li> </ul> <p>This page assumes that you have already read Packages.</p> <p>Caveat: Providing bad system packages which do not conform to conventions can break the ecosystem of the language! In the worst cases, they might make applications malfunction. Please be careful to follow the conventions to keep applications maintainable and portable.</p>"},{"location":"advanced-features/writing-system-packages/#functionalities-of-system-packages","title":"Functionalities of system packages","text":"<p>System packages have the following functionalities:</p> <ul> <li>Define context types.</li> <li>Provide system interfaces as functions and types.</li> <li>Link application files.</li> </ul>"},{"location":"advanced-features/writing-system-packages/#defining-context-types","title":"Defining context types","text":"<p>Every system package must have a module named <code>Context</code> at the top level. The module defines a <code>Context</code> type and an <code>UnsafeNew</code> function that returns a <code>Context</code> value with no argument.</p> <p>For example, a system package for command line applications might have the following <code>Context</code> module:</p> <pre><code>...\n\ntype Context {\n  print \\(string) none\n}\n\nUnsafeNew = \\() Context {\n  Context{\n    print: ...\n  }\n}</code></pre> <p>The language's compiler uses these type and function to compose a <code>context</code> type passed to <code>main</code> functions in <code>main</code> modules in application packages.</p>"},{"location":"advanced-features/writing-system-packages/#providing-system-functions-and-types","title":"Providing system functions and types","text":"<p>System packages are the only places where you can define functions that have side effects. Thanks to system packages, applications can perform effects to interact with the world, such as:</p> <ul> <li>Console input/output</li> <li>File system operations</li> <li>Networking</li> <li>Random number generation</li> </ul> <p>Note that system packages should never expose side effects directly through their functions; all public functions in system packages must be purely functional. Instead, you need to pass a <code>Context</code> type to every effect-ful function for it to make side effects.</p> <p>For example, a system package for command line applications might have the following types and functions:</p> <pre><code># Define a foreign function to output a string in console.\nimport foreign _pen_cli_print \\(string) none\n\ntype Context {\n  print: _pen_cli_print,\n}\n\nPrint = \\(ctx Context, s string) none {\n  ctx.print(s)\n}</code></pre> <p>rather than:</p> <pre><code>import foreign _pen_cli_print \\(string) none\n\nPrint = \\(s string) none {\n  # Oh, no! We make side effects in a public function directly.\n  _pen_cli_print(s)\n}</code></pre>"},{"location":"advanced-features/writing-system-packages/#linking-application-files-optional","title":"Linking application files (optional)","text":"<p>System packages might have optional script files named <code>pen-link</code> at their top directories. On every build of application packages using the system packages, the script files run given object files specified as command line arguments to link application files. The script files may or may not have file extensions.</p> <p>The scripts should accept the following command line arguments.</p> Argument Required Description <code>-t &lt;target&gt;</code> No Target triple <code>-o &lt;application&gt;</code> Yes Path of an application file <code>&lt;archive&gt;...</code> Yes Paths of archive files sorted topologically from main packages <p>At the liking phase, compiled main functions are available under a symbol named <code>_pen_main</code> with Pen's native calling convention.</p>"},{"location":"advanced-features/writing-system-packages/#examples","title":"Examples","text":"<p>The <code>Os</code> standard package is an example of system packages.</p>"},{"location":"examples/ffi/","title":"FFI","text":""},{"location":"examples/ffi/#background","title":"Background","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"library\",\n  \"dependencies\": {}\n}</code></pre>"},{"location":"examples/ffi/#import-a-foreign-function-of-native-calling-convention","title":"Import a foreign function of native calling convention","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>import foreign g \\(number) number\n\nf = \\(x number) number {\n  g(x)\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/ffi/#import-a-foreign-function-of-the-c-calling-convention","title":"Import a foreign function of the C calling convention","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>import foreign \"c\" g \\(number) number\n\nf = \\(x number) number {\n  g(x)\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/ffi/#export-a-foreign-function","title":"Export a foreign function","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>foreign f = \\(x number) number {\n  x\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/ffi/#export-a-foreign-function-of-the-c-calling-convention","title":"Export a foreign function of the C calling convention","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>foreign \"c\" f = \\(x number) number {\n  x\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/module/","title":"Modules","text":""},{"location":"examples/module/#background","title":"Background","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"library\",\n  \"dependencies\": {}\n}</code></pre>"},{"location":"examples/module/#import-a-function-from-a-module","title":"Import a function from a module","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>Foo = \\() number {\n  42\n}</code></pre> <p>And a file named \"Bar.pen\" with:</p> <pre><code>import 'Foo\n\nBar = \\() number {\n  Foo'Foo()\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/module/#import-a-type-alias-from-a-module","title":"Import a type alias from a module","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>type Foo = number</code></pre> <p>And a file named \"Bar.pen\" with:</p> <pre><code>import 'Foo\n\ntype Bar = Foo'Foo</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/module/#import-a-function-from-a-nested-module","title":"Import a function from a nested module","text":"<p>Given a file named \"Foo/Foo.pen\" with:</p> <pre><code>Foo = \\() number {\n  42\n}</code></pre> <p>And a file named \"Bar.pen\" with:</p> <pre><code>import 'Foo'Foo\n\nBar = \\() number {\n  Foo'Foo()\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/module/#import-a-module-with-a-custom-prefix","title":"Import a module with a custom prefix","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>Foo = \\() number {\n  42\n}</code></pre> <p>And a file named \"Bar.pen\" with:</p> <pre><code>import 'Foo as Bar\n\nBar = \\() number {\n  Bar'Foo()\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/module/#import-a-type-definition-with-no-prefix","title":"Import a type definition with no prefix","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>type Foo {}</code></pre> <p>And a file named \"Bar.pen\" with:</p> <pre><code>import 'Foo { Foo }\n\ntype Bar = Foo</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/module/#import-a-type-alias-with-no-prefix","title":"Import a type alias with no prefix","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>type Foo = number</code></pre> <p>And a file named \"Bar.pen\" with:</p> <pre><code>import 'Foo { Foo }\n\ntype Bar = Foo</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/module/#import-a-function-with-no-prefix","title":"Import a function with no prefix","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>Foo = \\() number {\n  42\n}</code></pre> <p>And a file named \"Bar.pen\" with:</p> <pre><code>import 'Foo { Foo }\n\nBar = \\() number {\n  Foo()\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/package/","title":"Packages","text":""},{"location":"examples/package/#background","title":"Background","text":"<p>Given a file named \"foo/pen.json\" with:</p> <pre><code>{\n  \"type\": \"library\",\n  \"dependencies\": {}\n}</code></pre> <p>And a file named \"foo/Foo.pen\" with:</p> <pre><code>type Foo = number\n\nFoo = \\() number {\n  42\n}</code></pre> <p>And a file named \"foo/Foo/Foo.pen\" with:</p> <pre><code>Foo = \\() number {\n  42\n}</code></pre> <p>And a directory named \"bar\"</p> <p>And I cd to \"bar\"</p> <p>And a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"library\",\n  \"dependencies\": {\n    \"Foo\": \"../foo\"\n  }\n}</code></pre>"},{"location":"examples/package/#import-a-function-from-a-module","title":"Import a function from a module","text":"<p>Given a file named \"Bar.pen\" with:</p> <pre><code>import Foo'Foo\n\nBar = \\() number {\n  Foo'Foo()\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/package/#import-a-type-from-a-module","title":"Import a type from a module","text":"<p>Given a file named \"Bar.pen\" with:</p> <pre><code>import Foo'Foo\n\ntype Bar = Foo'Foo</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/package/#import-a-function-from-a-nested-module","title":"Import a function from a nested module","text":"<p>Given a file named \"Bar.pen\" with:</p> <pre><code>import Foo'Foo'Foo\n\nBar = \\() number {\n  Foo'Foo()\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/commands/build/","title":"Building packages","text":""},{"location":"examples/commands/build/#build-an-application-package","title":"Build an application package","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"application\",\n  \"dependencies\": {\n    \"Os\": \"pen:///os\"\n  }\n}</code></pre> <p>And a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\n\nmain = \\(ctx context) none {\n  none\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code>.</p>"},{"location":"examples/commands/build/#build-a-library-package","title":"Build a library package","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"library\",\n  \"dependencies\": {}\n}</code></pre> <p>And a file named \"Foo.pen\" with:</p> <pre><code>f = \\(x number) number {\n  x\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/commands/build/#cross-build-an-application-package","title":"Cross-build an application package","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"application\",\n  \"dependencies\": {\n    \"Os\": \"pen:///os-sync\"\n  }\n}</code></pre> <p>And a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\n\nmain = \\(ctx context) none {\n  none\n}</code></pre> <p>And I successfully run <code>rustup target add &lt;target&gt;</code></p> <p>When I successfully run <code>pen build --target &lt;target&gt;</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/commands/build/#examples","title":"Examples","text":"target i686-unknown-linux-musl x86_64-unknown-linux-musl aarch64-unknown-linux-musl wasm32-wasi"},{"location":"examples/commands/build/#cross-build-a-library-package","title":"Cross-build a library package","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"library\",\n  \"dependencies\": {}\n}</code></pre> <p>And a file named \"Foo.pen\" with:</p> <pre><code>f = \\(x number) number {\n  x\n}</code></pre> <p>And I successfully run <code>rustup target add &lt;target&gt;</code></p> <p>When I successfully run <code>pen build --target &lt;target&gt;</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/commands/build/#examples_1","title":"Examples","text":"target i686-unknown-linux-musl x86_64-unknown-linux-musl aarch64-unknown-linux-musl wasm32-wasi"},{"location":"examples/commands/build/#build-an-application-package-again","title":"Build an application package again","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"application\",\n  \"dependencies\": {\n    \"Os\": \"pen:///os\"\n  }\n}</code></pre> <p>And a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\n\nmain = \\(ctx context) none {\n  none\n}</code></pre> <p>And I successfully run <code>pen build</code></p> <p>And I successfully run <code>./app</code></p> <p>And the stdout from \"./app\" should contain exactly \"\"</p> <p>When a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\nimport Os'File\n\nmain = \\(ctx context) none {\n  _ = File'Write(ctx.Os, File'StdOut(), \"hello\")\n\n  none\n}</code></pre> <p>And I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code></p> <p>And the stdout from \"./app\" should contain exactly \"hello\".</p>"},{"location":"examples/commands/create/","title":"Creating packages","text":""},{"location":"examples/commands/create/#create-an-application-package","title":"Create an application package","text":"<p>Given I successfully run <code>pen create foo</code></p> <p>And I cd to \"foo\"</p> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code>.</p>"},{"location":"examples/commands/create/#create-a-library-package","title":"Create a library package","text":"<p>Given I successfully run <code>pen create --library foo</code></p> <p>And I cd to \"foo\"</p> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/commands/create/#create-an-application-package-in-a-current-directory","title":"Create an application package in a current directory","text":"<p>Given I successfully run <code>pen create .</code></p> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code>.</p>"},{"location":"examples/commands/create/#create-a-library-package-in-a-current-directory","title":"Create a library package in a current directory","text":"<p>Given I successfully run <code>pen create --library .</code></p> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/commands/document/","title":"Generating documentation for a package","text":""},{"location":"examples/commands/document/#background","title":"Background","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"library\",\n  \"dependencies\": {}\n}</code></pre>"},{"location":"examples/commands/document/#generate-documentation-for-a-package","title":"Generate documentation for a package","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code># Do something nice.\nFoo = \\() none {\n  none\n}</code></pre> <p>When I run the following script:</p> <pre><code>pen document \\\n  --name Foo \\\n  --url https://github.com/foo/foo \\\n  --description \"This package is cool.\" \\\n  &gt; Foo.md</code></pre> <p>Then a file named \"Foo.md\" should contain \"<code>Foo</code> package\".</p>"},{"location":"examples/commands/format/","title":"Formatting module files","text":""},{"location":"examples/commands/format/#background","title":"Background","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"library\",\n  \"dependencies\": {}\n}</code></pre>"},{"location":"examples/commands/format/#format-module-files","title":"Format module files","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>Foo = \\() none {\n\n  none\n}</code></pre> <p>When I successfully run <code>pen format</code></p> <p>Then a file named \"Foo.pen\" should contain exactly:</p> <pre><code>Foo = \\() none {\n  none\n}</code></pre>"},{"location":"examples/commands/format/#check-if-module-files-are-formatted","title":"Check if module files are formatted","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>Foo = \\() none {\n\n  none\n}</code></pre> <p>When I run <code>pen format --checked</code></p> <p>Then the exit status should not be 0.</p>"},{"location":"examples/commands/test/","title":"Testing packages","text":""},{"location":"examples/commands/test/#background","title":"Background","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"library\",\n  \"dependencies\": {\n    \"Test\": \"pen:///test\"\n  }\n}</code></pre> <p>And a file named \"Foo.pen\" with:</p> <pre><code>Add = \\(x number, y number) number {\n  x + y\n}</code></pre>"},{"location":"examples/commands/test/#test-a-module","title":"Test a module","text":"<p>Given a file named \"Foo.test.pen\" with:</p> <pre><code>import Test'Assert\nimport 'Foo\n\nAdd = \\() none | error {\n  Assert'Equal(Foo'Add(41, 1), 42)\n}</code></pre> <p>When I run <code>pen test</code></p> <p>Then the exit status should be 0</p> <p>And the stdout should contain \"OK\".</p>"},{"location":"examples/commands/test/#fail-to-test-a-module","title":"Fail to test a module","text":"<p>Given a file named \"Foo.test.pen\" with:</p> <pre><code>import Test'Assert\nimport 'Foo\n\nAdd = \\() none | error {\n  Assert'Equal(Foo'Add(41, 0), 42)\n}</code></pre> <p>When I run <code>pen test</code></p> <p>Then the exit status should not be 0</p> <p>And the stdout should contain \"FAIL\".</p>"},{"location":"examples/commands/test/#run-multiple-tests","title":"Run multiple tests","text":"<p>Given a file named \"Foo.test.pen\" with:</p> <pre><code>import Test'Assert\nimport 'Foo\n\nAdd = \\() none | error {\n  Assert'Equal(Foo'Add(41, 1), 42)\n}\n\nAddMore = \\() none | error {\n  Assert'Equal(Foo'Add(40, 2), 42)\n}</code></pre> <p>When I successfully run <code>pen test</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/commands/test/#run-no-test","title":"Run no test","text":"<p>When I run <code>pen test</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/commands/test/#use-a-debug-function-in-a-test","title":"Use a debug function in a test","text":"<p>Given a file named \"Foo.test.pen\" with:</p> <pre><code>Foo = \\() none | error {\n  debug(\"hello\")\n}</code></pre> <p>When I run <code>pen test</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/smoke/built-ins/","title":"Built-ins","text":""},{"location":"examples/smoke/built-ins/#background","title":"Background","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"application\",\n  \"dependencies\": {\n    \"Os\": \"pen:///os\"\n  }\n}</code></pre>"},{"location":"examples/smoke/built-ins/#print-a-value-with-a-debug-function","title":"Print a value with a debug function","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>type foo {}\n\ntype bar {\n  x number\n}\n\ntype baz {\n  x number\n  y string\n}\n\nmain = \\(_ context) none {\n  debug(&lt;input&gt;)\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code></p> <p>And the stderr from \"./app\" should contain exactly '' <p>Then I successfully run <code>check_memory_leak.sh ./app</code>.</p>"},{"location":"examples/smoke/built-ins/#examples","title":"Examples","text":"input output false false true true none none \"foo\" \"foo\" 42 42 foo{} foo{} bar{x: 42} bar{x: 42} baz{x: 42, y: \"foo\"} baz{x: 42, y: \"foo\"} [number 42, 42] [number 42, 42] {string: number \"foo\": 1, \"bar\": 2} {string: number \"bar\": 2, \"foo\": 1} error(\"foo\") error(\"foo\") (x none) none { x }"},{"location":"examples/smoke/examples/","title":"Examples","text":""},{"location":"examples/smoke/examples/#background","title":"Background","text":"<p>Given I run the following script:</p> <pre><code>cp -r $PEN_ROOT/examples .\n</code></pre>"},{"location":"examples/smoke/examples/#build-and-test-examples","title":"Build and test examples","text":"<p>When I cd to \"examples/\" <p>Then I successfully run <code>pen format --check</code></p> <p>And I successfully run <code>pen build</code></p> <p>And I successfully run <code>pen test</code>.</p>"},{"location":"examples/smoke/examples/#examples_1","title":"Examples","text":"example algorithms/fibonacci algorithms/fizz-buzz algorithms/knapsack algorithms/quick-sort algorithms/parallel/fibonacci cat console echo hello-world http-client http-server life-game ls snake sql-client tcp-client tcp-server udp-client udp-server yes"},{"location":"examples/smoke/examples/#run-http-client-and-server","title":"Run HTTP client and server","text":"<p>Given I cd to \"examples/http-server\"</p> <p>And I successfully run <code>pen build</code></p> <p>And I run <code>./app</code> in background</p> <p>When I cd to \"../http-client\"</p> <p>And I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app get http://localhost:8080 hello</code></p> <p>And the stdout from \"./app get http://localhost:8080 hello\" should contain exactly \"hello\".</p>"},{"location":"examples/smoke/examples/#run-tcp-client-and-server","title":"Run TCP client and server","text":"<p>Given I cd to \"examples/tcp-server\"</p> <p>And I successfully run <code>pen build</code></p> <p>And I run <code>./app localhost:4242</code> in background</p> <p>When I cd to \"../tcp-client\"</p> <p>And I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app localhost:4242 hello</code></p> <p>And the stdout from \"./app localhost:4242 hello\" should contain exactly \"hello\".</p>"},{"location":"examples/smoke/examples/#run-udp-client-and-server","title":"Run UDP client and server","text":"<p>Given I cd to \"examples/udp-server\"</p> <p>And I successfully run <code>pen build</code></p> <p>And I run <code>./app localhost:4242</code> in background</p> <p>When I cd to \"../udp-client\"</p> <p>And I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app localhost:4242 hello</code></p> <p>And the stdout from \"./app localhost:4242 hello\" should contain exactly \"hello\".</p>"},{"location":"examples/smoke/examples/#run-sql-client","title":"Run SQL client","text":"<p>Given I cd to \"examples/sql-client\"</p> <p>And I successfully run <code>pen build</code></p> <p>And I successfully run <code>sqlite3 foo.db 'create table foo (bar int)'</code></p> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app execute sqlite://foo.db 'insert into foo (bar) values (42)'</code></p> <p>And I successfully run <code>./app query sqlite://foo.db 'select * from foo'</code></p> <p>And the stdout from \"./app query sqlite://foo.db 'select * from foo'\" should contain exactly \"42\".</p>"},{"location":"examples/smoke/module/","title":"Modules","text":""},{"location":"examples/smoke/module/#background","title":"Background","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"library\",\n  \"dependencies\": {}\n}</code></pre>"},{"location":"examples/smoke/module/#import-a-duplicate-name","title":"Import a duplicate name","text":"<p>Given a file named \"foo.pen\" with:</p> <pre><code>Foo = \\(x number) number { x }</code></pre> <p>And a file named \"bar.pen\" with:</p> <pre><code>import 'foo { Foo }\n\nFoo = \\() none { Foo() }</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/smoke/module/#compare-a-type-imported-indirectly","title":"Compare a type imported indirectly","text":"<p>Given a file named \"foo.pen\" with:</p> <pre><code>type Foo {}</code></pre> <p>And a file named \"bar.pen\" with:</p> <pre><code>import 'foo { Foo }\n\ntype Bar {\n  xs [Foo]\n}</code></pre> <p>And a file named \"baz.pen\" with:</p> <pre><code>import 'bar { Bar }\n\ntype Baz = Bar</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/smoke/module/#import-an-undefined-name","title":"Import an undefined name","text":"<p>Given a file named \"foo.pen\" with:</p> <p>And a file named \"bar.pen\" with:</p> <pre><code>import 'foo { tomato }</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should not be 0.</p>"},{"location":"examples/smoke/os/","title":"OS","text":""},{"location":"examples/smoke/os/#background","title":"Background","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"application\",\n  \"dependencies\": {\n    \"Os\": \"pen:///os\",\n    \"Core\": \"pen:///core\"\n  }\n}</code></pre>"},{"location":"examples/smoke/os/#read-and-write-files","title":"Read and write files","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\nimport Os'File\nimport Os'File'OpenOptions { OpenOptions }\nimport Os'Process\n\nmain = \\(ctx context) none {\n  if _ = run(ctx.Os) as none {\n    none\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}\n\nrun = \\(ctx Context) none | error {\n  f = File'Open(ctx, \"foo.txt\")?\n  d = File'Read(ctx, f)?\n  f = File'OpenWithOptions(\n    ctx,\n    \"bar.txt\",\n    OpenOptions{\n      ...OpenOptions'Default(),\n      Create: true,\n      Write: true,\n    },\n  )?\n  File'Write(ctx, f, d)?\n\n  none\n}</code></pre> <p>And a file named \"foo.txt\" with \"foo\"</p> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code></p> <p>And the file \"bar.txt\" should contain \"foo\".</p>"},{"location":"examples/smoke/os/#read-a-file-until-a-limit","title":"Read a file until a limit","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\nimport Os'File\nimport Os'Process\n\nmain = \\(ctx context) none {\n  if _ = run(ctx.Os) as none {\n    none\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}\n\nrun = \\(ctx Context) none | error {\n  f = File'Open(ctx, \"foo.txt\")?\n  d = File'ReadLimit(ctx, f, 5)?\n  File'Write(ctx, File'StdOut(), d)?\n\n  none\n}</code></pre> <p>And a file named \"foo.txt\" with \"Hello, world!\"</p> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code></p> <p>And the stdout from \"./app\" should contain exactly \"Hello\".</p>"},{"location":"examples/smoke/os/#read-a-directory","title":"Read a directory","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Core'String\nimport Os'Context { Context }\nimport Os'File\nimport Os'Directory\nimport Os'Process\n\nmain = \\(ctx context) none {\n  if _ = run(ctx.Os) as none {\n    none\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}\n\nrun = \\(ctx Context) none | error {\n  File'Write(\n    ctx,\n    File'StdOut(),\n    String'Join(Directory'Read(ctx, \".\")?, \"\\n\"),\n  )?\n\n  none\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code></p> <p>And the stdout from \"./app\" should contain \"main.pen\"</p> <p>And the stdout from \"./app\" should contain \"pen.json\".</p>"},{"location":"examples/smoke/os/#use-go-syntax","title":"Use go syntax","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\n\nmain = \\(ctx context) none {\n  f = go(\\() none { none })\n\n  f()\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>check_memory_leak.sh ./app</code>.</p>"},{"location":"examples/smoke/standard-packages/","title":"Standard packages","text":""},{"location":"examples/smoke/standard-packages/#build-and-test-standard-packages","title":"Build and test standard packages","text":"<p>Given I run the following script:</p> <pre><code>cp -r $PEN_ROOT/packages .\n</code></pre> <p>When I cd to \"packages/\" <p>Then I successfully run <code>pen format --check</code></p> <p>And I successfully run <code>pen build</code></p> <p>And I successfully run <code>pen test</code>.</p>"},{"location":"examples/smoke/standard-packages/#examples","title":"Examples","text":"package core flag html http json os os-sync random reflect regex sql test"},{"location":"examples/smoke/syntax/","title":"Syntax","text":""},{"location":"examples/smoke/syntax/#background","title":"Background","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"library\",\n  \"dependencies\": {}\n}</code></pre>"},{"location":"examples/smoke/syntax/#override-a-built-in-function","title":"Override a built-in function","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>go = \\() none {\n  none\n}\n\nfoo = \\() none {\n  go()\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/smoke/syntax/#override-a-built-in-type-with-a-type-definition","title":"Override a built-in type with a type definition","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>type none {\n  x number\n}\n\nfoo = \\() none {\n  none{x: 42}\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/smoke/syntax/#override-a-built-in-type-with-a-type-alias","title":"Override a built-in type with a type alias","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>type none = number\n\nfoo = \\() none {\n  0\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/smoke/test-packages/","title":"Test packages","text":""},{"location":"examples/smoke/test-packages/#build-and-test-test-packages","title":"Build and test test packages","text":"<p>Given I run the following script:</p> <pre><code>cp -r $PEN_ROOT/test .\n</code></pre> <p>When I cd to \"test/\" <p>Then I successfully run <code>pen format --check</code></p> <p>And I successfully run <code>pen build</code></p> <p>And I successfully run <code>pen test</code>.</p>"},{"location":"examples/smoke/test-packages/#examples","title":"Examples","text":"package prelude reflect"},{"location":"examples/smoke/test/","title":"Testing","text":""},{"location":"examples/smoke/test/#background","title":"Background","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"library\",\n  \"dependencies\": {\n    \"Test\": \"pen:///test\"\n  }\n}</code></pre> <p>And a file named \"Foo.pen\" with:</p> <pre><code>Add = \\(x number, y number) number {\n  x + y\n}</code></pre>"},{"location":"examples/smoke/test/#run-a-test-referencing-an-os-package","title":"Run a test referencing an Os package","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"application\",\n  \"dependencies\": {\n    \"Os\": \"pen:///os\",\n    \"Test\": \"pen:///test\"\n  }\n}</code></pre> <p>And a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\n\nmain = \\(ctx context) none {\n  none\n}</code></pre> <p>And a file named \"main.test.pen\" with:</p> <pre><code>import Os'File\n\nFoo = \\() none | error {\n  _ = File'Write\n\n  none\n}</code></pre> <p>When I successfully run <code>pen test</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/smoke/test/#run-tests-without-a-test-package","title":"Run tests without a Test package","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"library\",\n  \"dependencies\": {}\n}</code></pre> <p>And a file named \"Foo.test.pen\" with:</p> <pre><code>import 'Foo\n\nAdd = \\() none | error {\n  if Foo'Add(41, 1) == 42 { none } else { error(\"oh no\") }\n}</code></pre> <p>When I successfully run <code>pen test</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/smoke/test/#keep-an-application-file-on-testing","title":"Keep an application file on testing","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"application\",\n  \"dependencies\": {\n    \"Os\": \"pen:///os\",\n    \"Test\": \"pen:///test\"\n  }\n}</code></pre> <p>And a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\n\nmain = \\(ctx context) none {\n  none\n}</code></pre> <p>And a file named \"main.test.pen\" with:</p> <pre><code>Foo = \\() none | error {\n  none\n}</code></pre> <p>And I successfully run <code>pen build</code></p> <p>When I successfully run <code>pen test</code></p> <p>Then I successfully run <code>./app</code>.</p>"},{"location":"examples/smoke/memory-leak/concurrency/","title":"Concurrency","text":""},{"location":"examples/smoke/memory-leak/concurrency/#background","title":"Background","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"application\",\n  \"dependencies\": {\n    \"Core\": \"pen:///core\",\n    \"Os\": \"pen:///os\"\n  }\n}</code></pre>"},{"location":"examples/smoke/memory-leak/concurrency/#use-spawn-function","title":"Use spawn function","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>main = \\(ctx context) none {\n  f = go(\\() none { none })\n\n  &lt;result&gt;\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>check_memory_leak.sh ./app</code>.</p>"},{"location":"examples/smoke/memory-leak/concurrency/#examples","title":"Examples","text":"result f() none"},{"location":"examples/smoke/memory-leak/concurrency/#use-spawn-function-with-a-record","title":"Use spawn function with a record","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>type foo {\n  x number\n  y number\n  z number\n}\n\nmain = \\(ctx context) none {\n  x = foo{x: 1, y: 2, z: 3}\n\n  f = go(\\() none {\n    _ = x\n    none\n  })\n\n  &lt;result&gt;\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>check_memory_leak.sh ./app</code>.</p>"},{"location":"examples/smoke/memory-leak/concurrency/#examples_1","title":"Examples","text":"result f() none"},{"location":"examples/smoke/memory-leak/concurrency/#use-spawn-function-with-a-closure","title":"Use spawn function with a closure","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>main = \\(ctx context) none {\n  x = \\() none { none }\n\n  f = go(\\() none {\n    _ = x\n    none\n  })\n\n  &lt;result&gt;\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>check_memory_leak.sh ./app</code>.</p>"},{"location":"examples/smoke/memory-leak/concurrency/#examples_2","title":"Examples","text":"result f() none"},{"location":"examples/smoke/memory-leak/concurrency/#use-spawn-function-with-a-closure-with-a-record","title":"Use spawn function with a closure with a record","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>type foo {\n  x number\n  y number\n  z number\n}\n\nmain = \\(ctx context) none {\n  x = foo{x: 1, y: 2, z: 3}\n\n  y = \\() none {\n    _ = x\n    none\n  }\n\n  f = go(\\() none {\n    _ = y\n    none\n  })\n\n  &lt;result&gt;\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>check_memory_leak.sh ./app</code>.</p>"},{"location":"examples/smoke/memory-leak/concurrency/#examples_3","title":"Examples","text":"result f() none"},{"location":"examples/smoke/memory-leak/concurrency/#use-race-function","title":"Use race function","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Process\n\nmain = \\(ctx context) none {\n  xs = race([[none] [none none]])\n\n  if [x, ...xs] = xs {\n    &lt;result&gt;\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>check_memory_leak.sh ./app</code>.</p>"},{"location":"examples/smoke/memory-leak/concurrency/#examples_4","title":"Examples","text":"result x() none"},{"location":"examples/smoke/memory-leak/concurrency/#use-race-function-with-a-record","title":"Use race function with a record","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Process\n\ntype foo {\n  x number\n  y number\n}\n\nmain = \\(ctx context) none {\n  xs = race([[foo] [foo foo{x: 0, y: 0}]])\n\n  if [x, ...xs] = xs {\n    _ = &lt;result&gt;\n\n    none\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>check_memory_leak.sh ./app</code>.</p>"},{"location":"examples/smoke/memory-leak/concurrency/#examples_5","title":"Examples","text":"result x() none"},{"location":"examples/smoke/memory-leak/language/","title":"Language","text":""},{"location":"examples/smoke/memory-leak/language/#background","title":"Background","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"application\",\n  \"dependencies\": {\n    \"Core\": \"pen:///core\",\n    \"Os\": \"pen:///os-sync\"\n  }\n}</code></pre>"},{"location":"examples/smoke/memory-leak/language/#run-hello-world","title":"Run hello world","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\nimport Os'File\n\nmain = \\(ctx context) none {\n  _ = File'Write(ctx.Os, File'StdOut(), \"Hello, world!\\n\")\n\n  none\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>check_memory_leak.sh ./app</code>.</p>"},{"location":"examples/smoke/memory-leak/language/#create-a-record","title":"Create a record","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\n\ntype foo {\n  x number\n}\n\nmain = \\(ctx context) none {\n  _ = foo{x: 42}\n\n  none\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>check_memory_leak.sh ./app</code>.</p>"},{"location":"examples/smoke/memory-leak/language/#deconstruct-a-record","title":"Deconstruct a record","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\n\ntype foo {\n  x number\n}\n\nmain = \\(ctx context) none {\n  _ = foo{x: 42}.x\n\n  none\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>check_memory_leak.sh ./app</code>.</p>"},{"location":"examples/smoke/memory-leak/language/#put-a-string-into-a-value-of-any-type","title":"Put a string into a value of any type","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\n\nf = \\(x any) any {\n  x\n}\n\nmain = \\(ctx context) none {\n  f(\"\")\n\n  none\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>check_memory_leak.sh ./app</code>.</p>"},{"location":"examples/smoke/memory-leak/language/#shadow-a-variable-in-a-block","title":"Shadow a variable in a block","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\n\ntype foo {\n  x number\n}\n\nmain = \\(ctx context) none {\n  x = foo{x: 42}\n  x = x.x\n\n  none\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>check_memory_leak.sh ./app</code>.</p>"},{"location":"examples/smoke/memory-leak/language/#define-a-function-in-a-let-expression-with-a-free-variable","title":"Define a function in a let expression with a free variable","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\n\ntype foo {\n  x number\n}\n\nmain = \\(ctx context) none {\n  x = foo{x: 42}\n  _ = \\() number { x.x }\n\n  none\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>check_memory_leak.sh ./app</code>.</p>"},{"location":"examples/smoke/memory-leak/language/#convert-a-number-to-a-string","title":"Convert a number to a string","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Core'Number\nimport Os'Context { Context }\n\nmain = \\(ctx context) none {\n  Number'String(42)\n\n  none\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>check_memory_leak.sh ./app</code>.</p>"},{"location":"examples/smoke/memory-leak/language/#join-strings","title":"Join strings","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Core'String\nimport Os'Context { Context }\n\nmain = \\(ctx context) none {\n  String'Join([string \"hello\", \"world\"], \" \")\n\n  none\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>check_memory_leak.sh ./app</code>.</p>"},{"location":"examples/smoke/memory-leak/language/#drop-an-unforced-list","title":"Drop an unforced list","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\n\ntype foo {\n  x number\n}\n\nmain = \\(ctx context) none {\n  x = foo{x: 42}\n  _ = [foo x]\n\n  none\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>check_memory_leak.sh ./app</code>.</p>"},{"location":"examples/smoke/memory-leak/language/#drop-a-forced-list","title":"Drop a forced list","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\n\ntype foo {\n  x number\n}\n\nmain = \\(ctx context) none {\n  x = foo{x: 42}\n\n  if [x, ...xs] = [foo x] {\n    x()\n  } else {\n    none\n  }\n\n  none\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>check_memory_leak.sh ./app</code>.</p>"},{"location":"examples/smoke/memory-leak/language/#drop-an-unforced-list-with-no-environment","title":"Drop an unforced list with no environment","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\n\ntype foo {\n  x number\n}\n\nmain = \\(ctx context) none {\n  [foo foo{x: 42}]\n\n  none\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>check_memory_leak.sh ./app</code>.</p>"},{"location":"examples/smoke/memory-leak/language/#drop-a-forced-list-with-no-environment","title":"Drop a forced list with no environment","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\n\ntype foo {\n  x number\n}\n\nmain = \\(ctx context) none {\n  if [x, ...xs] = [foo foo{x: 42}] {\n    x()\n  } else {\n    none\n  }\n\n  none\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>check_memory_leak.sh ./app</code>.</p>"},{"location":"examples/smoke/memory-leak/language/#force-an-element-twice","title":"Force an element twice","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\n\nmain = \\(ctx context) none {\n  xs = [none none]\n\n  if [x, ..._] = xs {\n    x()\n    x()\n  } else {\n    none\n  }\n\n  none\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>check_memory_leak.sh ./app</code>.</p>"},{"location":"examples/smoke/memory-leak/language/#use-spawn-function","title":"Use spawn function","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>main = \\(ctx context) none {\n  f = go(\\() none { none })\n\n  f()\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>check_memory_leak.sh ./app</code>.</p>"},{"location":"examples/smoke/memory-leak/language/#use-spawn-function-with-a-record","title":"Use spawn function with a record","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>type foo {\n  x number\n  y number\n  z number\n}\n\nmain = \\(ctx context) none {\n  x = foo{x: 1, y: 2, z: 3}\n\n  f = go(\\() none {\n    _ = x\n    none\n  })\n\n  f()\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>check_memory_leak.sh ./app</code>.</p>"},{"location":"examples/smoke/memory-leak/language/#use-spawn-function-with-a-closure","title":"Use spawn function with a closure","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>main = \\(ctx context) none {\n  x = \\() none { none }\n\n  f = go(\\() none {\n    _ = x\n    none\n  })\n\n  f()\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>check_memory_leak.sh ./app</code>.</p>"},{"location":"examples/smoke/memory-leak/language/#use-spawn-function-with-a-closure-with-a-record","title":"Use spawn function with a closure with a record","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>type foo {\n  x number\n  y number\n  z number\n}\n\nmain = \\(ctx context) none {\n  x = foo{x: 1, y: 2, z: 3}\n\n  y = \\() none {\n    _ = x\n    none\n  }\n\n  f = go(\\() none {\n    _ = y\n    none\n  })\n\n  f()\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>check_memory_leak.sh ./app</code>.</p>"},{"location":"examples/smoke/memory-leak/language/#concatenate-strings","title":"Concatenate strings","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>main = \\(ctx context) none {\n  x = \"foo\"\n  y = x + x\n  z = y + y\n\n  none\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>check_memory_leak.sh ./app</code>.</p>"},{"location":"examples/smoke/types/list/","title":"List","text":""},{"location":"examples/smoke/types/list/#background","title":"Background","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"application\",\n  \"dependencies\": {\n    \"Os\": \"pen:///os\"\n  }\n}</code></pre>"},{"location":"examples/smoke/types/list/#force-multiple-elements-of-a-list","title":"Force multiple elements of a list","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Process\n\nmain = \\(ctx context) none {\n  if [x, ...xs] = [none ...[none none]] {\n    x()\n\n    none\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>check_memory_leak.sh ./app</code>.</p>"},{"location":"examples/smoke/types/list/#force-an-element-in-a-list-of-any-type","title":"Force an element in a list of any type","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Process\n\nmain = \\(ctx context) none {\n  if [x, ..._] = [any \"foo\"] {\n    x()\n\n    none\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>check_memory_leak.sh ./app</code>.</p>"},{"location":"examples/smoke/types/list/#compile-nested-list-comprehension","title":"Compile nested list comprehension","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\nimport Os'Process\n\nf = \\(xss [[boolean]]) [[number]] {\n  [[number]\n    [number if x() { 1 } else { 0 } for x in xs()]\n    for xs in xss\n  ]\n}\n\nmain = \\(ctx context) none {\n  if [x, ..._] = f([[boolean] [boolean true, false]]) {\n    x()\n\n    none\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>check_memory_leak.sh ./app</code>.</p>"},{"location":"examples/smoke/types/list/#compile-list-comprehension-with-wrong-typing","title":"Compile list comprehension with wrong typing","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>main = \\(ctx context) none {\n  _ = [none x() for x in [none 1]]\n\n  none\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the stderr should contain \"types not matched\".</p>"},{"location":"examples/smoke/types/list/#evaluate-list-comprehension-lazily","title":"Evaluate list comprehension lazily","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\nimport Os'Process\n\nxs = \\(ctx Context) [none] {\n  Process'Exit(ctx, 1)\n\n  [none]\n}\n\nmain = \\(ctx context) none {\n  _ = [none x() for x in xs(ctx.Os)]\n\n  none\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code>.</p>"},{"location":"examples/smoke/types/string/","title":"String","text":""},{"location":"examples/smoke/types/string/#background","title":"Background","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"application\",\n  \"dependencies\": {\n    \"Os\": \"pen:///os\"\n  }\n}</code></pre>"},{"location":"examples/smoke/types/string/#concatenate-zero-length-strings","title":"Concatenate zero-length strings","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Process\n\nmain = \\(ctx context) none {\n  debug(\"\" + \"foo\" + \"\")\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>check_memory_leak.sh ./app</code></p> <p>And I successfully run <code>./app</code></p> <p>And the stderr from \"./app\" should contain exactly \"\\\"foo\\\"\".</p>"},{"location":"examples/standard-packages/core/","title":"Core","text":""},{"location":"examples/standard-packages/core/#background","title":"Background","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"library\",\n  \"dependencies\": {\n    \"Core\": \"pen:///core\"\n  }\n}</code></pre>"},{"location":"examples/standard-packages/core/#convert-a-number-to-a-string","title":"Convert a number to a string","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>import Core'Number\n\nf = \\() string {\n  Number'String(42)\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/standard-packages/core/#sum-numbers","title":"Sum numbers","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>import Core'Number\n\nf = \\() number {\n  Number'Sum([number 1, 2, 3])\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/standard-packages/core/#join-strings","title":"Join strings","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>import Core'String\n\nf = \\() string {\n  String'Join([string \"hello\", \"world\"], \" \")\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/standard-packages/core/#slice-a-string-as-bytes","title":"Slice a string as bytes","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>import Core'String'Byte\n\nf = \\() string {\n  Byte'Slice(\"foo\", 1, 2)\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/standard-packages/os-sync/","title":"OS (synchronous version)","text":""},{"location":"examples/standard-packages/os-sync/#background","title":"Background","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"application\",\n  \"dependencies\": {\n    \"Os\": \"pen:///os-sync\",\n    \"Core\": \"pen:///core\"\n  }\n}</code></pre>"},{"location":"examples/standard-packages/os-sync/#build-an-application","title":"Build an application","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\nimport Os'File\nimport Os'Process\n\nmain = \\(ctx context) none {\n  if _ = run(ctx.Os) as none {\n    none\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}\n\nrun = \\(ctx Context) none | error {\n  File'Write(ctx, File'StdOut(), \"Hello, world!\")?\n\n  none\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code></p> <p>And the stdout from \"./app\" should contain exactly \"Hello, world!\".</p>"},{"location":"examples/standard-packages/os-sync/#get-arguments","title":"Get arguments","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Core'String\nimport Os'Context { Context }\nimport Os'Environment\nimport Os'File\nimport Os'Process\n\nmain = \\(ctx context) none {\n  if _ = run(ctx.Os) as none {\n    none\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}\n\nrun = \\(ctx Context) none | error {\n  File'Write(ctx, File'StdOut(), String'Join(Environment'Arguments(ctx), \" \"))?\n\n  none\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app foo bar</code></p> <p>And stdout from \"./app foo bar\" should contain exactly \"foo bar\".</p>"},{"location":"examples/standard-packages/os-sync/#get-an-environment-variable","title":"Get an environment variable","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Core'String\nimport Os'Context { Context }\nimport Os'File\nimport Os'Environment\nimport Os'Process\n\nmain = \\(ctx context) none {\n  if _ = run(ctx.Os) as none {\n    none\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}\n\nrun = \\(ctx Context) none | error {\n  File'Write(ctx, File'StdOut(), Environment'Variable(ctx, \"FOO\")?)?\n\n  none\n}</code></pre> <p>And I append \"foo\" to the environment variable \"FOO\"</p> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code></p> <p>And stdout from \"./app\" should contain exactly \"foo\".</p>"},{"location":"examples/standard-packages/os-sync/#open-a-file","title":"Open a file","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\nimport Os'File { File }\nimport Os'Process\n\nmain = \\(ctx context) none {\n  if _ = run(ctx.Os) as none {\n    none\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}\n\nrun = \\(ctx Context) none | error {\n  File'Open(ctx, \"./foo.txt\")?\n\n  none\n}</code></pre> <p>And a file named \"foo.txt\" with \"\"</p> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code>.</p>"},{"location":"examples/standard-packages/os-sync/#read-a-file","title":"Read a file","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\nimport Os'File\nimport Os'File'OpenOptions\nimport Os'Process\n\nmain = \\(ctx context) none {\n  if _ = run(ctx.Os) as none {\n    none\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}\n\nrun = \\(ctx Context) none | error {\n  f = File'Open(ctx, \"foo.txt\")?\n  d = File'Read(ctx, f)?\n\n  File'Write(ctx, File'StdOut(), d)?\n\n  none\n}</code></pre> <p>And a file named \"foo.txt\" with \"foo\"</p> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code></p> <p>And the stdout from \"./app\" should contain exactly \"foo\".</p>"},{"location":"examples/standard-packages/os-sync/#read-a-file-until-a-limit","title":"Read a file until a limit","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\nimport Os'File\nimport Os'Process\n\nmain = \\(ctx context) none {\n  if _ = run(ctx.Os) as none {\n    none\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}\n\nrun = \\(ctx Context) none | error {\n  f = File'Open(ctx, \"foo.txt\")?\n  d = File'ReadLimit(ctx, f, 5)?\n  File'Write(ctx, File'StdOut(), d)?\n\n  none\n}</code></pre> <p>And a file named \"foo.txt\" with \"Hello, world!\"</p> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code></p> <p>And the stdout from \"./app\" should contain exactly \"Hello\".</p>"},{"location":"examples/standard-packages/os-sync/#write-a-file","title":"Write a file","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\nimport Os'File\nimport Os'File'OpenOptions { OpenOptions }\nimport Os'Process\n\nmain = \\(ctx context) none {\n  if _ = run(ctx.Os) as none {\n    none\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}\n\nrun = \\(ctx Context) none | error {\n  f = File'OpenWithOptions(\n    ctx,\n    \"./foo.txt\",\n    OpenOptions{...OpenOptions'Default(), Write: true},\n  )?\n\n  File'Write(ctx, f, \"foo\")?\n\n  none\n}</code></pre> <p>And a file named \"foo.txt\" with \"\"</p> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code></p> <p>And the file \"foo.txt\" should contain \"foo\".</p>"},{"location":"examples/standard-packages/os-sync/#copy-a-file","title":"Copy a file","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\nimport Os'File\nimport Os'Process\n\nmain = \\(ctx context) none {\n  if _ = File'Copy(ctx.Os, \"foo.txt\", \"bar.txt\") as none {\n    none\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}</code></pre> <p>And a file named \"foo.txt\" with \"foo\"</p> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code></p> <p>And the file \"foo.txt\" should contain \"foo\"</p> <p>And the file \"bar.txt\" should contain \"foo\".</p>"},{"location":"examples/standard-packages/os-sync/#move-a-file","title":"Move a file","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\nimport Os'File\nimport Os'Process\n\nmain = \\(ctx context) none {\n  if _ = File'Move(ctx.Os, \"foo.txt\", \"bar.txt\") as none {\n    none\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}</code></pre> <p>And a file named \"foo.txt\" with \"foo\"</p> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code></p> <p>And the file \"foo.txt\" does not exist</p> <p>And the file \"bar.txt\" should contain \"foo\".</p>"},{"location":"examples/standard-packages/os-sync/#remove-a-file","title":"Remove a file","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\nimport Os'File\nimport Os'Process\n\nmain = \\(ctx context) none {\n  if _ = File'Remove(ctx.Os, \"foo.txt\") as none {\n    none\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}</code></pre> <p>And a file named \"foo.txt\" with \"\"</p> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code></p> <p>And the file \"foo.txt\" does not exist.</p>"},{"location":"examples/standard-packages/os-sync/#read-a-directory","title":"Read a directory","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Core'String\nimport Os'Context { Context }\nimport Os'File\nimport Os'Directory\nimport Os'Process\n\nmain = \\(ctx context) none {\n  if _ = run(ctx.Os) as none {\n    none\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}\n\nrun = \\(ctx Context) none | error {\n  File'Write(\n    ctx,\n    File'StdOut(),\n    String'Join(Directory'Read(ctx, \".\")?, \"\\n\"),\n  )?\n\n  none\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code></p> <p>And the stdout from \"./app\" should contain \"main.pen\"</p> <p>And the stdout from \"./app\" should contain \"pen.json\".</p>"},{"location":"examples/standard-packages/os-sync/#create-a-directory","title":"Create a directory","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\nimport Os'Directory\nimport Os'Process\n\nmain = \\(ctx context) none {\n  if _ = Directory'Create(ctx.Os, \"foo\") as none {\n    none\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code></p> <p>And a directory named \"foo\" should exist.</p>"},{"location":"examples/standard-packages/os-sync/#remove-a-directory","title":"Remove a directory","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\nimport Os'Directory\nimport Os'Process\n\nmain = \\(ctx context) none {\n  if _ = Directory'Remove(ctx.Os, \"foo\") as none {\n    none\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}</code></pre> <p>And a directory named \"foo\"</p> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code></p> <p>And a directory named \"foo\" should not exist.</p>"},{"location":"examples/standard-packages/os-sync/#get-file-metadata","title":"Get file metadata","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\nimport Os'File\nimport Os'File'Metadata { Metadata }\nimport Os'Process\n\nmain = \\(ctx context) none {\n  m = File'Metadata(ctx.Os, \"foo\")\n\n  c = if m = m as Metadata {\n    if m.Size == 3 {\n      0\n    } else {\n      1\n    }\n  } else {\n    1\n  }\n\n  Process'Exit(ctx.Os, c)\n}</code></pre> <p>And a file named \"foo\" with:</p> <pre><code>foo\n</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code>.</p>"},{"location":"examples/standard-packages/os-sync/#get-system-time","title":"Get system time","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Core'Number\nimport Os'Context { Context }\nimport Os'File\nimport Os'Process\nimport Os'Time\n\nmain = \\(ctx context) none {\n  if m = run(ctx.Os) as none {\n    none\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}\n\nrun = \\(ctx Context) none | error {\n  File'Write(ctx, File'StdOut(), Number'String(Time'Now(ctx)))?\n\n  none\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code>.</p>"},{"location":"examples/standard-packages/os-sync/#sleep","title":"Sleep","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\nimport Os'Time\n\nmain = \\(ctx context) none {\n  Time'Sleep(ctx.Os, 1)\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code>.</p>"},{"location":"examples/standard-packages/os-sync/#exit-a-process","title":"Exit a process","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\nimport Os'Process\n\nmain = \\(ctx context) none {\n  Process'Exit(ctx.Os, 42)\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I run <code>./app</code></p> <p>And the exit status should be 42.</p>"},{"location":"examples/standard-packages/os/","title":"Os","text":""},{"location":"examples/standard-packages/os/#background","title":"Background","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"application\",\n  \"dependencies\": {\n    \"Os\": \"pen:///os\",\n    \"Core\": \"pen:///core\"\n  }\n}</code></pre>"},{"location":"examples/standard-packages/os/#build-an-application","title":"Build an application","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\nimport Os'File\nimport Os'Process\n\nmain = \\(ctx context) none {\n  if _ = run(ctx.Os) as none {\n    none\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}\n\nrun = \\(ctx Context) none | error {\n  File'Write(ctx, File'StdOut(), \"Hello, world!\")?\n\n  none\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code></p> <p>And the stdout from \"./app\" should contain exactly \"Hello, world!\".</p>"},{"location":"examples/standard-packages/os/#get-arguments","title":"Get arguments","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Core'String\nimport Os'Context { Context }\nimport Os'Environment\nimport Os'File\nimport Os'Process\n\nmain = \\(ctx context) none {\n  if _ = run(ctx.Os) as none {\n    none\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}\n\nrun = \\(ctx Context) none | error {\n  File'Write(ctx, File'StdOut(), String'Join(Environment'Arguments(ctx), \" \"))?\n\n  none\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app foo bar</code></p> <p>And stdout from \"./app foo bar\" should contain exactly \"foo bar\".</p>"},{"location":"examples/standard-packages/os/#get-an-environment-variable","title":"Get an environment variable","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Core'String\nimport Os'Context { Context }\nimport Os'File\nimport Os'Environment\nimport Os'Process\n\nmain = \\(ctx context) none {\n  if _ = run(ctx.Os) as none {\n    none\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}\n\nrun = \\(ctx Context) none | error {\n  File'Write(ctx, File'StdOut(), Environment'Variable(ctx, \"FOO\")?)?\n\n  none\n}</code></pre> <p>And I append \"foo\" to the environment variable \"FOO\"</p> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code></p> <p>And stdout from \"./app\" should contain exactly \"foo\".</p>"},{"location":"examples/standard-packages/os/#open-a-file","title":"Open a file","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\nimport Os'File { File }\nimport Os'Process\n\nmain = \\(ctx context) none {\n  if _ = run(ctx.Os) as none {\n    none\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}\n\nrun = \\(ctx Context) none | error {\n  File'Open(ctx, \"./foo.txt\")?\n\n  none\n}</code></pre> <p>And a file named \"foo.txt\" with \"\"</p> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code>.</p>"},{"location":"examples/standard-packages/os/#read-a-file","title":"Read a file","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\nimport Os'File\nimport Os'File'OpenOptions\nimport Os'Process\n\nmain = \\(ctx context) none {\n  if _ = run(ctx.Os) as none {\n    none\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}\n\nrun = \\(ctx Context) none | error {\n  f = File'Open(ctx, \"foo.txt\")?\n  d = File'Read(ctx, f)?\n\n  File'Write(ctx, File'StdOut(), d)?\n\n  none\n}</code></pre> <p>And a file named \"foo.txt\" with \"foo\"</p> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code></p> <p>And the stdout from \"./app\" should contain exactly \"foo\".</p>"},{"location":"examples/standard-packages/os/#read-a-file-until-a-limit","title":"Read a file until a limit","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\nimport Os'File\nimport Os'Process\n\nmain = \\(ctx context) none {\n  if _ = run(ctx.Os) as none {\n    none\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}\n\nrun = \\(ctx Context) none | error {\n  f = File'Open(ctx, \"foo.txt\")?\n  d = File'ReadLimit(ctx, f, 5)?\n  File'Write(ctx, File'StdOut(), d)?\n\n  none\n}</code></pre> <p>And a file named \"foo.txt\" with \"Hello, world!\"</p> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code></p> <p>And the stdout from \"./app\" should contain exactly \"Hello\".</p>"},{"location":"examples/standard-packages/os/#write-a-file","title":"Write a file","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\nimport Os'File\nimport Os'File'OpenOptions { OpenOptions }\nimport Os'Process\n\nmain = \\(ctx context) none {\n  if _ = run(ctx.Os) as none {\n    none\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}\n\nrun = \\(ctx Context) none | error {\n  f = File'OpenWithOptions(\n    ctx,\n    \"./foo.txt\",\n    OpenOptions{...OpenOptions'Default(), Write: true},\n  )?\n\n  File'Write(ctx, f, \"foo\")?\n\n  none\n}</code></pre> <p>And a file named \"foo.txt\" with \"\"</p> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code></p> <p>And the file \"foo.txt\" should contain \"foo\".</p>"},{"location":"examples/standard-packages/os/#copy-a-file","title":"Copy a file","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\nimport Os'File\nimport Os'Process\n\nmain = \\(ctx context) none {\n  if _ = File'Copy(ctx.Os, \"foo.txt\", \"bar.txt\") as none {\n    none\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}</code></pre> <p>And a file named \"foo.txt\" with \"foo\"</p> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code></p> <p>And the file \"foo.txt\" should contain \"foo\"</p> <p>And the file \"bar.txt\" should contain \"foo\".</p>"},{"location":"examples/standard-packages/os/#move-a-file","title":"Move a file","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\nimport Os'File\nimport Os'Process\n\nmain = \\(ctx context) none {\n  if _ = File'Move(ctx.Os, \"foo.txt\", \"bar.txt\") as none {\n    none\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}</code></pre> <p>And a file named \"foo.txt\" with \"foo\"</p> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code></p> <p>And the file \"foo.txt\" does not exist</p> <p>And the file \"bar.txt\" should contain \"foo\".</p>"},{"location":"examples/standard-packages/os/#remove-a-file","title":"Remove a file","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\nimport Os'File\nimport Os'Process\n\nmain = \\(ctx context) none {\n  if _ = File'Remove(ctx.Os, \"foo.txt\") as none {\n    none\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}</code></pre> <p>And a file named \"foo.txt\" with \"\"</p> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code></p> <p>And the file \"foo.txt\" does not exist.</p>"},{"location":"examples/standard-packages/os/#read-a-directory","title":"Read a directory","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Core'String\nimport Os'Context { Context }\nimport Os'File\nimport Os'Directory\nimport Os'Process\n\nmain = \\(ctx context) none {\n  if _ = run(ctx.Os) as none {\n    none\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}\n\nrun = \\(ctx Context) none | error {\n  File'Write(\n    ctx,\n    File'StdOut(),\n    String'Join(Directory'Read(ctx, \".\")?, \"\\n\"),\n  )?\n\n  none\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code></p> <p>And the stdout from \"./app\" should contain \"main.pen\"</p> <p>And the stdout from \"./app\" should contain \"pen.json\".</p>"},{"location":"examples/standard-packages/os/#create-a-directory","title":"Create a directory","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\nimport Os'Directory\nimport Os'Process\n\nmain = \\(ctx context) none {\n  if _ = Directory'Create(ctx.Os, \"foo\") as none {\n    none\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code></p> <p>And a directory named \"foo\" should exist.</p>"},{"location":"examples/standard-packages/os/#remove-a-directory","title":"Remove a directory","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\nimport Os'Directory\nimport Os'Process\n\nmain = \\(ctx context) none {\n  if _ = Directory'Remove(ctx.Os, \"foo\") as none {\n    none\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}</code></pre> <p>And a directory named \"foo\"</p> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code></p> <p>And a directory named \"foo\" should not exist.</p>"},{"location":"examples/standard-packages/os/#get-file-metadata","title":"Get file metadata","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\nimport Os'File\nimport Os'File'Metadata { Metadata }\nimport Os'Process\n\nmain = \\(ctx context) none {\n  m = File'Metadata(ctx.Os, \"foo\")\n\n  c = if m = m as Metadata {\n    if m.Size == 3 {\n      0\n    } else {\n      1\n    }\n  } else {\n    1\n  }\n\n  Process'Exit(ctx.Os, c)\n}</code></pre> <p>And a file named \"foo\" with:</p> <pre><code>foo\n</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code>.</p>"},{"location":"examples/standard-packages/os/#get-system-time","title":"Get system time","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Core'Number\nimport Os'Context { Context }\nimport Os'File\nimport Os'Process\nimport Os'Time\n\nmain = \\(ctx context) none {\n  if m = run(ctx.Os) as none {\n    none\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}\n\nrun = \\(ctx Context) none | error {\n  File'Write(ctx, File'StdOut(), Number'String(Time'Now(ctx)))?\n\n  none\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code>.</p>"},{"location":"examples/standard-packages/os/#sleep","title":"Sleep","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\nimport Os'Time\n\nmain = \\(ctx context) none {\n  Time'Sleep(ctx.Os, 1)\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code>.</p>"},{"location":"examples/standard-packages/os/#exit-a-process","title":"Exit a process","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\nimport Os'Process\n\nmain = \\(ctx context) none {\n  Process'Exit(ctx.Os, 42)\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I run <code>./app</code></p> <p>And the exit status should be 42.</p>"},{"location":"examples/standard-packages/random/","title":"Random","text":""},{"location":"examples/standard-packages/random/#background","title":"Background","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"application\",\n  \"dependencies\": {\n    \"Core\": \"pen:///core\",\n    \"Os\": \"pen:///os\",\n    \"Random\": \"pen:///random\"\n  }\n}</code></pre>"},{"location":"examples/standard-packages/random/#generate-a-random-number","title":"Generate a random number","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Core'Number\nimport Os'Context { Context }\nimport Os'File\nimport Os'Process\nimport Random'Random\n\nmain = \\(ctx context) none {\n  if m = run(ctx) as none {\n    none\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}\n\nrun = \\(ctx context) none | error {\n  File'Write(ctx.Os, File'StdOut(), Number'String(Random'Number(ctx.Random)))?\n\n  none\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code>.</p>"},{"location":"examples/standard-packages/test/","title":"Test","text":""},{"location":"examples/standard-packages/test/#background","title":"Background","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"library\",\n  \"dependencies\": {\n    \"Test\": \"pen:///test\"\n  }\n}</code></pre>"},{"location":"examples/standard-packages/test/#check-if-a-condition-is-true","title":"Check if a condition is true","text":"<p>Given a file named \"foo.test.pen\" with:</p> <pre><code>import Test'Assert\n\nFoo = \\() none | error {\n  Assert'True(true)\n}</code></pre> <p>When I run <code>pen test</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/standard-packages/test/#check-if-a-value-is-an-error","title":"Check if a value is an error","text":"<p>Given a file named \"foo.test.pen\" with:</p> <pre><code>import Test'Assert\n\nFoo = \\() none | error {\n  Assert'Error(error(none))\n}</code></pre> <p>When I run <code>pen test</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/standard-packages/test/#make-a-test-fail","title":"Make a test fail","text":"<p>Given a file named \"foo.test.pen\" with:</p> <pre><code>import Test'Assert\n\nFoo = \\() none | error {\n  Assert'Fail()\n}</code></pre> <p>When I run <code>pen test</code></p> <p>Then the exit status should be 1.</p>"},{"location":"examples/syntax/block/","title":"Block","text":""},{"location":"examples/syntax/block/#background","title":"Background","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"library\",\n  \"dependencies\": {}\n}</code></pre>"},{"location":"examples/syntax/block/#define-a-variable","title":"Define a variable","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\(x number) number {\n  y = x\n\n  y\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/syntax/block/#call-a-function","title":"Call a function","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\() none {\n  none\n}\n\ng = \\() none {\n  f()\n\n  none\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/syntax/block/#use-if-expression","title":"Use if expression","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\() none {\n  none\n}\n\ng = \\() none {\n  none\n}\n\nh = \\(x boolean) none {\n  if x {\n    f()\n  } else {\n    g()\n  }\n\n  none\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/syntax/concurrency/","title":"Concurrency","text":""},{"location":"examples/syntax/concurrency/#background","title":"Background","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"application\",\n  \"dependencies\": {\n    \"Os\": \"pen:///os\"\n  }\n}</code></pre>"},{"location":"examples/syntax/concurrency/#use-spawn-function","title":"Use spawn function","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>main = \\(ctx context) none {\n  f = go(\\() none { none })\n\n  f()\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code>.</p>"},{"location":"examples/syntax/concurrency/#use-race-function","title":"Use race function","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Process\n\nmain = \\(ctx context) none {\n  xs = race([[none] [none none]])\n\n  if [x, ...xs] = xs {\n    x()\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code>.</p>"},{"location":"examples/syntax/concurrency/#use-race-function-with-multiple-lists","title":"Use race function with multiple lists","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Process\n\nmain = \\(ctx context) none {\n  xs = race([[none] [none none], [none none]])\n\n  if [x, ...xs] = xs {\n    x()\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code>.</p>"},{"location":"examples/syntax/concurrency/#use-race-function-to-get-the-first-result","title":"Use race function to get the first result","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\nimport Os'Process\nimport Os'Time\n\nmain = \\(ctx context) none {\n  xs = race([[boolean]\n    [boolean (\\() boolean { loop(ctx.Os) false })()],\n    [boolean true],\n  ])\n\n  if [x, ...xs] = xs {\n    if x() {\n      none\n    } else {\n      Process'Exit(ctx.Os, 1)\n    }\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}\n\nloop = \\(ctx Context) none {\n  Time'Sleep(ctx, 1)\n  loop(ctx)\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code>.</p>"},{"location":"examples/syntax/concurrency/#use-race-function-and-get-all-elements","title":"Use race function and get all elements","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Process\n\nmain = \\(ctx context) none {\n  xs = race([[none] [none none], [none none]])\n\n  if xs == [none none, none] {\n    none\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code>.</p>"},{"location":"examples/types/any/","title":"Any","text":""},{"location":"examples/types/any/#background","title":"Background","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"library\",\n  \"dependencies\": {}\n}</code></pre>"},{"location":"examples/types/any/#use-an-any-type","title":"Use an any type","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\() any {\n  42\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/any/#downcast-an-any-type","title":"Downcast an any type","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\(x any) number {\n  if x = x as number {\n    x\n  } else {\n    0\n  }\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/boolean/","title":"Boolean","text":""},{"location":"examples/types/boolean/#background","title":"Background","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"library\",\n  \"dependencies\": {}\n}</code></pre>"},{"location":"examples/types/boolean/#use-boolean-literals","title":"Use boolean literals","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\() boolean {\n  true\n}\n\ng = \\() boolean {\n  false\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/boolean/#use-an-and-operation","title":"Use an and operation","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\() boolean {\n  true &amp; false\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/boolean/#use-an-or-operation","title":"Use an or operation","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\() boolean {\n  true | false\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/boolean/#use-a-not-operation","title":"Use a not operation","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\() boolean {\n  !true\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/boolean/#use-an-if-expression","title":"Use an if expression","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\() number {\n  if true {\n    1\n  } else {\n    0\n  }\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/error/","title":"Error","text":""},{"location":"examples/types/error/#background","title":"Background","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"library\",\n  \"dependencies\": {}\n}</code></pre>"},{"location":"examples/types/error/#call-an-error-function","title":"Call an error function","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\() error {\n  error(none)\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/error/#call-a-source-function","title":"Call a source function","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\(e error) any {\n  source(e)\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/error/#use-a-try-operator","title":"Use a try operator","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\(x number | error) number | error {\n  x? + 1\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/error/#use-a-try-operator-with-a-union-type","title":"Use a try operator with a union type","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\(x number | none | error) number | error {\n  if x = x? as number {\n    x + 1\n  } else if none {\n    0\n  }\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/function/","title":"Function","text":""},{"location":"examples/types/function/#background","title":"Background","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"library\",\n  \"dependencies\": {}\n}</code></pre>"},{"location":"examples/types/function/#define-a-function","title":"Define a function","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\(x number) number {\n  x\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/function/#call-a-function-with-no-argument","title":"Call a function with no argument","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\() number {\n  f()\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/function/#call-a-function-with-an-argument","title":"Call a function with an argument","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\(x number) number {\n  f(x)\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/function/#call-a-function-with-two-arguments","title":"Call a function with two arguments","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\(x number, y number) number {\n  f(x, y)\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/function/#define-a-closure","title":"Define a closure","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\(x number) \\(number) number {\n  \\(y number) number {\n    x + y\n  }\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/list/","title":"List","text":""},{"location":"examples/types/list/#background","title":"Background","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"library\",\n  \"dependencies\": {}\n}</code></pre>"},{"location":"examples/types/list/#create-an-empty-list","title":"Create an empty list","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\() [number] {\n  [number]\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/list/#create-a-list-with-an-element","title":"Create a list with an element","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\() [number] {\n  [number 1]\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/list/#create-a-list-with-two-elements","title":"Create a list with two elements","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\() [number] {\n  [number 1, 2]\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/list/#join-lists","title":"Join lists","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\(xs [number]) [number] {\n  [number ...xs, ...xs]\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/list/#create-a-list-of-a-union-type","title":"Create a list of a union type","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\() [number | none] {\n  [number | none 1, none]\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/list/#coerce-elements-of-a-spread-list","title":"Coerce elements of a spread list","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\(xs [number]) [number | none] {\n  [number | none ...xs]\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/list/#use-if-list-expression","title":"Use if-list expression","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\(xs [number]) [number] {\n  if [y, ...ys] = xs {\n    [number y(), ...ys]\n  } else {\n    [number]\n  }\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/list/#use-list-comprehension","title":"Use list comprehension","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\(xs [number]) [number] {\n  [number x() + 42 for x in xs]\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/list/#permutate-lists","title":"Permutate lists","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\(xs [number], ys [number]) [number] {\n  [number x() + y() for x in xs for y in ys]\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/list/#flatten-a-list","title":"Flatten a list","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\(xs [[number]]) [number] {\n  [number y() for y in x() for x in xs]\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/list/#filter-a-list","title":"Filter a list","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\(xs [number]) [number] {\n  [number x() for x in xs if x() &lt; 42]\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/list/#zip-lists","title":"Zip lists","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\(xs [number], ys [number]) [number] {\n  [number x() + y() for x, y in xs, ys]\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/list/#get-a-size-of-a-list","title":"Get a size of a list","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\(xs [none]) number {\n  size(xs)\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/map/","title":"Map","text":""},{"location":"examples/types/map/#background","title":"Background","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"library\",\n  \"dependencies\": {}\n}</code></pre>"},{"location":"examples/types/map/#create-an-empty-map","title":"Create an empty map","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\() {string: number} {\n  {string: number}\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/map/#create-a-map-with-an-entry","title":"Create a map with an entry","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\() {string: number} {\n  {string: number \"foo\": 42}\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/map/#create-a-map-with-two-elements","title":"Create a map with two elements","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\() {string: number} {\n  {string: number \"foo\": 1, \"bar\": 2}\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/map/#get-a-value-in-a-map","title":"Get a value in a map","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\(xs {string: number}) number {\n  if x = xs[\"foo\"] {\n    x\n  } else {\n    0\n  }\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/map/#merge-maps","title":"Merge maps","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\(xs {string: number}) {string: number} {\n  {string: number ...xs, ...xs}\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/map/#merge-a-map-of-different-types","title":"Merge a map of different types","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\(xs {string: number}) {string | none: number | none} {\n  {string | none: number | none ...xs}\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/map/#create-a-map-of-a-union-type-key","title":"Create a map of a union type key","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\() {string|none:number} {\n  {string|none:number \"foo\": 1, none: 2}\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/map/#create-a-map-of-a-union-type-value","title":"Create a map of a union type value","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\() {string: number | none} {\n  {string: number | none \"foo\": 42, \"bar\": none}\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/map/#iterate-map-keys","title":"Iterate map keys","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\(xs {string: number}) [string] {\n  keys(xs)\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/map/#iterate-map-values","title":"Iterate map values","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\(xs {string: number}) [number] {\n  values(xs)\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/map/#get-a-size-of-a-map","title":"Get a size of a map","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\(xs {string: number}) number {\n  size(xs)\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/map/#delete-an-entry-of-a-map","title":"Delete an entry of a map","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\(xs {string: number}) {string: number} {\n  delete(xs, \"foo\")\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/none/","title":"None","text":""},{"location":"examples/types/none/#background","title":"Background","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"library\",\n  \"dependencies\": {}\n}</code></pre>"},{"location":"examples/types/none/#use-a-none-literal","title":"Use a none literal","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\() none {\n  none\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/number/","title":"Number","text":""},{"location":"examples/types/number/#background","title":"Background","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"library\",\n  \"dependencies\": {}\n}</code></pre>"},{"location":"examples/types/number/#use-a-number-literal","title":"Use a number literal","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\() number {\n  42\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/number/#use-arithmetic-operators","title":"Use arithmetic operators","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\() number {\n  1 + 2 - 3 * 4 / 5\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/number/#use-equality-operators","title":"Use equality operators","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\() boolean {\n  0 == 0\n}\n\ng = \\() boolean {\n  0 != 0\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/number/#use-order-operators","title":"Use order operators","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\() boolean {\n  0 &lt; 0\n}\n\ng = \\() boolean {\n  0 &lt;= 0\n}\n\nh = \\() boolean {\n  0 &gt; 0\n}\n\ni = \\() boolean {\n  0 &gt;= 0\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/polymorphism/","title":"Polymorphism","text":""},{"location":"examples/types/polymorphism/#background","title":"Background","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"library\",\n  \"dependencies\": {}\n}</code></pre>"},{"location":"examples/types/polymorphism/#use-an-equal-operator","title":"Use an equal operator","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\(x number | none) boolean {\n  x == none\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/polymorphism/#use-a-not-equal-operator","title":"Use a not-equal operator","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\(x number | none) boolean {\n  x != none\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/polymorphism/#compare-unions","title":"Compare unions","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\(x number | none, y number | none) boolean {\n  x == y\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/polymorphism/#compare-a-union-and-none","title":"Compare a union and none","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\(x number | none) boolean {\n  x == none\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/record/","title":"Record","text":""},{"location":"examples/types/record/#background","title":"Background","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"library\",\n  \"dependencies\": {}\n}</code></pre>"},{"location":"examples/types/record/#create-a-record-with-a-field","title":"Create a record with a field","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>type r {\n  x number\n}\n\nf = \\() r {\n  r{x: 42}\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/record/#create-a-record-with-two-fields","title":"Create a record with two fields","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>type r {\n  x number\n  y none\n}\n\nf = \\() r {\n  r{x: 42, y: none}\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/record/#create-a-record-with-no-field","title":"Create a record with no field","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>type r {}\n\nf = \\() r {\n  r{}\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/record/#update-a-record","title":"Update a record","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>type r {\n  x number\n  y none\n}\n\nf = \\(x r) r {\n  r{...x, y: none}\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/record/#get-a-field-in-a-record","title":"Get a field in a record","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>type r {\n  x number\n}\n\nf = \\(x r) number {\n  x.x\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/record/#use-an-equal-operator","title":"Use an equal operator","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>type r {\n  x number\n}\n\nf = \\(x r, y r) boolean {\n  x == y\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/record/#use-a-not-equal-operator","title":"Use a not-equal operator","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>type r {\n  x number\n}\n\nf = \\(x r, y r) boolean {\n  x == y\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/record/#propagate-openness-of-a-record","title":"Propagate openness of a record","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>type Foo {\n  X number\n}</code></pre> <p>And a file named \"Bar.pen\" with:</p> <pre><code>import 'Foo\n\nBar = \\() Foo'Foo {\n  Foo'Foo{X: 42}\n}</code></pre> <p>And a file named \"Baz.pen\" with:</p> <pre><code>import 'Bar\n\nf = \\() number {\n  Bar'Bar().X\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/stream/","title":"List as stream","text":""},{"location":"examples/types/stream/#background","title":"Background","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"application\",\n  \"dependencies\": {\n    \"Os\": \"pen:///os\"\n  }\n}</code></pre> <p>And a file named \"Hello.pen\" with:</p> <pre><code>import Os'Context { Context }\nimport Os'File\n\nHello = \\(ctx Context) none {\n  _ = File'Write(ctx, File'StdOut(), \"hello\")\n\n  none\n}</code></pre>"},{"location":"examples/types/stream/#evaluate-an-element-lazily","title":"Evaluate an element lazily","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import 'Hello\n\nmain = \\(ctx context) none {\n  [none Hello'Hello(ctx.Os)]\n\n  none\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code></p> <p>And the stdout from \"./app\" should not contain \"hello\".</p>"},{"location":"examples/types/stream/#evaluate-an-element-lazily-but-only-once","title":"Evaluate an element lazily but only once","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Process\nimport 'Hello\n\nmain = \\(ctx context) none {\n  if [x, ...xs] = [none Hello'Hello(ctx.Os)] {\n    x()\n    x()\n\n    none\n  } else {\n    Process'Exit(ctx.Os, 1)\n  }\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code></p> <p>And the stdout from \"./app\" should contain exactly \"hello\".</p>"},{"location":"examples/types/stream/#evaluate-multiple-elements-lazily","title":"Evaluate multiple elements lazily","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\nimport 'Hello\n\nfoo = \\(ctx Context) [none] {\n  Hello'Hello(ctx)\n\n  [none]\n}\n\nmain = \\(ctx context) none {\n  [none ...foo(ctx.Os)]\n\n  none\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code></p> <p>And the stdout from \"./app\" should not contain \"hello\".</p>"},{"location":"examples/types/stream/#evaluate-multiple-elements-lazily-but-only-once","title":"Evaluate multiple elements lazily but only once","text":"<p>Given a file named \"main.pen\" with:</p> <pre><code>import Os'Context { Context }\nimport Os'Process\nimport 'Hello\n\nfoo = \\(ctx Context) [none] {\n  Hello'Hello(ctx)\n\n  [none]\n}\n\nmain = \\(ctx context) none {\n  xs = [none ...foo(ctx.Os)]\n\n  if [x, ...xs] = xs {\n    Process'Exit(ctx.Os, 1)\n  } else {\n    if [x, ...xs] = xs {\n      Process'Exit(ctx.Os, 1)\n    } else {\n      none\n    }\n  }\n}</code></pre> <p>When I successfully run <code>pen build</code></p> <p>Then I successfully run <code>./app</code></p> <p>And the stdout from \"./app\" should contain exactly \"hello\".</p>"},{"location":"examples/types/string/","title":"String","text":""},{"location":"examples/types/string/#background","title":"Background","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"library\",\n  \"dependencies\": {}\n}</code></pre>"},{"location":"examples/types/string/#use-a-string-literal","title":"Use a string literal","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\() string {\n  \"foo\"\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/string/#use-equality-operators","title":"Use equality operators","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\() boolean {\n  \"\" == \"\"\n}\n\ng = \\() boolean {\n  \"\" != \"\"\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/string/#concatenate-strings","title":"Concatenate strings","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\() string {\n  \"foo\" + \"bar\"\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/string/#concatenate-3-strings","title":"Concatenate 3 strings","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\() string {\n  \"foo\" + \"bar\" + \"baz\"\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/union/","title":"Union","text":""},{"location":"examples/types/union/#background","title":"Background","text":"<p>Given a file named \"pen.json\" with:</p> <pre><code>{\n  \"type\": \"library\",\n  \"dependencies\": {}\n}</code></pre>"},{"location":"examples/types/union/#upcast-a-number-into-a-union","title":"Upcast a number into a union","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\() number | none {\n  42\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/union/#upcast-a-function-into-a-union","title":"Upcast a function into a union","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\() (\\() number) | none {\n  \\() number {\n    42\n  }\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/union/#upcast-a-list-into-a-union","title":"Upcast a list into a union","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\() [number] | none {\n  [number 42]\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/union/#downcast-a-union-type","title":"Downcast a union type","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\(x number | none) number {\n  if x = x as number {\n    x\n  } else if none {\n    0\n  }\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/union/#downcast-a-union-type-with-an-else-block","title":"Downcast a union type with an else block","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\(x number | none) number {\n  if x = x as none {\n    0\n  } else {\n    x\n  }\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"examples/types/union/#downcast-a-union-type-to-another-union-type","title":"Downcast a union type to another union type","text":"<p>Given a file named \"Foo.pen\" with:</p> <pre><code>f = \\(x number | boolean | none) number | none {\n  if x = x as number | none {\n    x\n  } else {\n    none\n  }\n}</code></pre> <p>When I run <code>pen build</code></p> <p>Then the exit status should be 0.</p>"},{"location":"guides/building-an-executable/","title":"Building an executable","text":"<p>This page describes how to build an executable of a program written in Pen. It consists of the following steps:</p> <ol> <li>Create an application package.</li> <li>Build the package into an executable.</li> </ol>"},{"location":"guides/building-an-executable/#creating-an-application-package","title":"Creating an application package","text":"<p>Application packages are packages that are built into executables. To create it, you run a <code>pen create</code> command with your application's name (e.g. <code>foo</code>) in your terminal.</p> <pre><code>pen create foo</code></pre> <p>Then, you should see a <code>foo</code> directory in your current directory. When you go there, you should see a <code>main.pen</code> source file and a <code>pen.json</code> file for package configuration.</p> <p><code>main.pen</code>:</p> <pre><code>import Os'File\n\nmain = \\(ctx context) none {\n  _ = File'Write(ctx.Os, File'StdOut(), \"Hello, world!\\n\")\n\n  none\n}</code></pre> <p><code>pen.json</code>:</p> <pre><code>{\n  \"type\": \"application\",\n  \"dependencies\": {\n    \"Os\": \"pen:///os\"\n  }\n}</code></pre> <p>In this example, the <code>main.pen</code> file contains a program that outputs a text, \"Hello, world!\" in a terminal. And the <code>pen.json</code> configuration file defines a package type of <code>application</code> and its dependencies. Here, it has only a dependency of the <code>Os</code> system package.</p>"},{"location":"guides/building-an-executable/#building-a-package-into-an-executable","title":"Building a package into an executable","text":"<p>To build the package, you run a <code>pen build</code> command in the package's directory.</p> <pre><code>pen build</code></pre> <p>Then, you will see an executable file named <code>app</code> in the directory. Now, you can run it to see its output, \"Hello, world!\"</p> <pre><code>./app # -&gt; Hello, world!</code></pre>"},{"location":"guides/building-an-executable/#next-steps","title":"Next steps","text":"<ul> <li>Creating a library</li> <li>Using a library</li> <li>Language syntax</li> </ul>"},{"location":"guides/coding-style/","title":"Coding style","text":"<p>This page describes the common coding style of programs written in Pen.</p>"},{"location":"guides/coding-style/#spacing","title":"Spacing","text":"<p>Use 2 space characters for indentation.</p> <pre><code>Foo = \\(x number) number {\n  if x == 0 {\n    \"Succeeded!\"\n  } else {\n    \"Failed...\"\n  }\n}</code></pre>"},{"location":"guides/coding-style/#naming-convention","title":"Naming convention","text":"<p>Naming is important to keep codes consistent. The language currently has the following naming conventions.</p> Kind Case style Examples Variables Camel case <code>fooBar</code>, <code>FooBar</code>, <code>i</code>, <code>x</code> Functions Camel case <code>fooBar</code>, <code>FooBar</code>, <code>f</code>, <code>g</code> Types Camel case <code>fooBar</code>, <code>FooBar</code> Modules Camel case <code>fooBar</code>, <code>FooBar</code> Module directories Camel case <code>fooBar</code>, <code>FooBar</code> Packages Upper camel case <code>FooBar</code>"},{"location":"guides/coding-style/#global-and-local-names","title":"Global and local names","text":"<p>You should use descriptive names for global functions and types. But, on the other hand, you are encouraged to use abbreviated names for local variables as long as that doesn't incur ambiguity. For example, you might use the following abbreviated names:</p> <ul> <li><code>i</code> for <code>index</code></li> <li><code>c</code> for <code>requestCount</code></li> <li><code>sys</code> for <code>system</code></li> <li><code>ctx</code> for <code>context</code></li> </ul>"},{"location":"guides/coding-style/#acronyms","title":"Acronyms","text":"<p>Acronyms are treated as single words.</p> <ul> <li><code>Cpu</code></li> <li><code>Ast</code></li> </ul>"},{"location":"guides/concurrency-and-parallelism/","title":"Concurrency and parallelism","text":"<p>Concurrent programs use CPU time efficiently without being blocked on I/O or data synchronization. Parallel programs leverage multi-core CPUs to compute things in parallel faster than sequential programs.</p> <p>This page describes how to write concurrent and/or parallel programs in Pen.</p>"},{"location":"guides/concurrency-and-parallelism/#built-ins","title":"Built-ins","text":"<p>Pen provides several built-in functions for concurrent and parallel programming.</p>"},{"location":"guides/concurrency-and-parallelism/#go-function","title":"<code>go</code> function","text":"<p>The <code>go</code> built-in function runs a given function concurrently, and possibly in parallel.</p> <pre><code>future = go(\\() number {\n  computeExpensive(x, y, z)\n})</code></pre> <p>The <code>go</code> function returns a function of the same type as the given argument. The returned function returns a resulting value of the function execution. In other languages, such functions returning values computed concurrently when they are ready are also known as futures or promises.</p> <p>The <code>go</code> function may or may not run a given function immediately depending on its implementation. For example, the standard <code>Os</code> system package runs the given function in parallel if multiple CPU cores are available.</p>"},{"location":"guides/concurrency-and-parallelism/#race-function","title":"<code>race</code> function","text":"<p>The <code>race</code> built-in function takes multiple lists and merge them into one by evaluating elements in each list concurrently and possibly in parallel. The resulting list contains the elements in the original lists in order of their finished times of computation. Remember that elements in lists are evaluated lazily.</p> <pre><code>zs = race([[number] xs, ys])</code></pre> <p>This functionality is similar to concurrent queues in other imperative languages, such as channels in Go. Input lists to the <code>race</code> function correspond to producers of elements into the queue, and a consumer of the queue is codes that use elements in the output list.</p>"},{"location":"guides/concurrency-and-parallelism/#patterns","title":"Patterns","text":""},{"location":"guides/concurrency-and-parallelism/#task-parallelism","title":"Task parallelism","text":"<p>The <code>go</code> function can run different codes concurrently. For example, the following code runs the functions, <code>computeA</code> and <code>computeB</code> concurrently. Runtimes of applications might execute those functions even in parallel if their system packages allow that.</p> <pre><code>compute = \\(x number, y number) number {\n  z = go(\\() number { computeA(x) })\n  v = computeB(y)\n\n  v + z\n}</code></pre>"},{"location":"guides/concurrency-and-parallelism/#data-parallelism","title":"Data parallelism","text":"<p>To run the same computation against many values of the same type, you can use recursion and the <code>go</code> function.</p> <pre><code>computeMany = \\(xs [number]) [number] {\n  if [x, ...xs] = xs {\n    y = go(\\() number { foo(x()) })\n    ys = computeMany(xs)\n\n    [number y(), ...ys]\n  } else {\n    [number]\n  }\n}</code></pre> <p>The example above computes things in order of elements in the original list. However, you might want to see output values of concurrent computation in order of their finished times. By doing that, you can start using the output values as fast as possible without waiting for all computation to be completed. In this case, you can use the <code>race</code> function to reorder elements in the output list by their finished times.</p> <pre><code>compute = \\(xs [number]) [number] {\n  race([[number] [number x()] for x in computeMany(xs)])\n}</code></pre> <p>If you want to evaluate elements in multiple lists concurrently, you can simply pass the lists as an argument to the <code>race</code> function. Note that elements in the same lists are not evaluated concurrently although elements in different lists are evaluated concurrently.</p> <pre><code>compute = \\(xs [number], ys [number]) [number] {\n  race([[number] computeMany(xs), computeMany(ys)])\n}</code></pre>"},{"location":"guides/creating-a-library/","title":"Creating a library","text":"<p>This page describes how to create a library in Pen. It consists of the following steps:</p> <ol> <li>Create a library package.</li> <li>Publish the package.</li> </ol>"},{"location":"guides/creating-a-library/#creating-a-library-package","title":"Creating a library package","text":"<p>Library packages are packages imported and used by other packages. To create it, you run a <code>pen create --library</code> command with your library's name (e.g. <code>foo</code>) in your terminal.</p> <pre><code>pen create --library foo</code></pre> <p>Then, you should see a <code>foo</code> directory in your current directory. When you go there, you should see a <code>Foo.pen</code> source file and a <code>pen.json</code> file for package configuration.</p> <p><code>Foo.pen</code>:</p> <pre><code>Add = \\(x number, y number) number {\n  x + y\n}</code></pre> <p><code>pen.json</code>:</p> <pre><code>{\n  \"type\": \"library\",\n  \"dependencies\": {}\n}</code></pre> <p>In this example, the <code>Foo.pen</code> file contains an <code>Add</code> function that adds two numbers. And the <code>pen.json</code> configuration file defines a package type of <code>library</code> and its dependencies of none.</p>"},{"location":"guides/creating-a-library/#publishing-a-package","title":"Publishing a package","text":"<p>The easiest way to publish your library package is to push the package as a Git repository onto one of Git repository hosting services, such as GitHub.</p> <pre><code>git add .\ngit commit\ngit remote add origin ssh://git@github.com/your-name/foo\ngit push</code></pre> <p>Now, your package is ready for use by other packages!</p>"},{"location":"guides/creating-a-library/#next-steps","title":"Next steps","text":"<ul> <li>Building an executable</li> <li>Using a library</li> <li>Language syntax</li> </ul>"},{"location":"guides/testing/","title":"Testing","text":"<p>This page describes how to write and run unit tests for programs written in Pen.</p> <p>Testing codes consists of the following steps:</p> <ol> <li>Write tests as test functions in test modules.</li> <li>Run the tests with a <code>pen test</code> command.</li> </ol>"},{"location":"guides/testing/#writing-tests","title":"Writing tests","text":"<p>You can write tests as test functions in test modules. All modules with the <code>.test.pen</code> file extension are test modules. And, all public functions in test modules are test functions. The test functions need to have a type of <code>\\() none | error</code> and should return <code>error</code> values when they fail.</p> <p>For example, to test a <code>Foo</code> function in a <code>Foo.pen</code> module, write a <code>Foo.test.pen</code> test module with the following contents.</p> <pre><code>import Test'Assert\nimport 'Foo\n\nCheckFoo = \\() none | error {\n  Assert'Equal(Foo'Foo(), 42)\n}</code></pre>"},{"location":"guides/testing/#the-test-package","title":"The <code>Test</code> package","text":"<p>The <code>Test</code> standard package includes some utilities which helps you to write tests.</p>"},{"location":"guides/testing/#running-tests","title":"Running tests","text":"<p>To run tests, you can run a <code>pen test</code> command in your package's directory. Then, you should see test results of test functions in test modules. The <code>pen test</code> command exits with a non-zero status code if some tests fail.</p>"},{"location":"guides/using-a-library/","title":"Using a library","text":"<p>This page describes how to use a library in Pen. It consists of the following steps:</p> <ol> <li>Add a library package as a dependency in another package.</li> <li>Import functions and types from the library package.</li> </ol>"},{"location":"guides/using-a-library/#modifying-package-configuration","title":"Modifying package configuration","text":"<p>To use a library package, you need to add the package as a dependency in another package. To add the dependency, you modify a <code>pen.json</code> configuration file in the package adding the library package's name (e.g. <code>Foo</code>) and URL (e.g. <code>git://github.com/your-name/foo</code>) in a <code>dependencies</code> field like the following example. Note that you need to specify a <code>git</code> protocol scheme for library packages published as Git repositories. For other kinds of library packages, see Package configuration.</p> <pre><code>{\n  \"type\": \"application\", // This can be any type.\n  \"dependencies\": {\n    \"Foo\": \"git://github.com/your-name/foo\"\n  }\n}</code></pre>"},{"location":"guides/using-a-library/#importing-functions-and-types-from-a-library-package","title":"Importing functions and types from a library package","text":"<p>To import functions and types from the library package, you use <code>import</code> statements in a source file of your module with a name of the library package (e.g. <code>Foo</code>) and a module name (e.g. <code>Math</code>) where functions or types you want to use are defined.</p> <pre><code>import Foo'Math</code></pre> <p>Then, you are ready to use those functions and types with a prefix of the module name! For example, to call a function named <code>Add</code> in the <code>Math</code> module, you can write <code>Math'Add(x, y)</code>.</p> <pre><code>type MyType = Math'Order\n\nMyFunction = \\(x number, y number) number {\n  Math'Add(x, y)\n}</code></pre>"},{"location":"guides/using-a-library/#next-steps","title":"Next steps","text":"<ul> <li>Building an executable</li> <li>Creating a library</li> <li>Language syntax<ul> <li>Import statement</li> </ul> </li> </ul>"},{"location":"introduction/building-the-first-program/","title":"Building the first program","text":""},{"location":"introduction/building-the-first-program/#creating-a-package","title":"Creating a package","text":"<p>To create your first package, run a <code>pen create</code> command with your package's name in your terminal.</p> <pre><code>pen create foo</code></pre> <p>Then, you should see a directory named <code>foo</code> in your current directory. When you go into the directory, you should see a <code>main.pen</code> source file and a <code>pen.json</code> file for package configuration.</p>"},{"location":"introduction/building-the-first-program/#building-a-package","title":"Building a package","text":"<p>To build the package, run a <code>pen build</code> command in the <code>foo</code> directory.</p> <pre><code>pen build</code></pre> <p>Then, you will see an executable file named <code>app</code> in the directory. Run it to see your first \"Hello, world!\"</p> <pre><code>./app # -&gt; Hello, world!</code></pre> <p>Now, you can start editing source files and build your own application in Pen!</p>"},{"location":"introduction/building-the-first-program/#next-steps","title":"Next steps","text":"<ul> <li>To use other library packages, see Using a library.</li> <li>For more code examples, see Examples.</li> <li>For the language syntax, see Syntax and Types.</li> <li>For usage of the standard packages, see Standard packages.</li> <li>To add more modules in your package, see Modules.</li> </ul>"},{"location":"introduction/install/","title":"Install","text":""},{"location":"introduction/install/#via-homebrew","title":"Via Homebrew","text":"<p>On Linux, macOS and WSL, you can install Pen through Homebrew.</p> <ol> <li>Install Homebrew.</li> <li>Run the following command in your terminal.<pre><code>brew install pen-lang/pen/pen</code></pre> </li> </ol> <p>Now, you should be able to run a <code>pen</code> command in your shell.</p> <pre><code>pen --version</code></pre>"},{"location":"introduction/install/#building-from-source","title":"Building from source","text":"<p>You can also build Pen from source on your local machine.</p> <ol> <li> <p>Install the following software using a package manager of your choice (e.g. <code>apt</code> for Ubuntu and Homebrew for macOS.)</p> <ul> <li>Rust</li> <li>LLVM 15</li> <li>Git</li> <li>Ninja</li> </ul> </li> <li> <p>Clone the Git repository.</p> <pre><code>git clone https://github.com/pen-lang/pen</code></pre> </li> <li> <p>Run a <code>cargo</code> command in the repository's directory.</p> <pre><code>cargo install --path cmd/pen</code></pre> </li> <li> <p>Set a <code>PEN_ROOT</code> environment variable to the directory.</p> <pre><code>export PEN_ROOT=&lt;directory&gt;</code></pre> </li> </ol> <p>Now, you are ready to use the <code>pen</code> command built manually.</p>"},{"location":"references/command-line-tools/","title":"Command line tools","text":"<p>The <code>pen</code> command has the following sub-commands.</p> <p>For more information, see its help message by running <code>pen --help</code>.</p>"},{"location":"references/command-line-tools/#build-command","title":"<code>build</code> command","text":"<p>It builds a package in the current directory.</p> <pre><code>pen build</code></pre>"},{"location":"references/command-line-tools/#create-command","title":"<code>create</code> command","text":"<p>It creates a package of a given kind in a specified directory.</p>"},{"location":"references/command-line-tools/#creating-an-application-package","title":"Creating an application package","text":"<pre><code>pen create foo</code></pre>"},{"location":"references/command-line-tools/#creating-a-library-package","title":"Creating a library package","text":"<pre><code>pen create --library foo</code></pre>"},{"location":"references/command-line-tools/#test-command","title":"<code>test</code> command","text":"<p>It runs test modules in a package. See also Testing.</p> <pre><code>pen test</code></pre>"},{"location":"references/command-line-tools/#format-command","title":"<code>format</code> command","text":"<p>It formats all module files in a package.</p> <pre><code>pen format</code></pre>"},{"location":"references/command-line-tools/#document-command","title":"<code>document</code> command","text":"<p>It generates a documentation file of a package and emits it to stdout.</p> <pre><code>pen document \\\n  --name Foo \\\n  --description \"A package to provide Foo\" \\\n  --url git://github.com/foo/foo</code></pre>"},{"location":"references/language/built-ins/","title":"Built-ins","text":"<p>Built-in types and functions are ones implicitly defined in every module.</p>"},{"location":"references/language/built-ins/#types","title":"Types","text":"<p>See Types.</p>"},{"location":"references/language/built-ins/#functions","title":"Functions","text":""},{"location":"references/language/built-ins/#size","title":"<code>size</code>","text":"<p>It calculates a size of a list or map. It is generic and you can apply it to any list and map types.</p> <p>Its time complexity is O(n) for lists and O(1) for maps.</p> <pre><code>\\(list [a]) number\n\\(map {k: v}) number</code></pre>"},{"location":"references/language/built-ins/#delete","title":"<code>delete</code>","text":"<p>It deletes a key from a map.</p> <pre><code>\\(map {k: v}, key k) {k: v}</code></pre>"},{"location":"references/language/built-ins/#keys","title":"<code>keys</code>","text":"<p>It gets keys in a map.</p> <pre><code>\\(map {k: v}) [k]</code></pre>"},{"location":"references/language/built-ins/#values","title":"<code>values</code>","text":"<p>It gets values in a map.</p> <pre><code>\\(map {k: v}) [v]</code></pre>"},{"location":"references/language/built-ins/#error","title":"<code>error</code>","text":"<p>It creates an error with its source information.</p> <pre><code>\\(x any) error</code></pre>"},{"location":"references/language/built-ins/#source","title":"<code>source</code>","text":"<p>It extracts source information from an error.</p> <pre><code>\\(e error) any</code></pre>"},{"location":"references/language/built-ins/#debug","title":"<code>debug</code>","text":"<p>It pretty-prints a given value.</p> <p>Note that behavior of this function can change among system packages. You may not even see any messages with system packages whose systems do not have any consoles.</p> <pre><code>\\(x any) none</code></pre>"},{"location":"references/language/built-ins/#go","title":"<code>go</code>","text":"<p>It executes a function concurrently. Its return value is a future represented as a function that returns a result of the executed function.</p> <pre><code>\\(\\() a) \\() a</code></pre>"},{"location":"references/language/built-ins/#race","title":"<code>race</code>","text":"<p>It merges multiple lists into one by evaluating elements in the lists concurrently. Elements in each list are evaluated sequentially in order.</p> <p>This function corresponds to the fan-in concurrency pattern in other languages where results of concurrent computation in multiple queues are merged into a queue.</p> <pre><code>\\([[a]]) [a]</code></pre>"},{"location":"references/language/modules/","title":"Modules","text":"<p>Modules are sets of functions and types. Using modules, you can split large programs into smaller chunks.</p> <p>Each source file suffixed with a <code>.pen</code> file extension composes a module. Modules can import functions and types from other modules.</p>"},{"location":"references/language/modules/#exporting-functions-and-types-from-modules","title":"Exporting functions and types from modules","text":"<p>You can name functions and types in an upper camel case for them to be accessible from other modules.</p> <pre><code>type Foo {\n  ...\n}\n\ntype Bar = ...\n\nFoo = \\() number {\n  ...\n}</code></pre>"},{"location":"references/language/modules/#importing-functions-and-types-from-modules","title":"Importing functions and types from modules","text":"<p>In order to import functions and types from other modules, place import statements at the top of modules.</p> <p>The first components in the statements are names of external packages you declare in package configuration files (<code>Foo</code>.) They are omitted if imported modules are in the same packages. The rest of the components are directory names where the modules exist (<code>Bar</code>) and the modules' filenames without their file extensions (<code>Baz</code> for <code>Baz.pen</code>.)</p> <pre><code>import Foo'Bar'Baz</code></pre> <p>Then, you can access exported members of the modules with their prefixes.</p> <pre><code>type foo = Baz'Type\n\nbar = \\(x number) number {\n  Baz'Function(x)\n}</code></pre>"},{"location":"references/language/modules/#module-names","title":"Module names","text":""},{"location":"references/language/modules/#modules-in-the-same-package","title":"Modules in the same package","text":"<p>Modules in the same package are referenced by their paths relative to a root directory of the package.</p> <p>For example, a module of a file at <code>&lt;package directory&gt;/Foo/Bar.pen</code> is imported as below.</p> <pre><code>import 'Foo'Bar</code></pre>"},{"location":"references/language/modules/#modules-in-other-packages","title":"Modules in other packages","text":"<p>Modules in other packages are referenced by their package names defined in package configuration files and module paths.</p> <p>For example, a module of a file at <code>&lt;package directory&gt;/Bar/Baz.pen</code> in a package <code>Foo</code> is imported as below.</p> <pre><code>import Foo'Bar'Baz</code></pre>"},{"location":"references/language/modules/#private-modules","title":"Private modules","text":"<p>For modules to be private and not accessible from other packages, you can name them in lower camel case (e.g. <code>fooBar</code>.)</p>"},{"location":"references/language/modules/#custom-prefixes","title":"Custom prefixes","text":"<p>Imported modules can have custom prefixes given different names after the <code>as</code> keywords.</p> <pre><code>import Foo'Bar'Baz as Blah</code></pre>"},{"location":"references/language/modules/#unqualified-import","title":"Unqualified import","text":"<p>You can import functions and types without prefixes by putting their names between <code>{</code> and <code>}</code> in import statements. This is especially useful when module names and imported functions or types have the same names like <code>import 'MyType { MyType }</code>.</p> <pre><code>import Foo'Bar { Foo, Bar }\n\ntype Baz {\n  foo Foo\n}\n\nBlah = \\() number {\n  Bar()\n}</code></pre>"},{"location":"references/language/packages/","title":"Packages","text":"<p>Packages are sets of modules. Like modules, packages can import other packages specifying them in their configurations.</p>"},{"location":"references/language/packages/#what-composes-a-package","title":"What composes a package?","text":"<p>The following entities compose packages.</p> <ul> <li>Standard packages bundled in installation of the language</li> <li>Remote repositories managed by version control systems (VCS)<ul> <li>Currently, Pen supports only Git as a VCS.</li> </ul> </li> <li>Directories with package configuration files on file systems</li> </ul> <p>During builds of packages, Pen's build system automatically download and initialize their dependency packages based on their URLs.</p>"},{"location":"references/language/packages/#package-types","title":"Package types","text":"<p>There are 3 package types: application, library, and system. Those types are specified in package configuration files.</p>"},{"location":"references/language/packages/#application-packages","title":"Application packages","text":"<p>Application packages build applications often as executable files. Every application package must have a <code>main.pen</code> module file at its top directory. The main module has a <code>main</code> function that receives an argument of a <code>context</code> type and returns a <code>none</code> type. The <code>context</code> type is a record type containing context values of system packages with their field names of package names. For example, given system packages named <code>Http</code> and <code>Os</code>, a main function looks like the following.</p> <pre><code>main = \\(ctx context) none {\n  s = fetch(ctx.Http, \"https://pen-lang.org/\")\n  print(ctx.Os, s)\n\n  none\n}</code></pre> <p>Every application package must specify one and only one system package that links applications (e.g. the <code>Os</code> standard system package) in its package configuration file. However, application packages can specify system packages that do not link applications (e.g. the <code>Http</code> system package in the example above) as many as possible.</p>"},{"location":"references/language/packages/#library-packages","title":"Library packages","text":"<p>Library packages contain functions and types that have no side effects. They are imported and used by other packages.</p>"},{"location":"references/language/packages/#system-packages","title":"System packages","text":"<p>System packages contain functions and types that have side effects to provide system interfaces to application packages. The language currently provides the two standard system packages of <code>Os</code> and <code>OsSync</code>.</p> <p>Although they can be imported by library packages as well as application packages, then they are expected not to cause any side effects.</p> <p>If you want to write your own system packages, see Writing system packages.</p>"},{"location":"references/language/packages/#package-configuration","title":"Package configuration","text":"<p>Each package has its configuration file named <code>pen.json</code> in a JSON format at its top directory. The JSON file has the following fields.</p> Name Required Description <code>type</code> Yes Package type (either <code>application</code>, <code>library</code>, or <code>system</code>) <code>dependencies</code> Yes Map of package names to their URLs <p>Package URLs have different protocol schemes depending on where they are located.</p> <ul> <li>Standard packages: <code>pen</code></li> <li>Git repositories: <code>git</code></li> <li>Directories on file systems: none</li> </ul>"},{"location":"references/language/packages/#examples","title":"Examples","text":""},{"location":"references/language/packages/#application","title":"Application","text":"<pre><code>{\n  \"type\": \"application\",\n  \"dependencies\": {\n    \"Os\": \"pen:///os\",\n    \"Core\": \"pen:///core\",\n    \"Foo\": \"git://github.com/foo/foo\",\n    \"Bar\": \"../bar\"\n  }\n}</code></pre>"},{"location":"references/language/packages/#library","title":"Library","text":"<pre><code>{\n  \"type\": \"library\",\n  \"dependencies\": {\n    \"Core\": \"pen:///core\",\n    \"Foo\": \"git://github.com/foo/foo\",\n    \"Bar\": \"../bar\"\n  }\n}</code></pre>"},{"location":"references/language/packages/#system","title":"System","text":"<pre><code>{\n  \"type\": \"system\",\n  \"dependencies\": {\n    \"Core\": \"pen:///core\",\n    \"Foo\": \"git://github.com/foo/foo\",\n    \"Bar\": \"../bar\"\n  }\n}</code></pre>"},{"location":"references/language/syntax/","title":"Syntax","text":"<p>This page describes syntax of Pen. You can compose programs building up those language constructs. See also Types about syntax for specific data types.</p>"},{"location":"references/language/syntax/#module","title":"Module","text":"<p>Modules are sets of type and function definitions. Syntactically, a module consists of statements. See Modules about how modules themselves interact with each other.</p>"},{"location":"references/language/syntax/#statements","title":"Statements","text":"<p>Statements are constructs that declare functions and types in modules.</p>"},{"location":"references/language/syntax/#import-statement","title":"Import statement","text":"<p>It imports types and functions from another module from the same or another package.</p> <p>See Modules for more details.</p> <pre><code>import Foo'Bar</code></pre>"},{"location":"references/language/syntax/#foreign-import-statement","title":"Foreign import statement","text":"<p>It imports a function from a foreign language.</p> <p>See Foreign Function Interface (FFI) for more details.</p> <pre><code>import foreign \"c\" foo \\(number, number) number</code></pre>"},{"location":"references/language/syntax/#record-type-definition","title":"Record type definition","text":"<p>It defines a record type.</p> <p>See Records for more details.</p> <pre><code>type foo {\n  bar number\n  baz string\n}</code></pre>"},{"location":"references/language/syntax/#type-alias","title":"Type alias","text":"<p>It gives another name to a type.</p> <pre><code>type foo = number | none</code></pre>"},{"location":"references/language/syntax/#function-definition","title":"Function definition","text":"<p>It defines a function with a given name. The right-hand side of <code>=</code> signs must be function expressions.</p> <pre><code>foo = \\(x number, y number) number {\n  x + y\n}</code></pre>"},{"location":"references/language/syntax/#foreign-function-definition","title":"Foreign function definition","text":"<p>It defines a function exported to foreign languages.</p> <p>See Foreign Function Interface (FFI) for more details.</p> <pre><code>foreign \"c\" foo = \\(x number, y number) number {\n  x + y\n}</code></pre>"},{"location":"references/language/syntax/#block","title":"Block","text":"<p>A block consists of 1 or more expressions wrapped in <code>{</code> and <code>}</code>. Values of the last expressions are treated as resulting values of the blocks.</p> <pre><code>{\n  foo(ctx, z)\n\n  x + y + z\n}</code></pre> <p>If you want to keep values of intermediate expressions for later use, you can define variables putting their names and <code>=</code> operators in front of the expressions.</p> <pre><code>{\n  x = 42\n\n  ...\n}</code></pre>"},{"location":"references/language/syntax/#expressions","title":"Expressions","text":"<p>Expressions represent some computation. Expressions can be nested; expressions often contain other expressions inside.</p>"},{"location":"references/language/syntax/#function-call","title":"Function call","text":"<p>It calls a function to evaluate it with given arguments returning its result value.</p> <pre><code>f(x, y)</code></pre>"},{"location":"references/language/syntax/#operators","title":"Operators","text":""},{"location":"references/language/syntax/#arithmetic","title":"Arithmetic","text":"<p>Arithmetic operators add, subtract, multiply, or divide a number with another.</p> <pre><code>1 + 1\n1 - 1\n1 * 1\n1 / 1</code></pre>"},{"location":"references/language/syntax/#comparison","title":"Comparison","text":""},{"location":"references/language/syntax/#equality","title":"Equality","text":"<p>Equal (<code>==</code>) and not-equal (<code>!=</code>) operators compare two values and return a boolean value indicating if they are equal or not.</p> <pre><code>1 == 1\n1 != 1</code></pre> <p>The operators can compare any types except functions and types containing them.</p> <pre><code>\"foo\" == \"bar\"\nfoo{x: 0} == foo{x: 1}\n42 != none</code></pre>"},{"location":"references/language/syntax/#ordering","title":"Ordering","text":"<p>Order operators compare two numbers and return a boolean value indicating if the condition is correct or not.</p> <pre><code>1 &lt; 1\n1 &lt;= 1\n1 &gt; 1\n1 &gt;= 1</code></pre>"},{"location":"references/language/syntax/#boolean","title":"Boolean","text":"<p>A not operator flips a boolean value.</p> <pre><code>!true</code></pre> <p>An and operator returns <code>true</code> if both operands are <code>true</code>, or <code>false</code> otherwise.</p> <pre><code>true &amp; false</code></pre> <p>An or operator returns <code>true</code> if either operand is <code>true</code>, or <code>false</code> otherwise.</p> <pre><code>true | false</code></pre>"},{"location":"references/language/syntax/#error-handling","title":"Error handling","text":"<p><code>?</code> suffix operators immediately exit the current functions with operands if they are of the <code>error</code> type. Both the operands and result values of functions where the operators are used must be a union type containing the <code>error</code> type.</p> <pre><code>x?</code></pre>"},{"location":"references/language/syntax/#function","title":"Function","text":"<p>It creates a function.</p> <p>First, functions declare their argument names and types (<code>x number</code> and <code>y number</code>) and their result types (<code>number</code>). After that, function bodies of blocks describe how the functions compute result values.</p> <pre><code>\\(x number, y number) number {\n  x + y\n}</code></pre>"},{"location":"references/language/syntax/#conditionals","title":"Conditionals","text":""},{"location":"references/language/syntax/#if-expression","title":"If expression","text":"<p>It evaluates one of blocks depending on a condition of an expression of a boolean type.</p> <ul> <li>It evaluates the first block if a given boolean value is <code>true</code>.</li> <li>Otherwise, it evaluates the second block.</li> </ul> <pre><code>if x {\n  ...\n} else {\n  ...\n}</code></pre>"},{"location":"references/language/syntax/#if-type-expression","title":"If-type expression","text":"<p>It evaluates one of blocks depending on the type of a given expression. The expression (<code>foo()</code>) needs to be bound to a variable (<code>x</code>) and, in each block, the variable is treated as its specified type.</p> <pre><code>if x = foo() as number {\n  ...\n} else if string | none {\n  ...\n} else {\n  ...\n}</code></pre>"},{"location":"references/language/syntax/#if-list-expression","title":"If-list expression","text":"<p>It deconstructs a list and evaluates one of two blocks depending on if the list is empty or not.</p> <ul> <li>If a given list has 1 or more element, it evaluates the first block with a function that returns its first element (<code>x</code>) and rest of elements as a list (<code>xs</code>).</li> <li>If the list has no element, it evaluates the second block.</li> </ul> <pre><code>if [x, ...xs] = ... {\n  ...\n} else {\n  ...\n}</code></pre>"},{"location":"references/language/syntax/#if-map-expression","title":"If-map expression","text":"<p>It gets a value for a key in a map and evaluates one of two blocks depending on if the map has the key or not.</p> <ul> <li>If a value for a key (<code>key</code>) is found, it evaluates the first block with the value (<code>value</code>).</li> <li>If the map has no such key, it evaluates the second block.</li> </ul> <pre><code>if value = xs[key] {\n  ...\n} else {\n  ...\n}</code></pre>"},{"location":"references/language/syntax/#loop","title":"Loop","text":""},{"location":"references/language/syntax/#list-comprehension","title":"List comprehension","text":"<p>It iterates a list and creates another list with elements computed by a given expression.</p> <pre><code>[number f(x()) for x in xs]</code></pre> <p>Multiple <code>for</code> clauses iterate multiple lists considering all combinations of their elements.</p> <pre><code>[number f(y())\n  for y in x()\n  for x in xs\n]</code></pre> <p>Multiple lists in a <code>for</code> clause iterate them at once.</p> <pre><code>[number f(x(), y()) for x, y in xs, ys]</code></pre> <p>You can use <code>if</code> clauses to filter elements.</p> <pre><code>[number f(x()) for x in xs if g(x())]</code></pre>"},{"location":"references/language/syntax/#comment","title":"Comment","text":"<p>Comments start with <code>#</code> and end with new-line characters.</p> <pre><code># This is a comment.</code></pre>"},{"location":"references/language/types/","title":"Types","text":"<p>This page describes different data types in Pen.</p>"},{"location":"references/language/types/#number","title":"Number","text":"<p>It represents a real number. It is implemented as a 64-bit floating point number of IEEE 754.</p> <pre><code>number</code></pre>"},{"location":"references/language/types/#literals","title":"Literals","text":"<pre><code>3.14\n-42</code></pre>"},{"location":"references/language/types/#boolean","title":"Boolean","text":"<p>It is a boolean value of <code>true</code> or <code>false</code>.</p> <pre><code>boolean</code></pre>"},{"location":"references/language/types/#literals_1","title":"Literals","text":"<pre><code>true\nfalse</code></pre>"},{"location":"references/language/types/#none","title":"None","text":"<p>It represents a missing value. It has only a single value of <code>none</code>.</p> <pre><code>none</code></pre>"},{"location":"references/language/types/#literals_2","title":"Literals","text":"<pre><code>none</code></pre>"},{"location":"references/language/types/#string","title":"String","text":"<p>It is a byte array.</p> <pre><code>string</code></pre>"},{"location":"references/language/types/#literals_3","title":"Literals","text":"<p>String literals are sequences of bytes. They are often used to represent texts encoded in UTF-8.</p> <pre><code>\"foo\"</code></pre>"},{"location":"references/language/types/#escape-sequences","title":"Escape sequences","text":"<p>String literals can contain the following escape sequences.</p> Escape sequence Name <code>\\n</code> New line <code>\\r</code> Carriage return <code>\\t</code> Tab <code>\\\"</code> Double quote <code>\\\\</code> Backslash <code>\\x9f</code> Byte"},{"location":"references/language/types/#functions","title":"Functions","text":"<p>A function represents reusable computation with arguments and a result.</p> <p>Functions represent not only pure computation but may also execute side effects, such as I/O.</p> <pre><code>\\(number, number) number</code></pre>"},{"location":"references/language/types/#literals_4","title":"Literals","text":"<pre><code>\\(x number, y number) number {\n  x + y\n}</code></pre>"},{"location":"references/language/types/#lists","title":"Lists","text":"<p>It is a list of values. Its type contains an element type between <code>[</code> and <code>]</code>.</p> <pre><code>[number]</code></pre>"},{"location":"references/language/types/#literals_5","title":"Literals","text":"<p>A list literal contains its element type and elements as expressions.</p> <pre><code>[number]\n[number 1]\n[number 1, 2, 3]</code></pre> <p>You can create new lists from existing ones by spreading elements of the old ones prefixed by <code>...</code> into the new ones.</p> <pre><code>[number x, ...xs]</code></pre> <p>Note that expressions within list literals are evaluated lazily; they are evaluated only if their values are required.</p>"},{"location":"references/language/types/#maps","title":"Maps","text":"<p>It is a map from keys to values. Its type contains key and value types between <code>{</code> and <code>}</code> separated by <code>:</code>.</p> <pre><code>{string: number}</code></pre>"},{"location":"references/language/types/#literals_6","title":"Literals","text":"<p>A map literal contains its key and value types and key-value pairs as expressions.</p> <pre><code>{string: number}\n{string: number \"foo\": 1}\n{string: number \"foo\": 1, \"bar\": 2}</code></pre> <p>You can create new maps from existing ones by spreading entries of the old ones prefixed by <code>...</code> into the new ones.</p> <pre><code>{string: number ...map, \"foo\": 1}</code></pre>"},{"location":"references/language/types/#records","title":"Records","text":"<p>It combines multiple types into a single type. Each field of a record type is composed of its name and type.</p> <p>Fields are not accessible outside modules where they are defined by default.</p> <pre><code>type person {\n  name string\n  age number\n}</code></pre> <p>To expose fields as well as the type itself to other modules, you need to capitalize their names.</p> <pre><code>type Person {\n  Name string\n  Age number\n}</code></pre>"},{"location":"references/language/types/#literals_7","title":"Literals","text":"<p>Record values are constructed using record literals containing their field names and values separated by commas.</p> <pre><code>person{name: \"foo\", age: 42}</code></pre> <p>You can also create new records from existing ones spreading fields of the old ones into the new ones.</p> <pre><code>person{...one, name: \"bar\"}</code></pre> <p>You can access field values by appending their names with <code>.</code> prefixes to expressions of record types.</p> <pre><code>john.name</code></pre>"},{"location":"references/language/types/#unions","title":"Unions","text":"<p>It is a union of multiple types.</p> <p>For example, the type below represents values that can be either <code>number</code> or <code>none</code>.</p> <pre><code>number | none</code></pre>"},{"location":"references/language/types/#any","title":"Any","text":"<p>Literally, it's an any type. Any values can be converted to the type.</p> <pre><code>any</code></pre>"},{"location":"references/language/types/#error","title":"Error","text":"<p>It is an error. You can create error values by calling the <code>error</code> built-in function. See also Error handling.</p> <pre><code>error</code></pre>"},{"location":"references/standard-packages/core/","title":"<code>Core</code> package","text":"<p>This package provides common algorithms and data structures.</p> <pre><code>{\n  \"type\": \"library\"\n}</code></pre>"},{"location":"references/standard-packages/core/#install","title":"Install","text":"<pre><code>{\n  \"dependencies\": {\n    \"Core\": \"pen:///core\"\n  } \n}</code></pre>"},{"location":"references/standard-packages/core/#corebit-module","title":"<code>Core'Bit</code> module","text":"<p>This module provides bitwise operations.</p> <p>Most functions defined in this module take arguments of 64-bit integers. They can be converted from and into integers represented in IEEE-754 of a <code>number</code> type.</p>"},{"location":"references/standard-packages/core/#types","title":"Types","text":"<p>No types are defined.</p>"},{"location":"references/standard-packages/core/#functions","title":"Functions","text":""},{"location":"references/standard-packages/core/#and","title":"<code>And</code>","text":"<p>Calculate bitwise \"and\" given two 64-bit integers.</p> <pre><code>\\(x number, y number) number</code></pre>"},{"location":"references/standard-packages/core/#or","title":"<code>Or</code>","text":"<p>Calculate bitwise \"or\" given two 64-bit integers.</p> <pre><code>\\(x number, y number) number</code></pre>"},{"location":"references/standard-packages/core/#xor","title":"<code>Xor</code>","text":"<p>Calculate bitwise exclusive-\"or\" given two 64-bit integers.</p> <pre><code>\\(x number, y number) number</code></pre>"},{"location":"references/standard-packages/core/#not","title":"<code>Not</code>","text":"<p>Calculate bitwise \"not\" given two 64-bit integers.</p> <pre><code>\\(x number) number</code></pre>"},{"location":"references/standard-packages/core/#leftshift","title":"<code>LeftShift</code>","text":"<p>Calculate unsigned left shift given a 64-bit integer.</p> <pre><code>\\(x number, n number) number</code></pre>"},{"location":"references/standard-packages/core/#rightshift","title":"<code>RightShift</code>","text":"<p>Calculate unsigned right shift given a 64-bit integer.</p> <pre><code>\\(x number, n number) number</code></pre>"},{"location":"references/standard-packages/core/#tointeger64","title":"<code>ToInteger64</code>","text":"<p>Convert an integer in IEEE-754 to a 64-bit integer.</p> <pre><code>\\(x number) number</code></pre>"},{"location":"references/standard-packages/core/#frominteger64","title":"<code>FromInteger64</code>","text":"<p>Convert a 64-bit integer to an integer in IEEE-754.</p> <pre><code>\\(x number) number</code></pre>"},{"location":"references/standard-packages/core/#coreboolean-module","title":"<code>Core'Boolean</code> module","text":"<p>This module provides common boolean operations.</p>"},{"location":"references/standard-packages/core/#types_1","title":"Types","text":"<p>No types are defined.</p>"},{"location":"references/standard-packages/core/#functions_1","title":"Functions","text":""},{"location":"references/standard-packages/core/#any","title":"<code>Any</code>","text":"<p>Return true if any of given booleans are true or false otherwise.</p> <pre><code>\\(bs [boolean]) boolean</code></pre>"},{"location":"references/standard-packages/core/#all","title":"<code>All</code>","text":"<p>Return true if all of given booleans are true or false otherwise.</p> <pre><code>\\(bs [boolean]) boolean</code></pre>"},{"location":"references/standard-packages/core/#corecharacter-module","title":"<code>Core'Character</code> module","text":""},{"location":"references/standard-packages/core/#types_2","title":"Types","text":"<p>No types are defined.</p>"},{"location":"references/standard-packages/core/#functions_2","title":"Functions","text":""},{"location":"references/standard-packages/core/#fromcodepoint","title":"<code>FromCodePoint</code>","text":"<pre><code>\\(n number) string</code></pre>"},{"location":"references/standard-packages/core/#tocodepoint","title":"<code>ToCodePoint</code>","text":"<pre><code>\\(s string) number</code></pre>"},{"location":"references/standard-packages/core/#corelist-module","title":"<code>Core'List</code> module","text":"<p>This module provides common list operations.</p>"},{"location":"references/standard-packages/core/#types_3","title":"Types","text":"<p>No types are defined.</p>"},{"location":"references/standard-packages/core/#functions_3","title":"Functions","text":""},{"location":"references/standard-packages/core/#first","title":"<code>First</code>","text":"<p>Get the first element in a list. If a list is empty, it returns a fallback value.</p> <pre><code>\\(xs [any], fallback any) any</code></pre>"},{"location":"references/standard-packages/core/#last","title":"<code>Last</code>","text":"<p>Get the last element in a list. If a list is empty, it returns a fallback value.</p> <pre><code>\\(xs [any], fallback any) any</code></pre>"},{"location":"references/standard-packages/core/#tonumbers","title":"<code>ToNumbers</code>","text":"<p>Convert a list of an <code>any</code> type to one of a <code>number</code> type skipping non-<code>number</code> types.</p> <pre><code>\\(xs [any]) [number]</code></pre>"},{"location":"references/standard-packages/core/#tostrings","title":"<code>ToStrings</code>","text":"<p>Convert a list of an <code>any</code> type to one of a <code>string</code> type skipping non-<code>string</code> types.</p> <pre><code>\\(xs [any]) [string]</code></pre>"},{"location":"references/standard-packages/core/#tobooleans","title":"<code>ToBooleans</code>","text":"<p>Convert a list of an <code>any</code> type to one of a <code>boolean</code> type skipping non-<code>boolean</code> types.</p> <pre><code>\\(xs [any]) [boolean]</code></pre>"},{"location":"references/standard-packages/core/#corenumber-module","title":"<code>Core'Number</code> module","text":"<p>This module provides common number operations.</p>"},{"location":"references/standard-packages/core/#types_4","title":"Types","text":"<p>No types are defined.</p>"},{"location":"references/standard-packages/core/#functions_4","title":"Functions","text":""},{"location":"references/standard-packages/core/#absolute","title":"<code>Absolute</code>","text":"<p>Calculate an absolute value.</p> <pre><code>\\(x number) number</code></pre>"},{"location":"references/standard-packages/core/#ceil","title":"<code>Ceil</code>","text":"<p>Calculate a ceil value.</p> <pre><code>\\(x number) number</code></pre>"},{"location":"references/standard-packages/core/#epsilon","title":"<code>Epsilon</code>","text":"<p>Machine epsilon</p> <pre><code>\\() number</code></pre>"},{"location":"references/standard-packages/core/#exponential","title":"<code>Exponential</code>","text":"<p>Calculate an exponential of a number.</p> <pre><code>\\(x number) number</code></pre>"},{"location":"references/standard-packages/core/#floor","title":"<code>Floor</code>","text":"<p>Calculate a floor value.</p> <pre><code>\\(x number) number</code></pre>"},{"location":"references/standard-packages/core/#fraction","title":"<code>Fraction</code>","text":"<p>Calculate a fraction value of a number.</p> <pre><code>\\(x number) number</code></pre>"},{"location":"references/standard-packages/core/#infinity","title":"<code>Infinity</code>","text":"<p>Infinity</p> <pre><code>\\() number</code></pre>"},{"location":"references/standard-packages/core/#isnan","title":"<code>IsNan</code>","text":"<p>Check if a number is NaN.</p> <pre><code>\\(x number) boolean</code></pre>"},{"location":"references/standard-packages/core/#maximum","title":"<code>Maximum</code>","text":"<p>Calculate a maximum.</p> <pre><code>\\(x number, y number) number</code></pre>"},{"location":"references/standard-packages/core/#minimum","title":"<code>Minimum</code>","text":"<p>Calculate a minimum.</p> <pre><code>\\(x number, y number) number</code></pre>"},{"location":"references/standard-packages/core/#nan","title":"<code>Nan</code>","text":"<p>NaN</p> <pre><code>\\() number</code></pre>"},{"location":"references/standard-packages/core/#parse","title":"<code>Parse</code>","text":"<p>Parse a number.</p> <pre><code>\\(s string) number | error</code></pre>"},{"location":"references/standard-packages/core/#power","title":"<code>Power</code>","text":"<p>Calculate a power.</p> <pre><code>\\(base number, exponent number) number</code></pre>"},{"location":"references/standard-packages/core/#range","title":"<code>Range</code>","text":"<p>Create a list of numbers from a minimum to a maximum.</p> <pre><code>\\(minimum number, maximum number) [number]</code></pre>"},{"location":"references/standard-packages/core/#remainder","title":"<code>Remainder</code>","text":"<p>Calculate a remainder.</p> <pre><code>\\(dividend number, divisor number) number</code></pre>"},{"location":"references/standard-packages/core/#round","title":"<code>Round</code>","text":"<p>Round a number.</p> <pre><code>\\(x number) number</code></pre>"},{"location":"references/standard-packages/core/#sequence","title":"<code>Sequence</code>","text":"<p>Create a list of numbers from 1 to a maximum value.</p> <pre><code>\\(maximum number) [number]</code></pre>"},{"location":"references/standard-packages/core/#squareroot","title":"<code>SquareRoot</code>","text":"<p>Calculate a square root.</p> <pre><code>\\(x number) number</code></pre>"},{"location":"references/standard-packages/core/#string","title":"<code>String</code>","text":"<p>Convert a number into its string representation.</p> <pre><code>\\(x number) string</code></pre>"},{"location":"references/standard-packages/core/#sum","title":"<code>Sum</code>","text":"<p>Sum up numbers.</p> <pre><code>\\(xs [number]) number</code></pre>"},{"location":"references/standard-packages/core/#truncate","title":"<code>Truncate</code>","text":"<p>Return an integer value of a number.</p> <pre><code>\\(x number) number</code></pre>"},{"location":"references/standard-packages/core/#corestring-module","title":"<code>Core'String</code> module","text":"<p>This module provides common string operations.</p>"},{"location":"references/standard-packages/core/#types_5","title":"Types","text":"<p>No types are defined.</p>"},{"location":"references/standard-packages/core/#functions_5","title":"Functions","text":""},{"location":"references/standard-packages/core/#concatenate","title":"<code>Concatenate</code>","text":"<p>Concatenate strings.</p> <pre><code>\\(strings [string]) string</code></pre>"},{"location":"references/standard-packages/core/#join","title":"<code>Join</code>","text":"<p>Join strings with a separator.</p> <pre><code>\\(strings [string], separator string) string</code></pre>"},{"location":"references/standard-packages/core/#startswith","title":"<code>StartsWith</code>","text":"<p>Check if a string starts with a pattern.</p> <pre><code>\\(s string, prefix string) boolean</code></pre>"},{"location":"references/standard-packages/core/#corestringbyte-module","title":"<code>Core'String'Byte</code> module","text":"<p>This module provides operations for strings as byte arrays.</p>"},{"location":"references/standard-packages/core/#types_6","title":"Types","text":"<p>No types are defined.</p>"},{"location":"references/standard-packages/core/#functions_6","title":"Functions","text":""},{"location":"references/standard-packages/core/#length","title":"<code>Length</code>","text":"<p>Return a length of a string.</p> <pre><code>\\(s string) number</code></pre>"},{"location":"references/standard-packages/core/#slice","title":"<code>Slice</code>","text":"<p>Slice a string.</p> <pre><code>\\(s string, start number, end number) string</code></pre>"},{"location":"references/standard-packages/core/#corestringbyteview-module","title":"<code>Core'String'Byte'View</code> module","text":"<p>This module provides views of strings as byte arrays. By using those views, you can apply operations to strings without copying them.</p>"},{"location":"references/standard-packages/core/#types_7","title":"Types","text":""},{"location":"references/standard-packages/core/#view","title":"<code>View</code>","text":"<p>A view of a string</p> <pre><code>type View {\n  # ...\n}</code></pre>"},{"location":"references/standard-packages/core/#functions_7","title":"Functions","text":""},{"location":"references/standard-packages/core/#new","title":"<code>New</code>","text":"<p>Create a view of a string.</p> <pre><code>\\(s string) View</code></pre>"},{"location":"references/standard-packages/core/#viewee","title":"<code>Viewee</code>","text":"<p>Get an original string.</p> <pre><code>\\(v View) string</code></pre>"},{"location":"references/standard-packages/core/#start","title":"<code>Start</code>","text":"<p>Get a start index of a view.</p> <pre><code>\\(v View) number</code></pre>"},{"location":"references/standard-packages/core/#end","title":"<code>End</code>","text":"<p>Get an end index of a view.</p> <pre><code>\\(v View) number</code></pre>"},{"location":"references/standard-packages/core/#startswith_1","title":"<code>StartsWith</code>","text":"<p>Check if a string starts with a pattern.</p> <pre><code>\\(v View, s string) boolean</code></pre>"},{"location":"references/standard-packages/core/#length_1","title":"<code>Length</code>","text":"<p>Get a length of a view.</p> <pre><code>\\(v View) number</code></pre>"},{"location":"references/standard-packages/core/#seek","title":"<code>Seek</code>","text":"<p>Move a start index forward.</p> <pre><code>\\(v View, n number) View</code></pre>"},{"location":"references/standard-packages/core/#slice_1","title":"<code>Slice</code>","text":"<p>Slice a view.</p> <pre><code>\\(v View, start number, end number) View</code></pre>"},{"location":"references/standard-packages/core/#tostring","title":"<code>ToString</code>","text":"<p>Convert a view into a string.</p> <pre><code>\\(v View) string</code></pre>"},{"location":"references/standard-packages/core/#corestringutf8-module","title":"<code>Core'String'Utf8</code> module","text":"<p>This module provides operations for strings encoded in UTF-8.</p>"},{"location":"references/standard-packages/core/#types_8","title":"Types","text":"<p>No types are defined.</p>"},{"location":"references/standard-packages/core/#functions_8","title":"Functions","text":""},{"location":"references/standard-packages/core/#characters","title":"<code>Characters</code>","text":"<p>Split a string into characters.</p> <pre><code>\\(s string) [string]</code></pre>"},{"location":"references/standard-packages/core/#contains","title":"<code>Contains</code>","text":"<p>Check if a string contains a pattern.</p> <pre><code>\\(s string, pat string) boolean</code></pre>"},{"location":"references/standard-packages/core/#find","title":"<code>Find</code>","text":"<p>Find an index for a pattern in a string.</p> <pre><code>\\(s string, pat string) number | none</code></pre>"},{"location":"references/standard-packages/core/#startswith_2","title":"<code>StartsWith</code>","text":"<p>Checks if a string starts with a pattern..</p> <pre><code>\\(s string, pat string) boolean</code></pre>"},{"location":"references/standard-packages/core/#endswith","title":"<code>EndsWith</code>","text":"<p>Checks if a string ends with a pattern..</p> <pre><code>\\(s string, pat string) boolean</code></pre>"},{"location":"references/standard-packages/core/#length_2","title":"<code>Length</code>","text":"<p>Return a length of a string.</p> <pre><code>\\(s string) number</code></pre>"},{"location":"references/standard-packages/core/#replace","title":"<code>Replace</code>","text":"<p>Replace a pattern in a string.</p> <pre><code>\\(s string, pattern string, replacement string) string</code></pre>"},{"location":"references/standard-packages/core/#slice_2","title":"<code>Slice</code>","text":"<p>Slice a string.</p> <pre><code>\\(s string, start number, end number) string</code></pre>"},{"location":"references/standard-packages/core/#split","title":"<code>Split</code>","text":"<p>Split a string by a pattern.</p> <pre><code>\\(s string, pat string) [string]</code></pre>"},{"location":"references/standard-packages/core/#tolowercase","title":"<code>ToLowercase</code>","text":"<p>Convert a string into lowercase.</p> <pre><code>\\(s string) string</code></pre>"},{"location":"references/standard-packages/core/#touppercase","title":"<code>ToUppercase</code>","text":"<p>Convert a string into uppercase.</p> <pre><code>\\(s string) string</code></pre>"},{"location":"references/standard-packages/core/#trim","title":"<code>Trim</code>","text":"<p>Trim leading and trailing spaces.</p> <pre><code>\\(s string) string</code></pre>"},{"location":"references/standard-packages/core/#trimend","title":"<code>TrimEnd</code>","text":"<p>Trim trailing spaces.</p> <pre><code>\\(s string) string</code></pre>"},{"location":"references/standard-packages/core/#trimendmatches","title":"<code>TrimEndMatches</code>","text":"<p>Trim trailing patterns.</p> <pre><code>\\(s string, pat string) string</code></pre>"},{"location":"references/standard-packages/core/#trimmatches","title":"<code>TrimMatches</code>","text":"<p>Trim leading and trailing patterns.</p> <pre><code>\\(s string, pat string) string</code></pre>"},{"location":"references/standard-packages/core/#trimstart","title":"<code>TrimStart</code>","text":"<p>Trim leading spaces.</p> <pre><code>\\(s string) string</code></pre>"},{"location":"references/standard-packages/core/#trimstartmatches","title":"<code>TrimStartMatches</code>","text":"<p>Trim leading patterns.</p> <pre><code>\\(s string, pat string) string</code></pre>"},{"location":"references/standard-packages/flag/","title":"<code>Flag</code> package","text":"<p>This package provides command-line flag parsing.</p> <pre><code>{\n  \"type\": \"library\"\n}</code></pre>"},{"location":"references/standard-packages/flag/#install","title":"Install","text":"<pre><code>{\n  \"dependencies\": {\n    \"Flag\": \"pen:///flag\"\n  } \n}</code></pre>"},{"location":"references/standard-packages/flag/#flagflag-module","title":"<code>Flag'Flag</code> module","text":"<p>This module provides command-line flag parsing.</p> <p>The flags have the following formats:</p> <ul> <li><code>-foo bar</code>: a named flag of a key <code>foo</code> with a value <code>bar</code></li> <li><code>foo</code>: a positional flag of a value <code>foo</code></li> </ul> <p>Named flags and positional flags are separated by <code>--</code> optionally.</p>"},{"location":"references/standard-packages/flag/#types","title":"Types","text":""},{"location":"references/standard-packages/flag/#set","title":"<code>Set</code>","text":"<p>A set of flags</p> <pre><code>type Set {\n  Named {string: string}\n  Positional [string]\n}</code></pre>"},{"location":"references/standard-packages/flag/#functions","title":"Functions","text":""},{"location":"references/standard-packages/flag/#parse","title":"<code>Parse</code>","text":"<p>Parse flags.</p> <pre><code>\\(ss [string]) Set | error</code></pre>"},{"location":"references/standard-packages/html/","title":"<code>Html</code> package","text":"<p>This package provides HTML rendering logic.</p> <pre><code>{\n  \"type\": \"library\"\n}</code></pre>"},{"location":"references/standard-packages/html/#install","title":"Install","text":"<pre><code>{\n  \"dependencies\": {\n    \"Html\": \"pen:///html\"\n  } \n}</code></pre>"},{"location":"references/standard-packages/html/#htmlnode-module","title":"<code>Html'Node</code> module","text":""},{"location":"references/standard-packages/html/#types","title":"Types","text":""},{"location":"references/standard-packages/html/#node","title":"<code>Node</code>","text":"<p>An HTML node</p> <pre><code>type Node = Element | string</code></pre>"},{"location":"references/standard-packages/html/#element","title":"<code>Element</code>","text":"<p>An HTML element</p> <pre><code>type Element {\n  Tag string\n  Attributes [Attribute]\n  Children [Node]\n}</code></pre>"},{"location":"references/standard-packages/html/#attribute","title":"<code>Attribute</code>","text":"<p>An HTML attribute</p> <pre><code>type Attribute {\n  Key string\n  Value string\n}</code></pre>"},{"location":"references/standard-packages/html/#functions","title":"Functions","text":"<p>No functions are defined.</p>"},{"location":"references/standard-packages/html/#htmlrender-module","title":"<code>Html'Render</code> module","text":""},{"location":"references/standard-packages/html/#types_1","title":"Types","text":"<p>No types are defined.</p>"},{"location":"references/standard-packages/html/#functions_1","title":"Functions","text":""},{"location":"references/standard-packages/html/#render","title":"<code>Render</code>","text":"<p>Render an HTML node.</p> <pre><code>\\(n Node) string | error</code></pre>"},{"location":"references/standard-packages/http/","title":"<code>Http</code> package","text":"<p>This package provides HTTP client and server.</p> <pre><code>{\n  \"type\": \"system\"\n}</code></pre>"},{"location":"references/standard-packages/http/#install","title":"Install","text":"<pre><code>{\n  \"dependencies\": {\n    \"Http\": \"pen:///http\"\n  } \n}</code></pre>"},{"location":"references/standard-packages/http/#httpclient-module","title":"<code>Http'Client</code> module","text":"<p>This module provides an HTTP client.</p>"},{"location":"references/standard-packages/http/#types","title":"Types","text":"<p>No types are defined.</p>"},{"location":"references/standard-packages/http/#functions","title":"Functions","text":""},{"location":"references/standard-packages/http/#send","title":"<code>Send</code>","text":"<p>Send an HTTP request.</p> <pre><code>\\(ctx Context, r Request) Response | error</code></pre>"},{"location":"references/standard-packages/http/#httpcontext-module","title":"<code>Http'Context</code> module","text":""},{"location":"references/standard-packages/http/#types_1","title":"Types","text":""},{"location":"references/standard-packages/http/#context","title":"<code>Context</code>","text":"<p>An HTTP context</p> <pre><code>type Context = context'Context</code></pre>"},{"location":"references/standard-packages/http/#functions_1","title":"Functions","text":"<p>No functions are defined.</p>"},{"location":"references/standard-packages/http/#httprequest-module","title":"<code>Http'Request</code> module","text":""},{"location":"references/standard-packages/http/#types_2","title":"Types","text":""},{"location":"references/standard-packages/http/#request","title":"<code>Request</code>","text":"<p>An HTTP request</p> <pre><code>type Request {\n  Method string\n  Uri string\n  Headers {string: string}\n  Body string\n}</code></pre>"},{"location":"references/standard-packages/http/#functions_2","title":"Functions","text":"<p>No functions are defined.</p>"},{"location":"references/standard-packages/http/#httpresponse-module","title":"<code>Http'Response</code> module","text":""},{"location":"references/standard-packages/http/#types_3","title":"Types","text":""},{"location":"references/standard-packages/http/#response","title":"<code>Response</code>","text":"<p>An HTTP response</p> <pre><code>type Response {\n  Status number\n  Headers {string: string}\n  Body string\n}</code></pre>"},{"location":"references/standard-packages/http/#functions_3","title":"Functions","text":"<p>No functions are defined.</p>"},{"location":"references/standard-packages/http/#httpserver-module","title":"<code>Http'Server</code> module","text":"<p>This module provides an HTTP server.</p>"},{"location":"references/standard-packages/http/#types_4","title":"Types","text":"<p>No types are defined.</p>"},{"location":"references/standard-packages/http/#functions_4","title":"Functions","text":""},{"location":"references/standard-packages/http/#serve","title":"<code>Serve</code>","text":"<p>Run an HTTP service.</p> <pre><code>\\(ctx Context, address string, callback \\(Request) Response) none | error</code></pre>"},{"location":"references/standard-packages/json/","title":"<code>Json</code> package","text":"<p>This package provides a JSON parser.</p> <pre><code>{\n  \"type\": \"library\"\n}</code></pre>"},{"location":"references/standard-packages/json/#install","title":"Install","text":"<pre><code>{\n  \"dependencies\": {\n    \"Json\": \"pen:///json\"\n  } \n}</code></pre>"},{"location":"references/standard-packages/json/#jsondecode-module","title":"<code>Json'Decode</code> module","text":""},{"location":"references/standard-packages/json/#types","title":"Types","text":"<p>No types are defined.</p>"},{"location":"references/standard-packages/json/#functions","title":"Functions","text":""},{"location":"references/standard-packages/json/#decode","title":"<code>Decode</code>","text":"<p>Decode a string into a JSON value.</p> <pre><code>\\(s string) Value | error</code></pre>"},{"location":"references/standard-packages/json/#jsonencode-module","title":"<code>Json'Encode</code> module","text":""},{"location":"references/standard-packages/json/#types_1","title":"Types","text":"<p>No types are defined.</p>"},{"location":"references/standard-packages/json/#functions_1","title":"Functions","text":""},{"location":"references/standard-packages/json/#encode","title":"<code>Encode</code>","text":"<p>Encode a JSON value.</p> <pre><code>\\(v Value) string</code></pre>"},{"location":"references/standard-packages/json/#jsonvalue-module","title":"<code>Json'Value</code> module","text":""},{"location":"references/standard-packages/json/#types_2","title":"Types","text":""},{"location":"references/standard-packages/json/#value","title":"<code>Value</code>","text":"<p>A JSON value</p> <pre><code>type Value {\n  # ...\n}</code></pre>"},{"location":"references/standard-packages/json/#raw","title":"<code>Raw</code>","text":"<p>A raw JSON value represented by built-in types</p> <pre><code>type Raw = boolean | none | number | string | [Value] | {string: Value}</code></pre>"},{"location":"references/standard-packages/json/#functions_2","title":"Functions","text":""},{"location":"references/standard-packages/json/#new","title":"<code>New</code>","text":"<p>Create a JSON value.</p> <pre><code>\\(r Raw) Value</code></pre>"},{"location":"references/standard-packages/json/#raw_1","title":"<code>Raw</code>","text":"<p>Get a raw value.</p> <pre><code>\\(v Value) Raw</code></pre>"},{"location":"references/standard-packages/os/","title":"<code>Os</code> package","text":"<p>This package provides an interface for operating systems.</p> <pre><code>{\n  \"type\": \"system\"\n}</code></pre>"},{"location":"references/standard-packages/os/#install","title":"Install","text":"<pre><code>{\n  \"dependencies\": {\n    \"Os\": \"pen:///os\"\n  } \n}</code></pre>"},{"location":"references/standard-packages/os/#oscontext-module","title":"<code>Os'Context</code> module","text":""},{"location":"references/standard-packages/os/#types","title":"Types","text":""},{"location":"references/standard-packages/os/#context","title":"<code>Context</code>","text":"<p>A context of an operating system.</p> <pre><code>type Context = context'Context</code></pre>"},{"location":"references/standard-packages/os/#functions","title":"Functions","text":"<p>No functions are defined.</p>"},{"location":"references/standard-packages/os/#osdirectory-module","title":"<code>Os'Directory</code> module","text":""},{"location":"references/standard-packages/os/#types_1","title":"Types","text":"<p>No types are defined.</p>"},{"location":"references/standard-packages/os/#functions_1","title":"Functions","text":""},{"location":"references/standard-packages/os/#read","title":"<code>Read</code>","text":"<p>Read a directory and return file paths it contains.</p> <pre><code>\\(ctx Context, path string) [string] | error</code></pre>"},{"location":"references/standard-packages/os/#create","title":"<code>Create</code>","text":"<p>Create a directory.</p> <pre><code>\\(ctx Context, path string) none | error</code></pre>"},{"location":"references/standard-packages/os/#remove","title":"<code>Remove</code>","text":"<p>Remove a directory.</p> <pre><code>\\(ctx Context, path string) none | error</code></pre>"},{"location":"references/standard-packages/os/#osenvironment-module","title":"<code>Os'Environment</code> module","text":""},{"location":"references/standard-packages/os/#types_2","title":"Types","text":"<p>No types are defined.</p>"},{"location":"references/standard-packages/os/#functions_2","title":"Functions","text":""},{"location":"references/standard-packages/os/#arguments","title":"<code>Arguments</code>","text":"<p>Get command line arguments.</p> <pre><code>\\(ctx Context) [string]</code></pre>"},{"location":"references/standard-packages/os/#variable","title":"<code>Variable</code>","text":"<p>Get an environment variable.</p> <pre><code>\\(ctx Context, name string) string | error</code></pre>"},{"location":"references/standard-packages/os/#osfile-module","title":"<code>Os'File</code> module","text":""},{"location":"references/standard-packages/os/#types_3","title":"Types","text":""},{"location":"references/standard-packages/os/#file","title":"<code>File</code>","text":"<p>A file on a file system.</p> <pre><code>type File {\n  # ...\n}</code></pre>"},{"location":"references/standard-packages/os/#functions_3","title":"Functions","text":""},{"location":"references/standard-packages/os/#stdin","title":"<code>StdIn</code>","text":"<p>A file of standard input.</p> <pre><code>\\() File</code></pre>"},{"location":"references/standard-packages/os/#stdout","title":"<code>StdOut</code>","text":"<p>A file of standard output.</p> <pre><code>\\() File</code></pre>"},{"location":"references/standard-packages/os/#stderr","title":"<code>StdErr</code>","text":"<p>A file of standard error.</p> <pre><code>\\() File</code></pre>"},{"location":"references/standard-packages/os/#open","title":"<code>Open</code>","text":"<p>Open a file for read-only.</p> <pre><code>\\(ctx Context, path string) File | error</code></pre>"},{"location":"references/standard-packages/os/#openwithoptions","title":"<code>OpenWithOptions</code>","text":"<p>Open a file with options.</p> <pre><code>\\(ctx Context, path string, opt OpenOptions) File | error</code></pre>"},{"location":"references/standard-packages/os/#read_1","title":"<code>Read</code>","text":"<p>Read a file.</p> <pre><code>\\(ctx Context, file File) string | error</code></pre>"},{"location":"references/standard-packages/os/#readlimit","title":"<code>ReadLimit</code>","text":"<p>Read a file until a size limit.</p> <pre><code>\\(ctx Context, file File, limit number) string | error</code></pre>"},{"location":"references/standard-packages/os/#write","title":"<code>Write</code>","text":"<p>Write data to a file.</p> <pre><code>\\(ctx Context, file File, data string) number | error</code></pre>"},{"location":"references/standard-packages/os/#copy","title":"<code>Copy</code>","text":"<p>Copy a file to another path.</p> <pre><code>\\(ctx Context, src string, dest string) none | error</code></pre>"},{"location":"references/standard-packages/os/#move","title":"<code>Move</code>","text":"<p>Move a file to another path.</p> <pre><code>\\(ctx Context, src string, dest string) none | error</code></pre>"},{"location":"references/standard-packages/os/#remove_1","title":"<code>Remove</code>","text":"<p>Remove a file.</p> <pre><code>\\(ctx Context, path string) none | error</code></pre>"},{"location":"references/standard-packages/os/#metadata","title":"<code>Metadata</code>","text":"<p>Get metadata of a file at a path.</p> <pre><code>\\(ctx Context, path string) Metadata | error</code></pre>"},{"location":"references/standard-packages/os/#osfilemetadata-module","title":"<code>Os'File'Metadata</code> module","text":""},{"location":"references/standard-packages/os/#types_4","title":"Types","text":""},{"location":"references/standard-packages/os/#metadata_1","title":"<code>Metadata</code>","text":"<p>File metadata</p> <pre><code>type Metadata {\n  Size number\n}</code></pre>"},{"location":"references/standard-packages/os/#functions_4","title":"Functions","text":"<p>No functions are defined.</p>"},{"location":"references/standard-packages/os/#osfileopenoptions-module","title":"<code>Os'File'OpenOptions</code> module","text":""},{"location":"references/standard-packages/os/#types_5","title":"Types","text":""},{"location":"references/standard-packages/os/#openoptions","title":"<code>OpenOptions</code>","text":"<p>Options to open a file</p> <ul> <li><code>Append</code> allows appending data to the file.</li> <li><code>Create</code> creates a new file if the file doesn't exist or opens it otherwise.</li> <li><code>CreateNew</code> creates a new file. If the file already exists, it emits an error.</li> <li><code>Read</code> allows reading data from the file.</li> <li><code>Truncate</code> truncates the file to zero byte.</li> <li><code>Write</code> allows writing data to the file.</li> </ul> <pre><code>type OpenOptions {\n  Append boolean\n  Create boolean\n  CreateNew boolean\n  Read boolean\n  Truncate boolean\n  Write boolean\n}</code></pre>"},{"location":"references/standard-packages/os/#functions_5","title":"Functions","text":""},{"location":"references/standard-packages/os/#default","title":"<code>Default</code>","text":"<p>Get default options to open a file. They do not include any permission.</p> <pre><code>\\() OpenOptions</code></pre>"},{"location":"references/standard-packages/os/#osprocess-module","title":"<code>Os'Process</code> module","text":""},{"location":"references/standard-packages/os/#types_6","title":"Types","text":"<p>No types are defined.</p>"},{"location":"references/standard-packages/os/#functions_6","title":"Functions","text":""},{"location":"references/standard-packages/os/#exit","title":"<code>Exit</code>","text":"<p>Exit a current process.</p> <pre><code>\\(ctx Context, code number) none</code></pre>"},{"location":"references/standard-packages/os/#run","title":"<code>Run</code>","text":"<p>Run a command.</p> <pre><code>\\(ctx Context, cmd string, args [string]) none | error</code></pre>"},{"location":"references/standard-packages/os/#ostcp-module","title":"<code>Os'Tcp</code> module","text":""},{"location":"references/standard-packages/os/#types_7","title":"Types","text":"<p>No types are defined.</p>"},{"location":"references/standard-packages/os/#functions_7","title":"Functions","text":""},{"location":"references/standard-packages/os/#bind","title":"<code>Bind</code>","text":"<p>Create a listener bound to a server address.</p> <pre><code>\\(ctx Context, address string) Listener | error</code></pre>"},{"location":"references/standard-packages/os/#connect","title":"<code>Connect</code>","text":"<p>Create a stream connected to a peer address.</p> <pre><code>\\(ctx Context, address string) Stream | error</code></pre>"},{"location":"references/standard-packages/os/#accept","title":"<code>Accept</code>","text":"<p>Accept a client connection and create its stream.</p> <pre><code>\\(ctx Context, l Listener) AcceptedStream | error</code></pre>"},{"location":"references/standard-packages/os/#receive","title":"<code>Receive</code>","text":"<p>Receive data from a peer through a stream with a size limit in bytes.</p> <pre><code>\\(ctx Context, s Stream, limit number) string | error</code></pre>"},{"location":"references/standard-packages/os/#send","title":"<code>Send</code>","text":"<p>Send data to a peer through a stream.</p> <pre><code>\\(ctx Context, s Stream, data string) number | error</code></pre>"},{"location":"references/standard-packages/os/#ostcpacceptedstream-module","title":"<code>Os'Tcp'AcceptedStream</code> module","text":""},{"location":"references/standard-packages/os/#types_8","title":"Types","text":""},{"location":"references/standard-packages/os/#acceptedstream","title":"<code>AcceptedStream</code>","text":"<p>A TCP stream accepted on a server with a client address</p> <pre><code>type AcceptedStream {\n  Stream Stream\n  Address string\n}</code></pre>"},{"location":"references/standard-packages/os/#functions_8","title":"Functions","text":"<p>No functions are defined.</p>"},{"location":"references/standard-packages/os/#ostcplistener-module","title":"<code>Os'Tcp'Listener</code> module","text":""},{"location":"references/standard-packages/os/#types_9","title":"Types","text":""},{"location":"references/standard-packages/os/#listener","title":"<code>Listener</code>","text":"<p>A TCP listener to listen for client connections</p> <pre><code>type Listener {\n  # ...\n}</code></pre>"},{"location":"references/standard-packages/os/#functions_9","title":"Functions","text":"<p>No functions are defined.</p>"},{"location":"references/standard-packages/os/#ostcpstream-module","title":"<code>Os'Tcp'Stream</code> module","text":""},{"location":"references/standard-packages/os/#types_10","title":"Types","text":""},{"location":"references/standard-packages/os/#stream","title":"<code>Stream</code>","text":"<p>A TCP stream</p> <pre><code>type Stream {\n  # ...\n}</code></pre>"},{"location":"references/standard-packages/os/#functions_10","title":"Functions","text":"<p>No functions are defined.</p>"},{"location":"references/standard-packages/os/#ostime-module","title":"<code>Os'Time</code> module","text":""},{"location":"references/standard-packages/os/#types_11","title":"Types","text":"<p>No types are defined.</p>"},{"location":"references/standard-packages/os/#functions_11","title":"Functions","text":""},{"location":"references/standard-packages/os/#now","title":"<code>Now</code>","text":"<p>Fetch a current system time in milliseconds.</p> <pre><code>\\(ctx Context) number</code></pre>"},{"location":"references/standard-packages/os/#sleep","title":"<code>Sleep</code>","text":"<p>Pause a current execution context for a given amount of time.</p> <pre><code>\\(ctx Context, milliseconds number) none</code></pre>"},{"location":"references/standard-packages/os/#osudp-module","title":"<code>Os'Udp</code> module","text":""},{"location":"references/standard-packages/os/#types_12","title":"Types","text":"<p>No types are defined.</p>"},{"location":"references/standard-packages/os/#functions_12","title":"Functions","text":""},{"location":"references/standard-packages/os/#bind_1","title":"<code>Bind</code>","text":"<p>Bind a socket with a server address.</p> <pre><code>\\(ctx Context, address string) Socket | error</code></pre>"},{"location":"references/standard-packages/os/#connect_1","title":"<code>Connect</code>","text":"<p>Connect a socket to a peer address.</p> <pre><code>\\(ctx Context, s Socket, address string) none | error</code></pre>"},{"location":"references/standard-packages/os/#receive_1","title":"<code>Receive</code>","text":"<p>Receive a datagram from a connected address.</p> <pre><code>\\(ctx Context, s Socket) string | error</code></pre>"},{"location":"references/standard-packages/os/#receivefrom","title":"<code>ReceiveFrom</code>","text":"<p>Receive a datagram from any address.</p> <pre><code>\\(ctx Context, s Socket) Datagram | error</code></pre>"},{"location":"references/standard-packages/os/#send_1","title":"<code>Send</code>","text":"<p>Send a datagram to a connected address.</p> <pre><code>\\(ctx Context, s Socket, data string) number | error</code></pre>"},{"location":"references/standard-packages/os/#sendto","title":"<code>SendTo</code>","text":"<p>Send a datagram to a specified address.</p> <pre><code>\\(ctx Context, s Socket, data string, address string) number | error</code></pre>"},{"location":"references/standard-packages/os/#osudpdatagram-module","title":"<code>Os'Udp'Datagram</code> module","text":""},{"location":"references/standard-packages/os/#types_13","title":"Types","text":""},{"location":"references/standard-packages/os/#datagram","title":"<code>Datagram</code>","text":"<p>UDP datagram</p> <pre><code>type Datagram {\n  Data string\n  Address string\n}</code></pre>"},{"location":"references/standard-packages/os/#functions_13","title":"Functions","text":"<p>No functions are defined.</p>"},{"location":"references/standard-packages/os/#osudpsocket-module","title":"<code>Os'Udp'Socket</code> module","text":""},{"location":"references/standard-packages/os/#types_14","title":"Types","text":""},{"location":"references/standard-packages/os/#socket","title":"<code>Socket</code>","text":"<p>UDP socket</p> <pre><code>type Socket {\n  # ...\n}</code></pre>"},{"location":"references/standard-packages/os/#functions_14","title":"Functions","text":"<p>No functions are defined.</p>"},{"location":"references/standard-packages/random/","title":"<code>Random</code> package","text":"<p>This package provides random number generation.</p> <pre><code>{\n  \"type\": \"system\"\n}</code></pre>"},{"location":"references/standard-packages/random/#install","title":"Install","text":"<pre><code>{\n  \"dependencies\": {\n    \"Random\": \"pen:///random\"\n  } \n}</code></pre>"},{"location":"references/standard-packages/random/#randomcontext-module","title":"<code>Random'Context</code> module","text":""},{"location":"references/standard-packages/random/#types","title":"Types","text":""},{"location":"references/standard-packages/random/#context","title":"<code>Context</code>","text":"<p>A context of random number generation.</p> <pre><code>type Context = context'Context</code></pre>"},{"location":"references/standard-packages/random/#functions","title":"Functions","text":"<p>No functions are defined.</p>"},{"location":"references/standard-packages/random/#randomrandom-module","title":"<code>Random'Random</code> module","text":""},{"location":"references/standard-packages/random/#types_1","title":"Types","text":"<p>No types are defined.</p>"},{"location":"references/standard-packages/random/#functions_1","title":"Functions","text":""},{"location":"references/standard-packages/random/#number","title":"<code>Number</code>","text":"<p>Generate a random number in a range of [0, 1).</p> <pre><code>\\(ctx Context) number</code></pre>"},{"location":"references/standard-packages/reflect/","title":"<code>Reflect</code> package","text":"<p>This package provides reflection.</p> <pre><code>{\n  \"type\": \"library\"\n}</code></pre>"},{"location":"references/standard-packages/reflect/#install","title":"Install","text":"<pre><code>{\n  \"dependencies\": {\n    \"Reflect\": \"pen:///reflect\"\n  } \n}</code></pre>"},{"location":"references/standard-packages/reflect/#reflectany-module","title":"<code>Reflect'Any</code> module","text":"<p>This module provides utility functions for the <code>any</code> type.</p>"},{"location":"references/standard-packages/reflect/#types","title":"Types","text":"<p>No types are defined.</p>"},{"location":"references/standard-packages/reflect/#functions","title":"Functions","text":""},{"location":"references/standard-packages/reflect/#debug","title":"<code>Debug</code>","text":"<p>Pretty-print a value.</p> <pre><code>\\(x any) string</code></pre>"},{"location":"references/standard-packages/reflect/#equal","title":"<code>Equal</code>","text":"<p>Check if values are equal. It returns <code>none</code> if values are not comparable.</p> <pre><code>\\(x any, y any) boolean | none</code></pre>"},{"location":"references/standard-packages/regex/","title":"<code>Regex</code> package","text":"<p>This package provides regular expressions.</p> <pre><code>{\n  \"type\": \"library\"\n}</code></pre>"},{"location":"references/standard-packages/regex/#install","title":"Install","text":"<pre><code>{\n  \"dependencies\": {\n    \"Regex\": \"pen:///regex\"\n  } \n}</code></pre>"},{"location":"references/standard-packages/regex/#regexexpression-module","title":"<code>Regex'Expression</code> module","text":"<p>This module provides functions to compile and match regular expressions.</p>"},{"location":"references/standard-packages/regex/#types","title":"Types","text":""},{"location":"references/standard-packages/regex/#expression","title":"<code>Expression</code>","text":"<p>A regular expression.</p> <pre><code>type Expression {\n  # ...\n}</code></pre>"},{"location":"references/standard-packages/regex/#functions","title":"Functions","text":""},{"location":"references/standard-packages/regex/#new","title":"<code>New</code>","text":"<p>Compile a regular expression.</p> <pre><code>\\(s string) Expression | error</code></pre>"},{"location":"references/standard-packages/regex/#matches","title":"<code>Matches</code>","text":"<p>Check if a regular expression matches with a string or not.</p> <pre><code>\\(e Expression, s string) boolean</code></pre>"},{"location":"references/standard-packages/regex/#match","title":"<code>Match</code>","text":"<p>Match a regular expression with a string and return matched groups.</p> <pre><code>\\(e Expression, s string) [string | none] | none</code></pre>"},{"location":"references/standard-packages/sql/","title":"<code>Sql</code> package","text":"<p>This package provides a SQL database client.</p> <pre><code>{\n  \"type\": \"system\"\n}</code></pre>"},{"location":"references/standard-packages/sql/#install","title":"Install","text":"<pre><code>{\n  \"dependencies\": {\n    \"Sql\": \"pen:///sql\"\n  } \n}</code></pre>"},{"location":"references/standard-packages/sql/#sqlcontext-module","title":"<code>Sql'Context</code> module","text":""},{"location":"references/standard-packages/sql/#types","title":"Types","text":""},{"location":"references/standard-packages/sql/#context","title":"<code>Context</code>","text":"<p>A SQL database context</p> <pre><code>type Context = context'Context</code></pre>"},{"location":"references/standard-packages/sql/#functions","title":"Functions","text":"<p>No functions are defined.</p>"},{"location":"references/standard-packages/sql/#sqlpool-module","title":"<code>Sql'Pool</code> module","text":""},{"location":"references/standard-packages/sql/#types_1","title":"Types","text":""},{"location":"references/standard-packages/sql/#pool","title":"<code>Pool</code>","text":"<p>A connection pool</p> <pre><code>type Pool = pool'Pool</code></pre>"},{"location":"references/standard-packages/sql/#functions_1","title":"Functions","text":""},{"location":"references/standard-packages/sql/#new","title":"<code>New</code>","text":"<p>Create a connection pool.</p> <pre><code>\\(context Context, uri string, options Options) Pool | error</code></pre>"},{"location":"references/standard-packages/sql/#query","title":"<code>Query</code>","text":"<p>Run a query and return its rows.</p> <pre><code>\\(context Context, pool Pool, query string, arguments [Value]) [[Value]] | error</code></pre>"},{"location":"references/standard-packages/sql/#execute","title":"<code>Execute</code>","text":"<p>Run a query and return a number of affected rows.</p> <pre><code>\\(context Context, pool Pool, query string, arguments [Value]) number | error</code></pre>"},{"location":"references/standard-packages/sql/#sqlpooloptions-module","title":"<code>Sql'Pool'Options</code> module","text":""},{"location":"references/standard-packages/sql/#types_2","title":"Types","text":""},{"location":"references/standard-packages/sql/#options","title":"<code>Options</code>","text":"<p>Connection pool options</p> <pre><code>type Options {\n  MinConnections number\n  MaxConnections number\n  ConnectTimeout number\n}</code></pre>"},{"location":"references/standard-packages/sql/#functions_2","title":"Functions","text":"<p>No functions are defined.</p>"},{"location":"references/standard-packages/sql/#sqlvalue-module","title":"<code>Sql'Value</code> module","text":""},{"location":"references/standard-packages/sql/#types_3","title":"Types","text":""},{"location":"references/standard-packages/sql/#value","title":"<code>Value</code>","text":"<p>A value in a column</p> <pre><code>type Value = boolean | none | number | string</code></pre>"},{"location":"references/standard-packages/sql/#functions_3","title":"Functions","text":"<p>No functions are defined.</p>"},{"location":"references/standard-packages/test/","title":"<code>Test</code> package","text":"<p>This package provides test utilities.</p> <pre><code>{\n  \"type\": \"library\"\n}</code></pre>"},{"location":"references/standard-packages/test/#install","title":"Install","text":"<pre><code>{\n  \"dependencies\": {\n    \"Test\": \"pen:///test\"\n  } \n}</code></pre>"},{"location":"references/standard-packages/test/#testassert-module","title":"<code>Test'Assert</code> module","text":"<p>This module provides a collection of assertion logic for testing.</p>"},{"location":"references/standard-packages/test/#types","title":"Types","text":"<p>No types are defined.</p>"},{"location":"references/standard-packages/test/#functions","title":"Functions","text":""},{"location":"references/standard-packages/test/#equal","title":"<code>Equal</code>","text":"<p>Assert that values are equal. Also, if it finds values not comparable, it returns an error.</p> <pre><code>\\(x any, y any) none | error</code></pre>"},{"location":"references/standard-packages/test/#true","title":"<code>True</code>","text":"<p>Assert that a condition is true.</p> <pre><code>\\(x boolean) none | error</code></pre>"},{"location":"references/standard-packages/test/#error","title":"<code>Error</code>","text":"<p>Check if a value is an error.</p> <pre><code>\\(x any) none | error</code></pre>"},{"location":"references/standard-packages/test/#fail","title":"<code>Fail</code>","text":"<p>Fail with an error immediately. This function is useful to make unreachable codes fail.</p> <pre><code>\\() error</code></pre>"},{"location":"references/standard-packages/test/#teststate-module","title":"<code>Test'State</code> module","text":"<p>This module provides mutable states. They are useful to test certain kinds of side effects, such as I/O.</p>"},{"location":"references/standard-packages/test/#types_1","title":"Types","text":""},{"location":"references/standard-packages/test/#state","title":"<code>State</code>","text":"<p>A mutable state</p> <pre><code>type State {\n  # ...\n}</code></pre>"},{"location":"references/standard-packages/test/#functions_1","title":"Functions","text":""},{"location":"references/standard-packages/test/#run","title":"<code>Run</code>","text":"<p>Run a function with a state.</p> <pre><code>\\(f \\(State) none | error) none | error</code></pre>"},{"location":"references/standard-packages/test/#get","title":"<code>Get</code>","text":"<p>Get a value from a state.</p> <pre><code>\\(s State) any</code></pre>"},{"location":"references/standard-packages/test/#set","title":"<code>Set</code>","text":"<p>Set a value to a state.</p> <pre><code>\\(s State, x any) none</code></pre>"}]}