import Core'Number
import Test'Assert

SizeZero = \() none | error {
  Assert'Equal(size([none]), 0)
}

SizeOne = \() none | error {
  Assert'Equal(size([none none]), 1)
}

SizeTwo = \() none | error {
  Assert'Equal(size([none none, none]), 2)
}

SizeMany = \() none | error {
  Assert'Equal(size(Number'Sequence(42)), 42)
}

MapList = \() none | error {
  Assert'Equal([number x() * x() for x in [number 1, 2, 3]], [number 1, 4, 9])
}

FilterList = \() none | error {
  Assert'Equal(
    [number
      x()
      for x in [number 1, 2, 3, 4, 5] if Number'Remainder(x(), 2) == 1
    ],
    [number 1, 3, 5],
  )
}

PermutateLists = \() none | error {
  Assert'Equal(
    [number
      x() * y()
      for y in [number 5, 7, 11]
      for x in [number 1, 2, 3]
    ],
    [number 5, 7, 11, 10, 14, 22, 15, 21, 33],
  )
}
