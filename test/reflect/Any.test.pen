import Reflect'Any
import Test'Assert

DebugBoolean = \() none | error {
  Assert'True(Any'Debug(false) == "false")?
  Assert'True(Any'Debug(true) == "true")
}

DebugList = \() none | error {
  Assert'True(Any'Debug([none]) == "[none]")?
  Assert'True(Any'Debug([number 1, 2, 3]) == "[number 1, 2, 3]")
}

DebugMap = \() none | error {
  Assert'True(Any'Debug({none: none}) == "{none: none}")?
  Assert'True(
    Any'Debug({string: number "foo": 1, "bar": 2})
      == "{string: number \"bar\": 2, \"foo\": 1}",
  )
}

DebugNone = \() none | error {
  Assert'True(Any'Debug(none) == "none")
}

DebugNumber = \() none | error {
  Assert'True(Any'Debug(42) == "42")
}

DebugString = \() none | error {
  Assert'True(Any'Debug("foo") == "\"foo\"")
}

EqualDifferentTypes = \() none | error {
  Assert'True(Any'Equal(none, 1) == false)
}

EqualFunction = \() none | error {
  Assert'True(Any'Equal(\() none { none }, none) == false)?
  Assert'True(Any'Equal(\() none { none }, \() none { none }) == none)
}

EqualList = \() none | error {
  Assert'True(Any'Equal([none], [none]) == true)?
  Assert'True(Any'Equal([none none], [none]) == false)
}

EqualMap = \() none | error {
  Assert'True(Any'Equal({none: none}, {none: none}) == true)?
  Assert'True(Any'Equal({none: none none: none}, {none: none}) == false)
}

EqualNone = \() none | error {
  Assert'True(Any'Equal(none, none) == true)
}

EqualNumber = \() none | error {
  Assert'True(Any'Equal(0, 0) == true)?
  Assert'True(Any'Equal(0, 1) == false)
}

EqualString = \() none | error {
  Assert'True(Any'Equal("foo", "foo") == true)?
  Assert'True(Any'Equal("foo", "bar") == false)
}
