import Test'Assert

import 'Number
import 'String'Utf8

Characters = \() none | error {
  Assert'Equal(Utf8'Characters("🗿😄🐶"), [string "🗿", "😄", "🐶"])
}

Contains = \() none | error {
  Assert'True(Utf8'Contains("tomato", "mat"))
}

ContainsFail = \() none | error {
  Assert'True(!Utf8'Contains("tomato", "foo"))
}

Find = \() none | error {
  Assert'Equal(Utf8'Find("🗿😄🐶", "😄"), 2)
}

FindFail = \() none | error {
  Assert'Equal(Utf8'Find("🗿😄🐶", "🐱"), none)
}

StartsWith = \() none | error {
  Assert'True(Utf8'StartsWith("🗿😄🐶", "🗿😄"))
}

EndsWith = \() none | error {
  Assert'True(Utf8'EndsWith("🗿😄🐶", "😄🐶"))
}

LengthEmpty = \() none | error {
  Assert'Equal(Utf8'Length(""), 0)
}

LengthEmoji = \() none | error {
  Assert'Equal(Utf8'Length("😄"), 1)
}

LengthTwoEmojis = \() none | error {
  Assert'Equal(Utf8'Length("😄🗿"), 2)
}

Replace = \() none | error {
  Assert'Equal(Utf8'Replace("🗿😄🐶", "😄", "smile"), "🗿smile🐶")
}

SliceStart = \() none | error {
  Assert'Equal(Utf8'Slice("🗿😄🐶", 1, 2), "🗿😄")
}

SliceMiddle = \() none | error {
  Assert'Equal(Utf8'Slice("🗿😄🐶", 2, 2), "😄")
}

SliceEnd = \() none | error {
  Assert'Equal(Utf8'Slice("🗿😄🐶", 2, 3), "😄🐶")
}

SliceInfinity = \() none | error {
  Assert'Equal(Utf8'Slice("🗿😄🐶", 2, Number'Infinity()), "😄🐶")
}

Split = \() none | error {
  Assert'Equal(Utf8'Split("🗿 😄 🐶", " "), [string "🗿", "😄", "🐶"])
}

ToLowercase = \() none | error {
  Assert'Equal(Utf8'ToLowercase("FOO"), "foo")
}

ToUppercase = \() none | error {
  Assert'Equal(Utf8'ToUppercase("foo"), "FOO")
}

Trim = \() none | error {
  Assert'Equal(Utf8'Trim(" foo "), "foo")
}

TrimEnd = \() none | error {
  Assert'Equal(Utf8'TrimEnd(" foo "), " foo")
}

TrimEndMatches = \() none | error {
  # spell-checker: disable-next-line
  Assert'Equal(Utf8'TrimEndMatches("bazbarfoo", "o"), "bazbarf")
}

TrimMatches = \() none | error {
  # spell-checker: disable-next-line
  Assert'Equal(Utf8'TrimMatches("foobarfoo", "foo"), "bar")
}

TrimStart = \() none | error {
  Assert'Equal(Utf8'TrimStart(" foo "), "foo ")
}

TrimStartMatches = \() none | error {
  # spell-checker: disable-next-line
  Assert'Equal(Utf8'TrimStartMatches("foobarbaz", "fo"), "obarbaz")
}
