import Test'Assert

import 'Number
import 'String'Utf8

LengthEmpty = \() none | error {
  Assert'True(Utf8'Length("") == 0)
}

LengthEmoji = \() none | error {
  Assert'True(Utf8'Length("😄") == 1)
}

LengthTwoEmojis = \() none | error {
  Assert'True(Utf8'Length("😄🗿") == 2)
}

SliceStart = \() none | error {
  Assert'True(Utf8'Slice("🗿😄🐶", 1, 2) == "🗿😄")
}

SliceMiddle = \() none | error {
  Assert'True(Utf8'Slice("🗿😄🐶", 2, 2) == "😄")
}

SliceEnd = \() none | error {
  Assert'True(Utf8'Slice("🗿😄🐶", 2, 3) == "😄🐶")
}

SliceInfinity = \() none | error {
  Assert'True(Utf8'Slice("🗿😄🐶", 2, Number'Infinity()) == "😄🐶")
}

Trim = \() none | error {
  Assert'True(Utf8'Trim(" foo ") == "foo")
}

TrimEnd = \() none | error {
  Assert'True(Utf8'TrimEnd(" foo ") == " foo")
}

TrimEndMatch = \() none | error {
  # spell-checker: disable-next-line
  Assert'True(Utf8'TrimEndMatch("bazbarfoo", "o") == "bazbarf")
}

TrimMatch = \() none | error {
  # spell-checker: disable-next-line
  Assert'True(Utf8'TrimMatch("foobarfoo", "foo") == "bar")
}

TrimStart = \() none | error {
  Assert'True(Utf8'TrimStart(" foo ") == "foo ")
}

TrimStartMatch = \() none | error {
  # spell-checker: disable-next-line
  Assert'True(Utf8'TrimStartMatch("foobarbaz", "fo") == "obarbaz")
}
