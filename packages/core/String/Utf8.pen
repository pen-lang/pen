# This module provides operations for strings encoded in UTF-8.

import foreign "c" _pen_core_utf8_contains \(string, string) boolean
import foreign "c" _pen_core_utf8_find \(string, string) number
import foreign "c" _pen_core_utf8_length \(string) number
import foreign "c" _pen_core_utf8_has_prefix \(string, string) boolean
import foreign "c" _pen_core_utf8_has_suffix \(string, string) boolean
import foreign "c" _pen_core_utf8_replace \(string, string, string) string
import foreign "c" _pen_core_utf8_slice \(string, number, number) string
import foreign "c" _pen_core_utf8_split \(string, string) [string]
import foreign "c" _pen_core_utf8_to_lowercase \(string) string
import foreign "c" _pen_core_utf8_to_uppercase \(string) string
import foreign "c" _pen_core_utf8_trim \(string) string
import foreign "c" _pen_core_utf8_trim_end \(string) string
import foreign "c" _pen_core_utf8_trim_end_matches \(string, string) string
import foreign "c" _pen_core_utf8_trim_start \(string) string
import foreign "c" _pen_core_utf8_trim_start_matches \(string, string) string

# Check if a string contains a pattern.
Contains = \(s string, pat string) boolean {
  _pen_core_utf8_contains(s, pat)
}

# Find an index for a pattern in a string.
Find = \(s string, pat string) number | none {
  i = _pen_core_utf8_find(s, pat)

  if i < 0 { none } else { i }
}

# Checks if a string has a prefix..
HasPrefix = \(s string, pat string) boolean {
  _pen_core_utf8_has_prefix(s, pat)
}

# Checks if a string has a suffix..
HasSuffix = \(s string, pat string) boolean {
  _pen_core_utf8_has_suffix(s, pat)
}

# Return a length of a string.
Length = \(s string) number {
  _pen_core_utf8_length(s)
}

# Replace a pattern in a string.
Replace = \(s string, pattern string, replacement string) string {
  _pen_core_utf8_replace(s, pattern, replacement)
}

# Slice a string.
Slice = \(s string, start number, end number) string {
  _pen_core_utf8_slice(s, start, end)
}

# Split a string by a pattern.
Split = \(s string, pat string) [string] {
  _pen_core_utf8_split(s, pat)
}

# Convert a string into lowercase.
ToLowercase = \(s string) string {
  _pen_core_utf8_to_lowercase(s)
}

# Convert a string into uppercase.
ToUppercase = \(s string) string {
  _pen_core_utf8_to_uppercase(s)
}

# Trim leading and trailing spaces.
Trim = \(s string) string {
  _pen_core_utf8_trim(s)
}

# Trim trailing spaces.
TrimEnd = \(s string) string {
  _pen_core_utf8_trim_end(s)
}

# Trim trailing patterns.
TrimEndMatches = \(s string, pat string) string {
  _pen_core_utf8_trim_end_matches(s, pat)
}

# Trim leading and trailing patterns.
TrimMatches = \(s string, pat string) string {
  TrimEndMatches(TrimStartMatches(s, pat), pat)
}

# Trim leading spaces.
TrimStart = \(s string) string {
  _pen_core_utf8_trim_start(s)
}

# Trim leading patterns.
TrimStartMatches = \(s string, pat string) string {
  _pen_core_utf8_trim_start_matches(s, pat)
}
