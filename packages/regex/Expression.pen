# This module provides functions to compile and match regular expressions.

import foreign "c" _pen_regex_expression_new \(string) Expression | error
import foreign "c" _pen_regex_expression_is_match \(Expression, string) boolean
import foreign "c" _pen_regex_expression_match \(Expression, string) [string | none]

# A regular expression.
type Expression {
  inner any
}

# Compile a regular expression.
New = \(s string) Expression | error {
  _pen_regex_expression_new(s)
}

# Check if a regular expression matches with a string or not.
IsMatch = \(e Expression, s string) boolean {
  _pen_regex_expression_is_match(e, s)
}

# Match a regular expression with a string and return matched groups.
Match = \(e Expression, s string) [string | none] | none {
  ss = _pen_regex_expression_match(e, s)

  if size(ss) == 0 { none } else { ss }
}

foreign "c" _pen_regex_expression_to_any = \(e Expression) any { e }
