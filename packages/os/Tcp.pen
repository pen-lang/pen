import 'Context'context { Context }
import 'Tcp'AcceptedStream { AcceptedStream }
import 'Tcp'Listener { Listener }
import 'Tcp'Stream { Stream }

# Create a listener bound to a server address.
Bind = \(ctx Context, address string) Listener | error {
  context'Inner(ctx).TcpBind(address)
}

# Create a stream connected to a peer address.
Connect = \(ctx Context, address string) Stream | error {
  context'Inner(ctx).TcpConnect(address)
}

# Accept a client connection and create its stream.
Accept = \(ctx Context, l Listener) AcceptedStream | error {
  context'Inner(ctx).TcpAccept(l)
}

# Receive data from a peer through a stream with a size limit in bytes.
Receive = \(ctx Context, s Stream, limit number) string | error {
  context'Inner(ctx).TcpReceive(s, limit)
}

# Send data to a peer through a stream.
Send = \(ctx Context, s Stream, data string) number | error {
  context'Inner(ctx).TcpSend(s, data)
}
