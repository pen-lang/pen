# This module provides a collection of assertion logic for testing.

import Reflect'Any

# Assert that values are equal. Also, if it finds values not comparable, it returns an error.
Equal = \(x any, y any) none | error {
  if b = Any'Equal(x, y) as boolean {
    if b {
      none
    } else {
      error("values are not equal " + formatValues(x, y))
    }
  } else {
    error("values are not comparable " + formatValues(x, y))
  }
}

formatValues = \(x any, y any) string {
  "(found: " + Any'Debug(x) + ") (expected: " + Any'Debug(y) + ")"
}

# Assert that a condition is true.
True = \(x boolean) none | error {
  if x {
    none
  } else {
    error("condition is false")
  }
}

# Check if a value is an error.
Error = \(x any) none | error {
  if x = x as error {
    none
  } else {
    error("error expected (found: " + Any'Debug(x) + ")")
  }
}

# Fail with an error immediately.
# This function is useful to make unreachable codes fail.
Fail = \() error {
  error("assertion failed")
}
