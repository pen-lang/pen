import 'Context'context { Context }
import 'Udp'Datagram { Datagram }
import 'Udp'Socket { Socket }

# Bind a socket with a server address.
Bind = \(ctx Context, address string) Socket | error {
  context'Inner(ctx).UdpBind(address)
}

# Connect a socket to a peer address.
Connect = \(ctx Context, s Socket, address string) none | error {
  context'Inner(ctx).UdpConnect(s, address)
}

# Receive a datagram from a connected address.
Receive = \(ctx Context, s Socket) string | error {
  context'Inner(ctx).UdpReceive(s)
}

# Receive a datagram from any address.
ReceiveFrom = \(ctx Context, s Socket) Datagram | error {
  context'Inner(ctx).UdpReceiveFrom(s)
}

# Send a datagram to a connected address.
Send = \(ctx Context, s Socket, data string) number | error {
  context'Inner(ctx).UdpSend(s, data)
}

# Send a datagram to a specified address.
SendTo = \(ctx Context, s Socket, data string, address string) number | error {
  context'Inner(ctx).UdpSendTo(s, data, address)
}
