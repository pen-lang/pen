import 'Context'context { Context }
import 'File'Metadata { Metadata }
import 'File'OpenOptions { OpenOptions }
import 'normalFile { NormalFile }

# A file on a file system.
type File {
  inner NormalFile | specialFile
}

type stdIn {}

type stdOut {}

type stdErr {}

type specialFile = stdIn | stdOut | stdErr

# A file of standard input.
StdIn = \() File {
  File{inner: stdIn{}}
}

# A file of standard output.
StdOut = \() File {
  File{inner: stdOut{}}
}

# A file of standard error.
StdErr = \() File {
  File{inner: stdErr{}}
}

# Open a file for read-only.
Open = \(ctx Context, path string) File | error {
  OpenWithOptions(
    ctx,
    path,
    OpenOptions{...OpenOptions'Default(), Read: true},
  )
}

# Open a file with options.
OpenWithOptions = \(ctx Context, path string, opt OpenOptions) File | error {
  File{inner: context'Inner(ctx).OpenFile(path, opt)?}
}

# Read a file.
Read = \(ctx Context, file File) string | error {
  if f = file.inner as stdIn {
    context'Inner(ctx).ReadStdIn()
  } else if stdOut {
    error("cannot read from stdout")
  } else if stdErr {
    error("cannot read from stderr")
  } else if NormalFile {
    context'Inner(ctx).ReadFile(f)
  }
}

# Read a file until a size limit.
ReadLimit = \(ctx Context, file File, limit number) string | error {
  if f = file.inner as stdIn {
    context'Inner(ctx).ReadLimitStdIn(limit)
  } else if stdOut {
    error("cannot read from stdout")
  } else if stdErr {
    error("cannot read from stderr")
  } else if NormalFile {
    context'Inner(ctx).ReadLimitFile(f, limit)
  }
}

# Write data to a file.
Write = \(ctx Context, file File, data string) number | error {
  inner = context'Inner(ctx)

  if f = file.inner as stdIn {
    error("cannot write to stdin")
  } else if stdOut {
    inner.WriteStdOut(data)
  } else if stdErr {
    inner.WriteStdErr(data)
  } else {
    inner.WriteFile(f, data)
  }
}

# Copy a file to another path.
Copy = \(ctx Context, src string, dest string) none | error {
  context'Inner(ctx).CopyFile(src, dest)
}

# Move a file to another path.
Move = \(ctx Context, src string, dest string) none | error {
  context'Inner(ctx).MoveFile(src, dest)
}

# Remove a file.
Remove = \(ctx Context, path string) none | error {
  context'Inner(ctx).RemoveFile(path)
}

# Get metadata of a file at a path.
Metadata = \(ctx Context, path string) Metadata | error {
  context'Inner(ctx).Metadata(path)
}
