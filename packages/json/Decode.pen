import Core'Boolean
import Core'Number
import Core'String
import Core'String'Byte
import Core'String'Byte'View { View }

import 'Value { Value }

import foreign "c" _pen_json_decode_number \(string) number

type valueResult {
  value Value
  input View
}

type stringResult {
  string string
  input View
}

type stringsResult {
  strings [string]
  input View
}

type arrayResult {
  array [Value]
  input View
}

type objectResult {
  entries [objectEntry]
  input View
}

type objectEntry {
  key string
  value Value
}

# Decode a string into a JSON value.
Decode = \(s string) Value | error {
  r = value(View'New(s))?

  if View'Length(blank(r.input)) == 0 {
    r.value
  } else {
    error("unexpected character")
  }
}

value = \(v View) valueResult | error {
  v = blank(v)

  if View'HasPrefix(v, "n") {
    null(v)
  } else if View'HasPrefix(v, "t") {
    booleanTrue(v)
  } else if View'HasPrefix(v, "f") {
    booleanFalse(v)
  } else if View'HasPrefix(v, "\"") {
    string(v)
  } else if View'HasPrefix(v, "[") {
    array(v)
  } else if View'HasPrefix(v, "{") {
    object(v)
  } else {
    number(v)
  }
}

null = \(v View) valueResult | error {
  valueResult{value: Value'New(none), input: token(v, "null")?}
}

booleanTrue = \(v View) valueResult | error {
  valueResult{value: Value'New(true), input: token(v, "true")?}
}

booleanFalse = \(v View) valueResult | error {
  valueResult{value: Value'New(false), input: token(v, "false")?}
}

string = \(v View) valueResult | error {
  r = stringCharacters(token(v, "\"")?)?

  valueResult{
    value: Value'New(String'Concatenate(r.strings)),
    input: raw(r.input, "\"")?,
  }
}

stringCharacters = \(v View) stringsResult | error {
  if View'HasPrefix(v, "\"") {
    stringsResult{strings: [string], input: v}
  } else {
    r = stringCharacter(v)?
    s = r.string
    r = stringCharacters(r.input)?

    stringsResult{strings: [string s, ...r.strings], input: r.input}
  }
}

stringCharacter = \(v View) stringResult | error {
  if w = raw(v, "\\\"") as View {
    stringResult{string: "\"", input: w}
  } else {
    if View'Length(v) == 0 {
      error("unexpected end of string")
    } else {
      stringResult{string: View'ToString(View'Slice(v, 1, 1)), input: View'Seek(v, 1)}
    }
  }
}

number = \(v View) valueResult | error {
  i = View'Start(v)

  v = if w = token(v, "-") as View { w } else { v }
  v = integer(v)?
  v = if w = raw(v, ".") as View { digits(w) } else { v }

  valueResult{
    value: Value'New(
      _pen_json_decode_number(Byte'Slice(View'Viewee(v), i, View'Start(v) - 1)),
    ),
    input: v,
  }
}

integer = \(v View) View | error {
  if w = nonZeroDigit(v) as View {
    digits(w)
  } else {
    if v = raw(v, "0") as View {
      v
    } else {
      error("number expected")
    }
  }
}

digits = \(v View) View {
  if w = digit(v) as View {
    digits(w)
  } else {
    v
  }
}

digit = \(v View) View | none {
  if w = nonZeroDigit(v) as View {
    w
  } else {
    if v = raw(v, "0") as View {
      v
    } else {
      none
    }
  }
}

nonZeroDigit = \(v View) View | none {
  if Boolean'Any([boolean View'HasPrefix(v, Number'String(n())) for n in Number'Range(1, 9)]) {
    View'Seek(v, 1)
  } else {
    none
  }
}

array = \(v View) valueResult | error {
  r = arrayElements(token(v, "[")?)?

  valueResult{value: Value'New(r.array), input: token(r.input, "]")?}
}

arrayElements = \(v View) arrayResult | error {
  if r = value(v) as valueResult {
    x = r.value

    if v = token(r.input, ",") as View {
      r = arrayElements(v)?

      if r.array == [Value] {
        error("unexpected trailing , in array")
      } else {
        arrayResult{array: [Value x, ...r.array], input: r.input}
      }
    } else {
      arrayResult{array: [Value x], input: r.input}
    }
  } else {
    arrayResult{array: [Value], input: v}
  }
}

object = \(v View) valueResult | error {
  r = objectEntries(token(v, "{")?)?

  valueResult{
    value: Value'New(entriesToMap(r.entries)),
    input: token(r.input, "}")?,
  }
}

objectEntries = \(v View) objectResult | error {
  if r = string(v) as valueResult {
    k = if k = Value'Raw(r.value) as string { k } else { error("unexpected non-string key") }?
    v = token(r.input, ":")?
    r = value(v)?

    e = objectEntry{key: k, value: r.value}

    if v = token(r.input, ",") as View {
      r = objectEntries(v)?

      if r.entries == [objectEntry] {
        error("unexpected trailing , in object")
      } else {
        objectResult{entries: [objectEntry e, ...r.entries], input: r.input}
      }
    } else {
      objectResult{entries: [objectEntry e], input: r.input}
    }
  } else {
    objectResult{entries: [objectEntry], input: v}
  }
}

entriesToMap = \(es [objectEntry]) {string: Value} {
  if [e, ...es] = es {
    {string: Value e().key: e().value, ...entriesToMap(es)}
  } else {
    {string: Value}
  }
}

token = \(v View, s string) View | error {
  raw(blank(v), s)
}

raw = \(v View, s string) View | error {
  if View'HasPrefix(v, s) {
    View'Seek(v, Byte'Length(s))
  } else {
    error(String'Concatenate([string s, " expected"]))
  }
}

blank = \(v View) View {
  if View'HasPrefix(v, " ") | View'HasPrefix(v, "\t") | View'HasPrefix(v, "\n") {
    blank(View'Seek(v, 1))
  } else {
    v
  }
}
