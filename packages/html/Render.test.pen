import Test'Assert

import 'Node { Attribute, Element, Node }
import 'Render { Render }

RenderElement = \() none | error {
  Assert'True(
    Render(
      Element{
        Tag: "html",
        Attributes: [Attribute],
        Children: [Node],
      },
    )?
      == "<html/>",
  )
}

RenderInvalidElement = \() none | error {
  Assert'Error(
    Render(
      Element{
        Tag: "<html/>",
        Attributes: [Attribute],
        Children: [Node],
      },
    ),
  )
}

RenderAttribute = \() none | error {
  Assert'True(
    Render(
      Element{
        Tag: "html",
        Attributes: [Attribute Attribute{Key: "foo", Value: "bar"}],
        Children: [Node],
      },
    )?
      == "<html foo=\"bar\"/>",
  )
}

RenderAttributes = \() none | error {
  Assert'True(
    Render(
      Element{
        Tag: "html",
        Attributes: [Attribute
          Attribute{Key: "foo", Value: "bar"},
          Attribute{Key: "baz", Value: "blah"},
        ],
        Children: [Node],
      },
    )?
      == "<html foo=\"bar\"baz=\"blah\"/>",
  )
}

RenderAttributeWithChild = \() none | error {
  Assert'True(
    Render(
      Element{
        Tag: "html",
        Attributes: [Attribute Attribute{Key: "foo", Value: "bar"}],
        Children: [Node
          Element{
            Tag: "body",
            Attributes: [Attribute],
            Children: [Node],
          },
        ],
      },
    )?
      == "<html foo=\"bar\"><body/></html>",
  )
}

RenderInvalidAttribute = \() none | error {
  Assert'Error(
    Render(
      Element{
        Tag: "html",
        Attributes: [Attribute
          Attribute{Key: "<foo/>", Value: "bar"},
        ],
        Children: [Node],
      },
    ),
  )
}

RenderEscapedAttribute = \() none | error {
  Assert'True(
    Render(
      Element{
        Tag: "html",
        Attributes: [Attribute Attribute{Key: "foo", Value: "\"<foo />"}],
        Children: [Node],
      },
    )?
      == "<html foo=\"&quot;&lt;foo /&gt;\"/>",
  )
}

RenderChild = \() none | error {
  Assert'True(
    Render(
      Element{
        Tag: "html",
        Attributes: [Attribute],
        Children: [Node
          Element{
            Tag: "body",
            Attributes: [Attribute],
            Children: [Node],
          },
        ],
      },
    )?
      == "<html><body/></html>",
  )
}

RenderChildren = \() none | error {
  Assert'True(
    Render(
      Element{
        Tag: "html",
        Attributes: [Attribute],
        Children: [Node
          Element{
            Tag: "head",
            Attributes: [Attribute],
            Children: [Node],
          },
          Element{
            Tag: "body",
            Attributes: [Attribute],
            Children: [Node],
          },
        ],
      },
    )?
      == "<html><head/><body/></html>",
  )
}

RenderNestedChildren = \() none | error {
  Assert'True(
    Render(
      Element{
        Tag: "html",
        Attributes: [Attribute],
        Children: [Node
          Element{
            Tag: "body",
            Attributes: [Attribute],
            Children: [Node
              Element{
                Tag: "div",
                Attributes: [Attribute],
                Children: [Node],
              },
            ],
          },
        ],
      },
    )?
      == "<html><body><div/></body></html>",
  )
}

RenderTextNode = \() none | error {
  Assert'True(
    Render(
      Element{
        Tag: "html",
        Attributes: [Attribute],
        Children: [Node "foo"],
      },
    )?
      == "<html>foo</html>",
  )
}

RenderEscapedTextNode = \() none | error {
  Assert'True(
    Render(
      Element{
        Tag: "html",
        Attributes: [Attribute],
        Children: [Node "<html />"],
      },
    )?
      == "<html>&lt;html /&gt;</html>",
  )
}
