import Core'String

import 'Node { Attribute, Node }
import 'validate

import foreign "c" _pen_html_encode_attribute \(string) string
import foreign "c" _pen_html_encode_text \(string) string

# Render an HTML node.
Render = \(n Node) string | error {
  if n = n as string {
    _pen_html_encode_text(n)
  } else {
    ats = renderAttributes(n.Attributes)?

    ns = if size(n.Children) == 0 {
      [string "/>"]
    } else {
      ns = renderChildren(n.Children)?

      [string ">", ...ns, "</", n.Tag, ">"]
    }

    tag = if validate'Name(n.Tag) {
      n.Tag
    } else {
      error(String'Concatenate([string "invalid tag: ", n.Tag]))
    }?

    String'Concatenate(
      [string
        "<",
        tag,
        ...if size(ats) == 0 {
          [string]
        } else {
          [string " ", ...ats]
        },
        ...ns,
      ],
    )
  }
}

renderAttributes = \(ats [Attribute]) [string] | error {
  if [a, ...ats] = ats {
    k = a().Key
    k = if validate'Name(k) {
      k
    } else {
      error(String'Concatenate([string "invalid attribute key: ", k]))
    }?

    ats = renderAttributes(ats)?

    [string
      k,
      "=\"",
      _pen_html_encode_attribute(a().Value),
      "\"",
      ...ats,
    ]
  } else {
    [string]
  }
}

renderChildren = \(ns [Node]) [string] | error {
  if [n, ...ns] = ns {
    n = Render(n())?
    ns = renderChildren(ns)?

    [string n, ...ns]
  } else {
    [string]
  }
}
