import foreign "c" _pen_prelude_combine_hashes \(number, number) number

type _boxElement {
  value any
}

type _anyList {
  node \() _node | none
}

type _node {
  first \() any
  rest \() _node | none
}

type _firstRest {
  first \() any
  rest _anyList
}

type _ffiFirstRest {
  ok boolean
  first \() any
  rest _anyList
}

_first = \(fr _firstRest) \() any {
  fr.first
}

_rest = \(fr _firstRest) _anyList {
  fr.rest
}

_firstRest = \(l _anyList) _firstRest | none {
  if n = l.node() as _node {
    _firstRest{
      first: n.first,
      rest: _anyList{node: n.rest},
    }
  } else {
    none
  }
}

_emptyList = \() _anyList {
  _anyList{node: \() _node | none { none }}
}

_prependToList = \(x \() any, l _anyList) _anyList {
  _anyList{node: \() _node | none { _prependToNode(x, l.node) }}
}

_prependToNode = \(x \() any, n \() _node | none) _node {
  _node{
    first: x,
    rest: n,
  }
}

_lazy = \(x \() _anyList) _anyList {
  _anyList{
    node: \() _node | none {
      x().node()
    },
  }
}

_concatenateLists = \(x \() _anyList, y _anyList) _anyList {
  _anyList{
    node: \() _node | none {
      if x = x().node() as _node {
        _prependToNode(x.first, _concatenateNodes(x.rest, y.node))
      } else {
        y.node()
      }
    },
  }
}

_concatenateNodes = \(x \() _node | none, y \() _node | none) \() _node | none {
  \() _node | none {
    if x = x() as _node {
      _prependToNode(x.first, _concatenateNodes(x.rest, y))
    } else {
      y()
    }
  }
}

_equalLists = \(f \(any, any) boolean, x _anyList, y _anyList) boolean {
  _equalNodes(f, x.node(), y.node())
}

_equalNodes = \(f \(any, any) boolean, x _node | none, y _node | none) boolean {
  if x = x as _node {
    if y = y as _node {
      f(x.first(), y.first()) & _equalNodes(f, x.rest(), y.rest())
    } else {
      false
    }
  } else {
    if y = y as _node {
      false
    } else {
      true
    }
  }
}

_hashList = \(f \(any) number, l _anyList) number {
  _hashNode(f, l.node, 0)
}

_hashNode = \(f \(any) number, node \() _node | none, h number) number {
  if n = node() as _node {
    _hashNode(
      f,
      n.rest,
      _pen_prelude_combine_hashes(h, f(n)),
    )
  } else {
    h
  }
}

foreign "c" _pen_ffi_list_create = \() _anyList {
  _emptyList()
}

foreign "c" _pen_ffi_list_prepend = \(x _boxElement, xs _anyList) _anyList {
  _prependToList(\() any { x.value }, xs)
}

foreign _pen_ffi_list_first_rest = \(xs _anyList) _ffiFirstRest {
  if fr = _firstRest(xs) as _firstRest {
    _ffiFirstRest{ok: true, first: fr.first, rest: fr.rest}
  } else {
    _ffiFirstRest{ok: false, first: \() any { none }, rest: _emptyList()}
  }
}
