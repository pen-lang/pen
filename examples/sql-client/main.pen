import Core'Number
import Core'String
import Os'Context as Os
import Os'Environment
import Os'File
import Os'Process
import Sql'Pool
import Sql'Pool'Options { Options }
import Sql'Value { Value }

import 'arguments { Arguments }
import 'command

main = \(ctx context) none {
  if e = run(ctx) as none {
    none
  } else {
    _ = File'Write(
      ctx.Os,
      File'StdErr(),
      String'Concatenate(
        [string if s = source(e) as string { s } else { "unknown error" }, "\n"],
      ),
    )
    Process'Exit(ctx.Os, 1)
  }
}

run = \(ctx context) none | error {
  args = arguments'Parse(Environment'Arguments(ctx.Os))?

  p = Pool'New(
    ctx.Sql,
    args.Uri,
    Options{
      MinConnections: 1,
      MaxConnections: 1,
      ConnectTimeout: 1000,
    },
  )?

  if _ = args.Command as command'Query {
    xss = Pool'Query(ctx.Sql, p, args.Query, [Value])?

    print(
      ctx.Os,
      String'Join(
        [string
          String'Join([string valueString(x()) for x in xs()], ", ")
          for xs in xss
        ],
        "\n",
      ),
    )?
  } else if command'Execute {
    n = Pool'Execute(ctx.Sql, p, args.Query, [Value])?

    print(ctx.Os, Number'String(n))?
  }

  print(ctx.Os, "\n")?

  none
}

valueString = \(v Value) string {
  if v = v as boolean {
    if v { "true" } else { "false" }
  } else if number {
    Number'String(v)
  } else if string {
    String'Concatenate([string "'", v, "'"])
  } else if none {
    "null"
  }
}

print = \(ctx Os'Context, s string) none | error {
  File'Write(ctx, File'StdOut(), s)?

  none
}
