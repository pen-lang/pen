import Core'Number

import 'command { Command }
import 'field { Field }
import 'position { Position }

type Snake {
  head Position
  positions [Position]
  length number
}

New = \(p Position) Snake {
  Snake{head: p, positions: [Position], length: 1}
}

Move = \(s Snake, c Command, f Field) Snake | none {
  move = \(p Position) Snake {
    Snake{
      ...s,
      head: p,
      positions: [Position s.head, ...s.positions],
    }
  }
  p = s.head

  if _ = c as command'Left {
    if p.X == 1 {
      none
    } else {
      move(Position{...p, X: p.X - 1})
    }
  } else if command'Right {
    if p.X == f.Columns {
      none
    } else {
      move(Position{...p, X: p.X + 1})
    }
  } else if command'Up {
    if p.Y == 1 {
      none
    } else {
      move(Position{...p, Y: p.Y - 1})
    }
  } else if command'Down {
    if p.Y == f.Rows {
      none
    } else {
      move(Position{...p, Y: p.Y + 1})
    }
  }
}

Eat = \(s Snake) Snake {
  Snake{...s, length: s.length + 1}
}

Positions = \(s Snake) [Position] {
  # TODO Use a list comprehension for filtering.
  [Position s.head, ...positions(s.positions, s.length - 1)]
}

positions = \(ps [Position], l number) [Position] {
  if l == 0 {
    [Position]
  } else {
    if [p, ...ps] = ps {
      [Position p(), ...positions(ps, l - 1)]
    } else {
      [Position]
    }
  }
}
