import Core'Number

import 'direction { Direction }
import 'field { Field }
import 'position { Position }

type Snake {
  head Position
  positions [Position]
  length number
  direction Direction | none
}

New = \(p Position) Snake {
  Snake{
    head: p,
    positions: [Position],
    length: 1,
    direction: none,
  }
}

Head = \(s Snake) Position { s.head }

Move = \(s Snake, d Direction | none) Snake {
  Snake{...s, direction: if d = d as none { s.direction } else { d }}
}

Tick = \(s Snake, f Field) Snake | none {
  p = if d = s.direction as none {
    s.head
  } else {
    position'Move(s.head, d, f)
  }

  if p = p as none {
    none
  } else {
    Snake{
      ...s,
      head: p,
      positions: [Position s.head, ...s.positions],
    }
  }
}

Grow = \(s Snake) Snake {
  Snake{...s, length: s.length + 1}
}

Positions = \(s Snake) [Position] {
  # TODO Use a list comprehension for filtering.
  [Position s.head, ...positions(s.positions, s.length - 1)]
}

positions = \(ps [Position], l number) [Position] {
  if l == 0 {
    [Position]
  } else {
    if [p, ...ps] = ps {
      [Position p(), ...positions(ps, l - 1)]
    } else {
      [Position]
    }
  }
}

IsBody = \(s Snake, p Position) boolean {
  isBody(s.positions, s.length, p)
}

isBody = \(ps [Position], l number, p Position) boolean {
  l > 1
    & if [pp, ...ps] = ps {
      pp() == p | isBody(ps, l - 1, p)
    } else {
      false
    }
}
