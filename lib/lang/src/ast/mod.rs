mod argument;
mod binary_operation;
mod binary_operator;
mod block;
mod boolean;
mod call;
mod calling_convention;
mod definition;
mod expression;
mod external_module_path;
mod foreign_import;
mod if_;
mod if_branch;
mod if_list;
mod if_type;
mod if_type_branch;
mod import;
mod internal_module_path;
mod lambda;
mod list;
mod list_element;
mod module;
mod module_path;
mod none;
mod number;
mod record;
mod record_deconstruction;
mod record_definition;
mod record_element;
mod statement;
mod string;
mod type_alias;
mod type_definition;
mod unary_operation;
mod unary_operator;
mod variable;

pub use argument::*;
pub use binary_operation::*;
pub use binary_operator::*;
pub use block::*;
pub use boolean::*;
pub use call::*;
pub use calling_convention::*;
pub use definition::*;
pub use expression::*;
pub use external_module_path::*;
pub use foreign_import::*;
pub use if_::*;
pub use if_branch::*;
pub use if_list::*;
pub use if_type::*;
pub use if_type_branch::*;
pub use import::*;
pub use internal_module_path::*;
pub use lambda::*;
pub use list::*;
pub use list_element::*;
pub use module::*;
pub use module_path::*;
pub use none::*;
pub use number::*;
pub use record::*;
pub use record_deconstruction::*;
pub use record_definition::*;
pub use record_element::*;
pub use statement::*;
pub use string::*;
pub use type_alias::*;
pub use type_definition::*;
pub use unary_operation::*;
pub use unary_operator::*;
pub use variable::*;

pub const IDENTIFIER_SEPARATOR: &str = "'";
