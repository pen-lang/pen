import Core'Boolean
import Core'Number
import Core'String
import Core'String'Byte
import Core'String'Byte'View { View }
import 'Value { Value }

import foreign "c" _pen_json_parse_number \(string) number

type result {
  value Value
  input View
}

type stringResult {
  value string
  input View
}

type arrayResult {
  array [Value]
  input View
}

result = \(v Value, i View) result {
  result{value: v, input: i}
}

stringResult = \(s string, i View) stringResult {
  stringResult{value: s, input: i}
}

arrayResult = \(vs [Value], i View) arrayResult {
  arrayResult{array: vs, input: i}
}

Parse = \(s string) Value | error {
  r = value(View'New(s))?

  if View'Length(blank(r.input)) == 0 {
    r.value
  } else {
    error("unexpected character")
  }
}

value = \(v View) result | error {
  v = blank(v)

  if View'HasPrefix(v, "n") {
    null(v)
  } else if View'HasPrefix(v, "t") {
    true_(v)
  } else if View'HasPrefix(v, "f") {
    false_(v)
  } else if View'HasPrefix(v, "\"") {
    string_(v)
  } else if View'HasPrefix(v, "[") {
    array(v)
  } else if View'HasPrefix(v, "{") {
    object(v)
  } else {
    number_(v)
  }
}

null = \(v View) result | error {
  s = "null"

  if View'HasPrefix(v, s) {
    result(Value'New(none), View'Seek(v, Byte'Length(s)))
  } else {
    error("null expected")
  }
}

true_ = \(v View) result | error {
  s = "true"

  if View'HasPrefix(v, s) {
    result(Value'New(true), View'Seek(v, Byte'Length(s)))
  } else {
    error("true expected")
  }
}

false_ = \(v View) result | error {
  s = "false"

  if View'HasPrefix(v, s) {
    result(Value'New(false), View'Seek(v, Byte'Length(s)))
  } else {
    error("false expected")
  }
}

string_ = \(v View) result | error {
  r = stringCharacters(View'Seek(v, 1), [string])?

  result(Value'New(r.value), View'Seek(r.input, 1))
}

stringCharacters = \(v View, ss [string]) stringResult | error {
  if r = stringCharacter(v)? as none {
    stringResult(String'Join(ss, ""), v)
  } else {
    # TODO Optimize appending string elements.
    stringCharacters(r.input, [string ...ss, r.value])
  }
}

stringCharacter = \(v View) stringResult | none | error {
  if View'HasPrefix(v, "\\\"") {
    stringResult("\"", View'Seek(v, 2))
  } else if View'HasPrefix(v, "\"") {
    none
  } else if View'Length(v) == 0 {
    unexpectedEnd()
  } else {
    stringResult(Byte'Slice(View'ToString(v), 1, 1), View'Seek(v, 1))
  }
}

number_ = \(v View) result | error {
  i = View'Start(v)

  v = View'Seek(v, if View'HasPrefix(v, "-") { 1 } else { 0 })
  v = integer(v)?
  v = if View'HasPrefix(v, ".") { digits(View'Seek(v, 1)) } else { v }

  result(
    Value'New(_pen_json_parse_number(Byte'Slice(View'Viewee(v), i, View'Start(v) - 1))),
    v,
  )
}

integer = \(v View) View | error {
  if w = nonZeroDigit(v) as View {
    digits(w)
  } else {
    if View'HasPrefix(v, "0") {
      View'Seek(v, 1)
    } else {
      error("number expected")
    }
  }
}

digits = \(v View) View {
  if w = digit(v) as View {
    digits(w)
  } else {
    v
  }
}

digit = \(v View) View | none {
  if w = nonZeroDigit(v) as View {
    w
  } else {
    if View'HasPrefix(v, "0") {
      View'Seek(v, 1)
    } else {
      none
    }
  }
}

nonZeroDigit = \(v View) View | none {
  if Boolean'Any([boolean View'HasPrefix(v, Number'String(n())) for n in Number'Range(1, 9)]) {
    View'Seek(v, 1)
  } else {
    none
  }
}

array = \(v View) result | error {
  if View'HasPrefix(v, "[") {
    r = arrayElements(View'Seek(v, 1), [Value])
    v = blank(r.input)

    if View'HasPrefix(v, "]") {
      result(Value'New(r.array), View'Seek(v, 1))
    } else {
      error("] expected")
    }
  } else {
    error("array expected")
  }
}

arrayElements = \(v View, vs [Value]) arrayResult {
  if r = value(v) as result {
    vs = [Value ...vs, r.value]
    v = blank(r.input)

    if View'HasPrefix(v, ",") {
      arrayElements(View'Seek(v, 1), vs)
    } else {
      arrayResult(vs, r.input)
    }
  } else {
    arrayResult(vs, v)
  }
}

object = \(v View) result | error {
  error("TODO")
}

blank = \(v View) View {
  if View'HasPrefix(v, " ") | View'HasPrefix(v, "\t") | View'HasPrefix(v, "\n") {
    blank(View'Seek(v, 1))
  } else {
    v
  }
}

unexpectedEnd = \() error {
  error("unexpected end of string")
}
