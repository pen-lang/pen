import Test'Assert
import 'Parse { Parse }
import 'Value

ParseNull = \() none | error {
  Assert'True(Parse("null")? == Value'New(none))
}

ParseTrue = \() none | error {
  Assert'True(Parse("true")? == Value'New(true))
}

ParseFalse = \() none | error {
  Assert'True(Parse("false")? == Value'New(false))
}

ParseInteger = \() none | error {
  Assert'True(Parse("0")? == Value'New(0))?
  Assert'True(Parse("1")? == Value'New(1))?
  Assert'True(Parse("9")? == Value'New(9))?
  Assert'True(Parse("42")? == Value'New(42))
}

ParseNegativeInteger = \() none | error {
  Assert'True(Parse("-0")? == Value'New(-0))?
  Assert'True(Parse("-1")? == Value'New(-1))?
  Assert'True(Parse("-42")? == Value'New(-42))
}

ParseDecimal = \() none | error {
  Assert'True(Parse("0.05")? == Value'New(0.05))?
  Assert'True(Parse("1.05")? == Value'New(1.05))?
  Assert'True(Parse("42.05")? == Value'New(42.05))
}

ParseEmptyString = \() none | error {
  Assert'True(Parse("\"\"")? == Value'New(""))
}

ParseString = \() none | error {
  Assert'True(Parse("\"foo\"")? == Value'New("foo"))
}

FailToParseStringWithUnexpectedEnd = \() none | error {
  Assert'True(
    if r = Parse("\"") as error {
      if s = source(r) as string {
        s == "unexpected end of string"
      } else {
        false
      }
    } else {
      false
    },
  )
}

ParseStringWithDoubleQuote = \() none | error {
  Assert'True(Parse("\"\\\"\"")? == Value'New("\""))
}

SkipSpace = \() none | error {
  Assert'True(Parse(" null")? == Value'New(none))
}

SkipTab = \() none | error {
  Assert'True(Parse("\tnull")? == Value'New(none))
}

SkipNewline = \() none | error {
  Assert'True(Parse("\nnull")? == Value'New(none))
}

SkipSpaces = \() none | error {
  Assert'True(Parse("  null")? == Value'New(none))
}

SkipTrailingSpaces = \() none | error {
  Assert'True(Parse("null  ")? == Value'New(none))
}

FailUnexpectedCharacter = \() none | error {
  Assert'True(if r = Parse("null a") as error { true } else { false })
}
