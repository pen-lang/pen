import foreign "c" _pen_prelude_combine_hashes \(number, number) number
import foreign "c" _pen_prelude_hash_number \(number) number
import foreign "c" _pen_prelude_hash_to_index \(number, number, number) number

type _map {
  hamt _hamt
  size number
  context _mapContext
}

type _empty {}

type _keyValue {
  key any
  value any
}

type _mapContext {
  equalKeys \(any, any) boolean
  equalValues \(any, any) boolean
  hashKey \(any) number
  hashValue \(any) number
}

type _hamtUpdate {
  hamt _hamt
  size boolean
}

type _entry = _keyValue | _hamt | none

type _hamt {
  entry1 _entry
  entry2 _entry
  entry3 _entry
  entry4 _entry
  entry5 _entry
  entry6 _entry
  entry7 _entry
  entry8 _entry
  entry9 _entry
  entry10 _entry
  entry11 _entry
  entry12 _entry
  entry13 _entry
  entry14 _entry
  entry15 _entry
  entry16 _entry
  entry17 _entry
  entry18 _entry
  entry19 _entry
  entry20 _entry
  entry21 _entry
  entry22 _entry
  entry23 _entry
  entry24 _entry
  entry25 _entry
  entry26 _entry
  entry27 _entry
  entry28 _entry
  entry29 _entry
  entry30 _entry
  entry31 _entry
  entry32 _entry
}

_maxLevel = \() number { 60 / 5 }

_newMap = \(
  equalKeys \(any, any) boolean,
  hashKey \(any) number,
  equalValues \(any, any) boolean,
  hashValue \(any) number,
) _map {
  _map{
    hamt: _newHamt(),
    size: 0,
    context: _mapContext{
      equalKeys: equalKeys,
      hashKey: hashKey,
      equalValues: equalValues,
      hashValue: hashValue,
    },
  }
}

_newHamt = \() _hamt {
  _hamt{
    entry1: none,
    entry2: none,
    entry3: none,
    entry4: none,
    entry5: none,
    entry6: none,
    entry7: none,
    entry8: none,
    entry9: none,
    entry10: none,
    entry11: none,
    entry12: none,
    entry13: none,
    entry14: none,
    entry15: none,
    entry16: none,
    entry17: none,
    entry18: none,
    entry19: none,
    entry20: none,
    entry21: none,
    entry22: none,
    entry23: none,
    entry24: none,
    entry25: none,
    entry26: none,
    entry27: none,
    entry28: none,
    entry29: none,
    entry30: none,
    entry31: none,
    entry32: none,
  }
}

_getMap = \(
  map _map,
  key any,
) any {
  _getValue(map.context, map.hamt, key, 1, 1)
}

# A layer is composed of a tree of HAMT and used to re-hash keys.
# A level is composed of a node of HAMT and used to segment hash values into entry indexes.
_getValue = \(ctx _mapContext, hamt _hamt, key any, layer number, level number) any {
  if e = _getEntry(hamt, _hamtIndex(ctx, key, layer, level)) as _keyValue {
    if ctx.equalKeys(e.key, key) {
      e.value
    } else {
      _empty{}
    }
  } else if _hamt {
    if level > _maxLevel() {
      _getValue(ctx, e, key, layer + 1, 1)
    } else {
      _getValue(ctx, e, key, layer, level + 1)
    }
  } else if none {
    _empty{}
  }
}

_setMap = \(
  map _map,
  key any,
  value any,
) _map {
  u = _setKeyValue(map.context, map.hamt, key, value, 1, 1)

  _map{
    hamt: u.hamt,
    size: map.size + if u.size { 1 } else { 0 },
    context: map.context,
  }
}

_setKeyValue = \(
  ctx _mapContext,
  hamt _hamt,
  key any,
  value any,
  layer number,
  level number,
) _hamtUpdate {
  i = _hamtIndex(ctx, key, layer, level)
  update = \(e _entry, size boolean) _hamtUpdate {
    _hamtUpdate{hamt: _setEntry(hamt, i, e), size: size}
  }

  if e = _getEntry(hamt, i) as _keyValue {
    # TODO Remove a useless function call below of workaround for a bug in LLVM 13.0.0.
    _pen_prelude_hash_number(42)
    if ctx.equalKeys(e.key, key) {
      update(_keyValue{key: key, value: value}, false)
    } else {
      l = level + 1
      u = _setKeyValue(ctx, _newHamt(), e.key, e.value, layer, l)
      u = _setKeyValue(ctx, u.hamt, key, value, layer, l)

      update(u.hamt, true)
    }
  } else if _hamt {
    u = if level > _maxLevel() {
      _setKeyValue(ctx, e, key, value, layer + 1, 1)
    } else {
      _setKeyValue(ctx, e, key, value, layer, level + 1)
    }

    update(u.hamt, u.size)
  } else if none {
    update(_keyValue{key: key, value: value}, true)
  }
}

_deleteMap = \(
  map _map,
  key any,
) _map {
  u = _deleteKey(map.context, map.hamt, key, 1, 1)

  _map{
    hamt: u.hamt,
    size: map.size - if u.size { 1 } else { 0 },
    context: map.context,
  }
}

_deleteKey = \(ctx _mapContext, hamt _hamt, key any, layer number, level number) _hamtUpdate {
  i = _hamtIndex(ctx, key, layer, level)
  update = \(e _entry, size boolean) _hamtUpdate {
    _hamtUpdate{hamt: _setEntry(hamt, i, e), size: size}
  }

  if e = _getEntry(hamt, i) as _keyValue {
    # TODO Remove a useless function call below of workaround for a bug in LLVM 13.0.0.
    _pen_prelude_hash_number(42)
    if ctx.equalKeys(e.key, key) {
      update(none, true)
    } else {
      _hamtUpdate{hamt: hamt, size: false}
    }
  } else if _hamt {
    u = if level > _maxLevel() {
      _deleteKey(ctx, e, key, layer + 1, 1)
    } else {
      _deleteKey(ctx, e, key, layer, level + 1)
    }

    update(_normalizeHamt(u.hamt), u.size)
  } else if none {
    _hamtUpdate{hamt: hamt, size: false}
  }
}

_normalizeHamt = \(h _hamt) _entry {
  if e = _getSingleEntry(h, 1, none) as none {
    h
  } else {
    e
  }
}

_getSingleEntry = \(h _hamt, i number, e _entry) _entry {
  if i > 32 {
    e
  } else {
    if ee = _getEntry(h, i) as none {
      _getSingleEntry(h, i + 1, e)
    } else {
      if _ = e as none {
        _getSingleEntry(h, i + 1, ee)
      } else {
        none
      }
    }
  }
}

_mergeMaps = \(x _map, y _map) _map {
  _mergeHamt(x, y.hamt, 1)
}

_mergeHamt = \(m _map, h _hamt, i number) _map {
  if i > 32 {
    m
  } else {
    _mergeHamt(
      if e = _getEntry(h, i) as _keyValue {
        _setMap(m, e.key, e.value)
      } else if _hamt {
        _mergeHamt(m, e, 1)
      } else if none {
        m
      },
      h,
      i + 1,
    )
  }
}

_equalMaps = \(x _map, y _map) boolean {
  _equalHamts(x.context, x.hamt, y.hamt, 1)
}

_equalHamts = \(ctx _mapContext, h1 _hamt, h2 _hamt, i number) boolean {
  if i > 32 {
    true
  } else {
    rest = \() boolean { _equalHamts(ctx, h1, h2, i + 1) }

    if e1 = _getEntry(h1, i) as _keyValue {
      if e2 = _getEntry(h2, i) as _keyValue {
        ctx.equalKeys(e1, e2) & ctx.equalValues(e1.value, e2.value) & rest()
      } else {
        false
      }
    } else if _hamt {
      if e2 = _getEntry(h2, i) as _hamt {
        _equalHamts(ctx, e1, e2, 1) & rest()
      } else {
        false
      }
    } else if none {
      if _ = _getEntry(h2, i) as none {
        rest()
      } else {
        false
      }
    }
  }
}

_hashMap = \(m _map) number {
  headerHash = 5

  _hashHamt(m.context, m.hamt, 1, headerHash)
}

_hashHamt = \(ctx _mapContext, h _hamt, index number, hash number) number {
  if index > 32 {
    hash
  } else {
    if e = _getEntry(h, index) as _keyValue {
      hash = _pen_prelude_combine_hashes(hash, ctx.hashKey(e.key))
      hash = _pen_prelude_combine_hashes(hash, ctx.hashValue(e.value))

      _hashHamt(ctx, h, index + 1, hash)
    } else if _hamt {
      _hashHamt(
        ctx,
        h,
        index + 1,
        _pen_prelude_combine_hashes(hash, _hashHamt(ctx, e, 1, hash)),
      )
    } else if none {
      _hashHamt(ctx, h, index + 1, hash)
    }
  }
}

_hamtIndex = \(ctx _mapContext, key any, layer number, level number) number {
  _pen_prelude_hash_to_index(ctx.hashKey(key), layer, level)
}

_getEntry = \(hamt _hamt, index number) _entry {
  if index == 1 {
    hamt.entry1
  } else if index == 2 {
    hamt.entry2
  } else if index == 3 {
    hamt.entry3
  } else if index == 4 {
    hamt.entry4
  } else if index == 5 {
    hamt.entry5
  } else if index == 6 {
    hamt.entry6
  } else if index == 7 {
    hamt.entry7
  } else if index == 8 {
    hamt.entry8
  } else if index == 9 {
    hamt.entry9
  } else if index == 10 {
    hamt.entry10
  } else if index == 11 {
    hamt.entry11
  } else if index == 12 {
    hamt.entry12
  } else if index == 13 {
    hamt.entry13
  } else if index == 14 {
    hamt.entry14
  } else if index == 15 {
    hamt.entry15
  } else if index == 16 {
    hamt.entry16
  } else if index == 17 {
    hamt.entry17
  } else if index == 18 {
    hamt.entry18
  } else if index == 19 {
    hamt.entry19
  } else if index == 20 {
    hamt.entry20
  } else if index == 21 {
    hamt.entry21
  } else if index == 22 {
    hamt.entry22
  } else if index == 23 {
    hamt.entry23
  } else if index == 24 {
    hamt.entry24
  } else if index == 25 {
    hamt.entry25
  } else if index == 26 {
    hamt.entry26
  } else if index == 27 {
    hamt.entry27
  } else if index == 28 {
    hamt.entry28
  } else if index == 29 {
    hamt.entry29
  } else if index == 30 {
    hamt.entry30
  } else if index == 31 {
    hamt.entry31
  } else if index == 32 {
    hamt.entry32
  } else {
    none
  }
}

_setEntry = \(hamt _hamt, index number, entry _entry) _hamt {
  if index == 1 {
    _hamt{...hamt, entry1: entry}
  } else if index == 2 {
    _hamt{...hamt, entry2: entry}
  } else if index == 3 {
    _hamt{...hamt, entry3: entry}
  } else if index == 4 {
    _hamt{...hamt, entry4: entry}
  } else if index == 5 {
    _hamt{...hamt, entry5: entry}
  } else if index == 6 {
    _hamt{...hamt, entry6: entry}
  } else if index == 7 {
    _hamt{...hamt, entry7: entry}
  } else if index == 8 {
    _hamt{...hamt, entry8: entry}
  } else if index == 9 {
    _hamt{...hamt, entry9: entry}
  } else if index == 10 {
    _hamt{...hamt, entry10: entry}
  } else if index == 11 {
    _hamt{...hamt, entry11: entry}
  } else if index == 12 {
    _hamt{...hamt, entry12: entry}
  } else if index == 13 {
    _hamt{...hamt, entry13: entry}
  } else if index == 14 {
    _hamt{...hamt, entry14: entry}
  } else if index == 15 {
    _hamt{...hamt, entry15: entry}
  } else if index == 16 {
    _hamt{...hamt, entry16: entry}
  } else if index == 17 {
    _hamt{...hamt, entry17: entry}
  } else if index == 18 {
    _hamt{...hamt, entry18: entry}
  } else if index == 19 {
    _hamt{...hamt, entry19: entry}
  } else if index == 20 {
    _hamt{...hamt, entry20: entry}
  } else if index == 21 {
    _hamt{...hamt, entry21: entry}
  } else if index == 22 {
    _hamt{...hamt, entry22: entry}
  } else if index == 23 {
    _hamt{...hamt, entry23: entry}
  } else if index == 24 {
    _hamt{...hamt, entry24: entry}
  } else if index == 25 {
    _hamt{...hamt, entry25: entry}
  } else if index == 26 {
    _hamt{...hamt, entry26: entry}
  } else if index == 27 {
    _hamt{...hamt, entry27: entry}
  } else if index == 28 {
    _hamt{...hamt, entry28: entry}
  } else if index == 29 {
    _hamt{...hamt, entry29: entry}
  } else if index == 30 {
    _hamt{...hamt, entry30: entry}
  } else if index == 31 {
    _hamt{...hamt, entry31: entry}
  } else if index == 32 {
    _hamt{...hamt, entry32: entry}
  } else {
    hamt
  }
}
