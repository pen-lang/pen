type _AnyList {
  node \() _Node | none
}

type _Node {
  first \() any
  rest \() _Node | none
}

type _FirstRest {
  first \() any
  rest _AnyList
}

_first = \(fr _FirstRest) \() any {
  fr.first
}

_rest = \(fr _FirstRest) _AnyList {
  fr.rest
}

_firstRest = \(l _AnyList) _FirstRest | none {
  if n = l.node() as _Node {
    _FirstRest{
      first: n.first,
      rest: _AnyList{node: n.rest},
    }
  } else {
    none
  }
}

_emptyList = \() _AnyList {
  _AnyList{node: \() _Node | none { none }}
}

_prependToList = \(x \() any, l _AnyList) _AnyList {
  _AnyList{node: \() _Node | none { _prependToNode(x, l.node) }}
}

_prependToNode = \(x \() any, n \() _Node | none) _Node {
  _Node{
    first: x,
    rest: n,
  }
}

_concatenateLists = \(x \() _AnyList, y _AnyList) _AnyList {
  _AnyList{
    node: \() _Node | none {
      if x = x().node() as _Node {
        _prependToNode(x.first, _concatenateNodes(x.rest, y.node))
      } else {
        y.node()
      }
    }
  }
}

_concatenateNodes = \(x \() _Node | none, y \() _Node | none) \() _Node | none {
  \() _Node | none {
    if x = x() as _Node {
      _prependToNode(x.first, _concatenateNodes(x.rest, y))
    } else {
      y()
    }
  }
}

_equalLists = \(f \(any, any) boolean, x _AnyList, y _AnyList) boolean {
  _equalNodes(f, x.node(), y.node())
}

_equalNodes = \(f \(any, any) boolean, x _Node | none, y _Node | none) boolean {
  if x = x as _Node {
    if y = y as _Node {
      f(x.first(), y.first()) & _equalNodes(f, x.rest(), y.rest())
    } else {
      false
    }
  } else {
    if y = y as _Node {
      false
    } else {
      true
    }
  }
}
