type firstRest {
  ok boolean
  first \() any
  rest [any]
}

# Those functions need to be all synchronous and should not call any functions 
# inside them to be compatible async functions in Rust.

foreign "c" _pen_os_first_rest = \(xs [any]) firstRest {
  if [x, ...xs] = xs {
    firstRest{ok: true, first: x, rest: xs}
  } else {
    firstRest{ok: false, first: \() any { none }, rest: [any]}
  }
}

foreign "c" _pen_os_create_list = \(x any, xs \() [any]) [any] {
  [any x, ...xs()]
}

foreign "c" _pen_os_empty_list = \() [any] {
  [any]
}

foreign "c" _pen_os_to_list = \(x any) [any] {
  if x = x as [any] {
    x
  } else {
    [any]
  }
}
