import foreign "c" _pen_os_read_stdin \() ffiStringResult
import foreign "c" _pen_os_write_stdout \(string) ffiWriteResult
import foreign "c" _pen_os_write_stderr \(string) ffiWriteResult
import foreign "c" _pen_os_open_file \(string, OpenFileOptions) ffiOpenResult
import foreign "c" _pen_os_read_file \(file) ffiStringResult
import foreign "c" _pen_os_write_file \(file, string) ffiWriteResult
import foreign "c" _pen_os_copy_file \(string, string) ffiNoneResult
import foreign "c" _pen_os_remove_file \(string) ffiNoneResult
import foreign "c" _pen_os_read_directory \(string) ffiReadDirectoryResult
import foreign "c" _pen_os_create_directory \(string) ffiNoneResult
import foreign "c" _pen_os_remove_directory \(string) ffiNoneResult
import foreign "c" _pen_os_get_arguments \() array
import foreign "c" _pen_os_get_environment_variable \(string) ffiStringResult
import foreign "c" _pen_ffi_string_array_get \(array, number) string
import foreign "c" _pen_ffi_string_array_length \(array) number
import foreign _pen_main \(Context) number

type Context {
  readStdIn \() ffiStringResult
  writeStdOut \(string) ffiWriteResult
  writeStdErr \(string) ffiWriteResult
  openFile \(string, OpenFileOptions) ffiOpenResult
  readFile \(file) ffiStringResult
  writeFile \(file, string) ffiWriteResult
  copyFile \(string, string) ffiNoneResult
  removeFile \(string) ffiNoneResult
  readDirectory \(string) ffiReadDirectoryResult
  createDirectory \(string) ffiNoneResult
  removeDirectory \(string) ffiNoneResult
  getArguments \() array
  getEnvironmentVariable \(string) ffiStringResult
}

type File {
  inner file | specialFile
}

type file {
  inner any
}

type stdIn {}
type stdOut {}
type stdErr {}

type ffiOpenResult {
  file file
  error number
}

type ffiStringResult {
  value string
  error number
}

type ffiWriteResult {
  count number
  error number
}

type ffiNoneResult {
  _ none
  error number
}

type ffiReadDirectoryResult {
  paths array
  error number
}

type OpenFileOptions {
  Append boolean
  Create boolean
  CreateNew boolean
  Read boolean
  Truncate boolean
  Write boolean
}

type array {
  array any
}

type specialFile = stdIn | stdOut | stdErr

StdIn = \() File {
  File{inner: stdIn}
}

StdOut = \() File {
  File{inner: stdOut}
}

StdErr = \() File {
  File{inner: stdErr}
}

DefaultOpenFileOptions = \() OpenFileOptions {
  OpenFileOptions{
    Append: false,
    Create: false,
    CreateNew: false,
    Read: false,
    Truncate: false,
    Write: false,
  }
}

OpenFileWithOptions = \(ctx Context, path string, opts OpenFileOptions) File | error {
  r = ctx.openFile(path, opts)

  if r.error == 0 {
    File{inner: r.file}
  } else {
    error(translateError(r.error))
  }
}

OpenFile = \(ctx Context, path string) File | error {
  OpenFileWithOptions(
    ctx,
    path,
    OpenFileOptions{...DefaultOpenFileOptions(), Read: true}
  )
}

ReadFile = \(ctx Context, file File) string | error {
  r = if f = file.inner; stdIn {
    ctx.readStdIn()
  } else if stdOut {
    error("cannot read from stdout")
  } else if stdErr {
    error("cannot read from stderr")
  } else if file {
    ctx.readFile(f)
  }?

  if r.error == 0 {
    r.value
  } else {
    error(translateError(r.error))
  }
}

WriteFile = \(ctx Context, file File, data string) number | error {
  r = if f = file.inner; stdIn {
    error("cannot write to stdin")
  } else if stdOut {
    ctx.writeStdOut(data)
  } else if stdErr {
    ctx.writeStdErr(data)
  } else {
    ctx.writeFile(f, data)
  }?

  if r.error == 0 {
    r.count
  } else {
    error(translateError(r.error))
  }
}

CopyFile = \(ctx Context, src string, dest string) none | error {
  r = ctx.copyFile(src, dest)

  if r.error == 0 {
    none
  } else {
    error(translateError(r.error))
  }
}

RemoveFile = \(ctx Context, path string) none | error {
  r = ctx.removeFile(path)

  if r.error == 0 {
    none
  } else {
    error(translateError(r.error))
  }
}

ReadDirectory = \(ctx Context, path string) [string] | error {
  r = ctx.readDirectory(path)

  if r.error == 0 {
    convertArrayToStrings(r.paths)
  } else {
    error(translateError(r.error))
  }
}

CreateDirectory = \(ctx Context, path string) none | error {
  r = ctx.createDirectory(path)

  if r.error == 0 {
    none
  } else {
    error(translateError(r.error))
  }
}

RemoveDirectory = \(ctx Context, path string) none | error {
  r = ctx.removeDirectory(path)

  if r.error == 0 {
    none
  } else {
    error(translateError(r.error))
  }
}

Arguments = \(ctx Context) [string] {
  convertArrayToStrings(ctx.getArguments())
}

EnvironmentVariable = \(ctx Context, name string) string | error {
  r = ctx.getEnvironmentVariable(name)

  if r.error == 0 {
    r.value
  } else {
    error(translateError(r.error))
  }
}

convertArrayToStrings = \(xs array) [string] {
  convertArrayToStringsFromIndex(xs, 1)
}

convertArrayToStringsFromIndex = \(xs array, index number) [string] {
  if index > _pen_ffi_string_array_length(xs) {
    [string;]
  } else {
    [string;
      _pen_ffi_string_array_get(xs, index),
      ...convertArrayToStringsFromIndex(xs, index + 1),
    ]
  }
}

translateError = \(code number) string {
  if code == 1 {
    "operation not permitted"
  } else if code == 2 {
    "no such file or directory"
  } else if code == 3 {
    "no such process"
  } else if code == 4 {
    "interrupted system call"
  } else if code == 5 {
    "i/o error"
  } else if code == 12 {
    "out of memory"
  } else if code == 13 {
    "permission denied"
  } else if code == 14 {
    "bad address"
  } else if code == 17 {
    "file exists"
  } else if code == 20 {
    "not a directory"
  } else if code == 21 {
    "is a directory"
  } else if code == 24 {
    "too many open files"
  } else if code == 28 {
    "no space left on device"
  } else if code == 257 {
    "cannot lock file"
  } else if code == 258 {
    "cannot decode path as utf-8"
  } else if code == 259 {
    "environment variable not present"
  } else if code == 260 {
    "environment variable not unicode"
  } else {
    "unknown io error"
  }
}

export foreign _pen_os_main = \() number {
  _pen_main(
    Context{
      readStdIn: _pen_os_read_stdin,
      writeStdOut: _pen_os_write_stdout,
      writeStdErr: _pen_os_write_stderr,
      openFile: _pen_os_open_file,
      readFile: _pen_os_read_file,
      writeFile: _pen_os_write_file,
      copyFile: _pen_os_copy_file,
      removeFile: _pen_os_remove_file,
      readDirectory: _pen_os_read_directory,
      createDirectory: _pen_os_create_directory,
      removeDirectory: _pen_os_remove_directory,
      getArguments: _pen_os_get_arguments,
      getEnvironmentVariable: _pen_os_get_environment_variable,
    },
  )
}
