import foreign "c" _pen_os_fd_read \(number, number) ffiReadResult
import foreign "c" _pen_os_fd_write \(number, string) ffiWriteResult
import foreign "c" _pen_os_open_file \(string, OpenFileOptions) ffiOpenResult
import foreign "c" _pen_os_read_file \(any) ffiReadResult
import foreign "c" _pen_os_write_file \(any, string) ffiWriteResult
import foreign _pen_main \(Os) number

type Os {
  fdRead \(number, number) ffiReadResult,
  fdWrite \(number, string) ffiWriteResult,
  openFile \(string, OpenFileOptions) ffiOpenResult,
  readFile \(any) ffiReadResult,
  writeFile \(any, string) ffiWriteResult,
}

type File {
  inner any,
}

type ffiOpenResult {
  file any,
  error number,
}

type ffiReadResult {
  data string,
  error number,
}

type ffiWriteResult {
  count number,
  error number,
}

type OpenFileOptions {
  Append boolean,
  Create boolean,
  CreateNew boolean,
  Read boolean,
  Truncate boolean,
  Write boolean,
}

DefaultOpenFileOptions = \() OpenFileOptions {
  OpenFileOptions{
    Append: false,
    Create: false,
    CreateNew: false,
    Read: false,
    Truncate: false,
    Write: false,
  }
}

FdRead = \(os Os, fd number, count number) string | error {
  r = os.fdRead(fd, count)

  if r.error == -1 {
    r.data
  } else {
    error(r.error)
  }
}

FdWrite = \(os Os, fd number, data string) number | error {
  r = os.fdWrite(fd, data)

  if r.error == -1 {
    r.count
  } else {
    error(r.error)
  }
}

StdIn = \() number { 0 }

StdOut = \() number { 1 }

StdErr = \() number { 2 }

OpenFileWithOptions = \(os Os, path string, opts OpenFileOptions) File | error {
  r = os.openFile(path, opts)

  if r.error == -1 {
    File{inner: r.file}
  } else {
    error(r.error)
  }
}

OpenFile = \(os Os, path string) File | error {
  OpenFileWithOptions(
    os,
    path,
    OpenFileOptions{...DefaultOpenFileOptions(), Read: true}
  )
}

ReadFile = \(os Os, file File) string | error {
  r = os.readFile(file.inner)

  if r.error == -1 {
    r.data
  } else {
    error(r.error)
  }
}

WriteFile = \(os Os, file File, data string) number | error {
  r = os.writeFile(file.inner, data)

  if r.error == -1 {
    r.count
  } else {
    error(r.error)
  }
}

export foreign _pen_os_main = \(_ none) number {
  _pen_main(
    Os{
      fdRead: _pen_os_fd_read,
      fdWrite: _pen_os_fd_write,
      openFile: _pen_os_open_file,
      readFile: _pen_os_read_file,
      writeFile: _pen_os_write_file,
    },
  )
}
