import 'array
import 'Os'context
import 'Os'normalFile
import 'Os'openFileOptions

import foreign _pen_main \(context'Context) number

type File {
  inner normalFile'NormalFile | specialFile
}

type stdIn {}
type stdOut {}
type stdErr {}

type specialFile = stdIn | stdOut | stdErr

type Context = context'Context

type OpenFileOptions = openFileOptions'OpenFileOptions

StdIn = \() File {
  File{inner: stdIn}
}

StdOut = \() File {
  File{inner: stdOut}
}

StdErr = \() File {
  File{inner: stdErr}
}

DefaultOpenFileOptions = \() openFileOptions'OpenFileOptions {
  openFileOptions'Default()
}

OpenFileWithOptions = \(ctx context'Context, path string, opts openFileOptions'OpenFileOptions) File | error {
  r = context'Inner(ctx).OpenFile(path, opts)

  if r.Error == 0 {
    File{inner: r.File}
  } else {
    error(translateError(r.Error))
  }
}

OpenFile = \(ctx context'Context, path string) File | error {
  OpenFileWithOptions(
    ctx,
    path,
    openFileOptions'OpenFileOptions{...openFileOptions'Default(), Read: true}
  )
}

ReadFile = \(ctx context'Context, file File) string | error {
  r = if f = file.inner as stdIn {
    context'Inner(ctx).ReadStdIn()
  } else if stdOut {
    error("cannot read from stdout")
  } else if stdErr {
    error("cannot read from stderr")
  } else if normalFile'NormalFile {
    context'Inner(ctx).ReadFile(f)
  }?

  if r.Error == 0 {
    r.Value
  } else {
    error(translateError(r.Error))
  }
}

WriteFile = \(ctx context'Context, file File, data string) number | error {
  inner = context'Inner(ctx)

  r = if f = file.inner as stdIn {
    error("cannot write to stdin")
  } else if stdOut {
    inner.WriteStdOut(data)
  } else if stdErr {
    inner.WriteStdErr(data)
  } else {
    inner.WriteFile(f, data)
  }?

  if r.Error == 0 {
    r.Count
  } else {
    error(translateError(r.Error))
  }
}

CopyFile = \(ctx context'Context, src string, dest string) none | error {
  r = context'Inner(ctx).CopyFile(src, dest)

  if r.Error == 0 {
    none
  } else {
    error(translateError(r.Error))
  }
}

RemoveFile = \(ctx context'Context, path string) none | error {
  r = context'Inner(ctx).RemoveFile(path)

  if r.Error == 0 {
    none
  } else {
    error(translateError(r.Error))
  }
}

ReadDirectory = \(ctx context'Context, path string) [string] | error {
  r = context'Inner(ctx).ReadDirectory(path)

  if r.Error == 0 {
    array'ConvertArrayToStrings(r.Paths)
  } else {
    error(translateError(r.Error))
  }
}

CreateDirectory = \(ctx context'Context, path string) none | error {
  r = context'Inner(ctx).CreateDirectory(path)

  if r.Error == 0 {
    none
  } else {
    error(translateError(r.Error))
  }
}

RemoveDirectory = \(ctx context'Context, path string) none | error {
  r = context'Inner(ctx).RemoveDirectory(path)

  if r.Error == 0 {
    none
  } else {
    error(translateError(r.Error))
  }
}

Arguments = \(ctx context'Context) [string] {
  array'ConvertArrayToStrings(context'Inner(ctx).GetArguments())
}

EnvironmentVariable = \(ctx context'Context, name string) string | error {
  r = context'Inner(ctx).GetEnvironmentVariable(name)

  if r.Error == 0 {
    r.Value
  } else {
    error(translateError(r.Error))
  }
}

translateError = \(code number) string {
  if code == 1 {
    "operation not permitted"
  } else if code == 2 {
    "no such file or directory"
  } else if code == 3 {
    "no such process"
  } else if code == 4 {
    "interrupted system call"
  } else if code == 5 {
    "i/o error"
  } else if code == 12 {
    "out of memory"
  } else if code == 13 {
    "permission denied"
  } else if code == 14 {
    "bad address"
  } else if code == 17 {
    "file exists"
  } else if code == 20 {
    "not a directory"
  } else if code == 21 {
    "is a directory"
  } else if code == 24 {
    "too many open files"
  } else if code == 28 {
    "no space left on device"
  } else if code == 257 {
    "cannot lock file"
  } else if code == 258 {
    "cannot decode path as utf-8"
  } else if code == 259 {
    "environment variable not present"
  } else if code == 260 {
    "environment variable not unicode"
  } else {
    "unknown io error"
  }
}

export foreign _pen_os_main = \() number {
  _pen_main(context'New())
}
