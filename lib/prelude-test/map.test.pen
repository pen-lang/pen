import Core'Number
import Test'Assert

SetNoKey = \() none | error {
  Assert'True(Number'Sum([number k for k, _ in {number: none}]) == 0)
}

SetKey = \() none | error {
  Assert'True(
    Number'Sum(
      [number
        k
        for k, _ in {number: none
          1: none,
        }
      ],
    )
      == 1,
  )
}

Set2Keys = \() none | error {
  Assert'True(
    Number'Sum(
      [number
        k
        for k, _ in {number: none
          1: none,
          2: none,
        }
      ],
    )
      == 3,
  )
}

Set3Keys = \() none | error {
  Assert'True(
    Number'Sum(
      [number
        k
        for k, _ in {number: none
          1: none,
          2: none,
          3: none,
        }
      ],
    )
      == 6,
  )
}

Set4Keys = \() none | error {
  Assert'True(
    Number'Sum(
      [number
        k
        for k, _ in {number: none
          1: none,
          2: none,
          3: none,
          4: none,
        }
      ],
    )
      == 10,
  )
}

SetManyKeys = \() none | error {
  ks = Number'Sequence(42)
  xs = numberSet(ks)

  assertKeys(xs, ks)
}

IterateManyKeys = \() none | error {
  ks = Number'Sequence(42)

  Assert'True(
    Number'Sum([number k for k, _ in numberSet(ks)])
      == Number'Sum(ks),
  )
}

Set3KeysWith0 = \() none | error {
  Assert'True(
    Number'Sum(
      [number
        k
        for k, _ in {number: none
          0: none,
          1: none,
          2: none,
        }
      ],
    )
      == 3,
  )
}

RemoveKey = \() none | error {
  Assert'True(
    Number'Sum(
      [number
        k
        for k, _ in {number: none
          1: none,
          1,
        }
      ],
    )
      == 0,
  )
}

Merge2Maps = \() none | error {
  Assert'True(
    Number'Sum(
      [number
        k
        for k, _ in {number: none
          ...{number: none 1: none},
          ...{number: none 2: none},
        }
      ],
    )
      == 3,
  )
}

Merge3Maps = \() none | error {
  Assert'True(
    Number'Sum(
      [number
        k
        for k, _ in {number: none
          ...{number: none 1: none},
          ...{number: none 2: none},
          ...{number: none 3: none},
        }
      ],
    )
      == 6,
  )
}

assertKeys = \(xs {number: none}, ks [number]) none | error {
  if [k, ...ks] = ks {
    if _ = xs[k()] {
      assertKeys(xs, ks)
    } else {
      error("oh no")
    }
  } else {
    none
  }
}

numberSet = \(xs [number]) {number: none} {
  if [x, ...xs] = xs {
    {number: none x(): none, ...numberSet(xs)}
  } else {
    {number: none}
  }
}
