import 'Context'ffiHeaders { FfiHeaders }
import 'Request { Request }
import 'Response { Response }

import foreign _pen_http_client_send \(string, string, FfiHeaders, string) ffiResponseResult
import foreign _pen_http_server_serve \(string, \(string, string, FfiHeaders, string) ffiResponse) string

type Context {
  inner Inner
}

type Inner {
  Send \(Request) Response | error
  Serve \(string, \(Request) Response) none | error
}

type ffiResponse {
  status number
  body string
}

type ffiResponseResult {
  response ffiResponse
  error string
}

New = \() Context {
  Context{
    inner: Inner{
      Send: \(r Request) Response | error {
        r = _pen_http_client_send(
          r.Method,
          r.Uri,
          ffiHeaders'New(r.Headers),
          r.Body,
        )

        if r.error == "" {
          r = r.response

          Response{Status: r.status, Body: r.body}
        } else {
          error(r.error)
        }
      },
      Serve: \(address string, callback \(Request) Response) none | error {
        e = _pen_http_server_serve(
          address,
          \(m string, u string, hs FfiHeaders, b string) ffiResponse {
            r = callback(
              Request{
                Method: m,
                Uri: u,
                Headers: ffiHeaders'ToMap(hs),
                Body: b,
              },
            )

            ffiResponse{status: r.Status, body: r.Body}
          },
        )
        if e == "" { none } else { error(e) }
      },
    },
  }
}

Inner = \(ctx Context) Inner {
  ctx.inner
}
