import 'Map'emptyEntry { EmptyEntry }
import 'Map'hamt { Hamt }

type Map {
  hamt Hamt
  size number
  configuration hamt'Configuration
}

New = \(equalKeys \(any, any) boolean, hashKey \(any) number) Map {
  Map{
    hamt: hamt'New(),
    size: 0,
    configuration: hamt'Configuration{EqualKeys: equalKeys, HashKey: hashKey},
  }
}

Size = \(map Map) number {
  map.size
}

Get = \(map Map, key any, default any) any {
  if v = hamt'Get(map.hamt, key, map.configuration) as EmptyEntry {
    default
  } else {
    v
  }
}

Set = \(map Map, key any, value any) Map {
  u = hamt'Set(map.hamt, key, value, map.configuration)

  Map{
    hamt: u.Hamt,
    size: map.size + if u.New { 1 } else { 0 },
    configuration: map.configuration
  }
}

Merge = \(x Map, y Map) Map {
  merge(x, y, Keys(y))
}

merge = \(x Map, y Map, keys [any]) Map {
  if [k, ...keys] = keys {
    merge(Set(x, k(), Get(y, k(), none)), y, keys)
  } else {
    x
  }
}

Keys = \(map Map) [any] {
  hamt'Keys(map.hamt)
}

Values = \(m Map) [any] {
  [any Get(m, k(), none) for k in Keys(m)]
}
