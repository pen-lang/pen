Length = \(xs [any]) number {
  lengthRecursive(xs, 0)
}

lengthRecursive = \(xs [any], n number) number {
  if [_, ...xs] = xs {
    lengthRecursive(xs, n + 1)
  } else {
    n
  }
}

First = \(xs [any], fallback any) any {
  if [x, ..._] = xs {
    x()
  } else {
    fallback
  }
}

Last = \(xs [any], fallback any) any {
  if [x, ...xs] = xs {
    last(xs, x)
  } else {
    fallback
  }
}

last = \(xs [any], x \() any) any {
  if [x, ...xs] = xs {
    last(xs, x)
  } else {
    x()
  }
}

ToNumbers = \(xs [any]) [number] {
  if [x, ...xs] = xs {
    if x = x() as number {
      [number x, ...ToNumbers(xs)]
    } else {
      ToNumbers(xs)
    }
  } else {
    [number]
  }
}

ToStrings = \(xs [any]) [string] {
  if [x, ...xs] = xs {
    if x = x() as string {
      [string x, ...ToStrings(xs)]
    } else {
      ToStrings(xs)
    }
  } else {
    [string]
  }
}
