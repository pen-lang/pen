import 'List
import 'Map
import 'Map'noValue { NoValue }

import foreign "c" _pen_core_hamt_hash_string \(string) number

type Map {
  map Map'Map
}

New = \() Map {
  Map{
    map: Map'New(
      \(x any, y any) boolean {
        if x = x as string {
          if y = y as string {
            x == y
          } else {
            false
          }
        } else {
          false
        }
      },
      \(x any) number {
        if x = x as string {
          _pen_core_hamt_hash_string(x)
        } else {
          0
        }
      }
    )
  }
}

Get = \(map Map, key string, default any) any {
  Map'Get(map.map, key, default)
}

Set = \(map Map, key string, value any) Map {
  Map{map: Map'Set(map.map, key, value)}
}

Delete = \(map Map, key string) Map {
  Map{map: Map'Delete(map.map, key)}
}

Size = \(map Map) number {
  Map'Size(map.map)
}

Merge = \(x Map, y Map) Map {
  Map{map: Map'Merge(x.map, y.map)}
}

Keys = \(map Map) [string] {
  List'ToStrings(Map'Keys(map.map))
}

Values = \(map Map) [any] {
  Map'Values(map.map)
}
