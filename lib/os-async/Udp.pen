import 'Context { Context }
import 'Udp'Datagram { Datagram }
import 'Udp'Socket { Socket }
import 'errorTranslator

Bind = \(ctx Context, address string) Socket | error {
  r = Context'Inner(ctx).UdpBind(address)

  if r.Error == 0 {
    r.Socket
  } else {
    error(errorTranslator'Translate(r.Error))
  }
}

Connect = \(ctx Context, s Socket, address string) none | error {
  r = Context'Inner(ctx).UdpConnect(s, address)

  if r.Error == 0 {
    none
  } else {
    error(errorTranslator'Translate(r.Error))
  }
}

Receive = \(ctx Context, s Socket) string | error {
  r = Context'Inner(ctx).UdpReceive(s)

  if r.Error == 0 {
    r.Value
  } else {
    error(errorTranslator'Translate(r.Error))
  }
}

ReceiveFrom = \(ctx Context, s Socket) Datagram | error {
  r = Context'Inner(ctx).UdpReceiveFrom(s)

  if r.Error == 0 {
    r.Datagram
  } else {
    error(errorTranslator'Translate(r.Error))
  }
}

Send = \(ctx Context, s Socket, data string) number | error {
  r = Context'Inner(ctx).UdpSend(s, data)

  if r.Error == 0 {
    r.Value
  } else {
    error(errorTranslator'Translate(r.Error))
  }
}

SendTo = \(ctx Context, s Socket, data string, address string) number | error {
  r = Context'Inner(ctx).UdpSendTo(s, data, address)

  if r.Error == 0 {
    r.Value
  } else {
    error(errorTranslator'Translate(r.Error))
  }
}
