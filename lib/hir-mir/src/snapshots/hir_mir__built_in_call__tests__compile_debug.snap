---
source: lib/hir-mir/src/built_in_call.rs
expression: "compile_call(&Call::new(Some(types::Function::new(vec![types :: ByteString ::\n                            new(Position :: fake()).into()],\n                        types::None::new(Position::fake()),\n                        Position::fake()).into()),\n            BuiltInFunction::new(BuiltInFunctionName::Debug,\n                Position::fake()),\n            vec![TypeCoercion ::\n                new(types :: None :: new(Position :: fake()), types :: Any ::\n                new(Position :: fake()), None :: new(Position :: fake()),\n                Position :: fake()).into()], Position::fake()))"
---
Ok(
    Call(
        Call {
            type_: Function(
                FunctionInner {
                    arguments: [
                        ByteString,
                    ],
                    result: None,
                },
            ),
            function: Variable(
                Variable {
                    name: "__debug",
                },
            ),
            arguments: [
                Call(
                    Call {
                        type_: Function(
                            FunctionInner {
                                arguments: [
                                    Variant,
                                ],
                                result: ByteString,
                            },
                        ),
                        function: RecordField(
                            RecordField {
                                type_: Record {
                                    name: "hir:type_information:record",
                                },
                                index: 0,
                                record: Call(
                                    Call {
                                        type_: Function(
                                            FunctionInner {
                                                arguments: [],
                                                result: Record(
                                                    Record {
                                                        name: "hir:type_information:record",
                                                    },
                                                ),
                                            },
                                        ),
                                        function: TypeInformationFunction(
                                            TypeInformationFunction {
                                                variant: Variant(
                                                    Variant {
                                                        type_: None,
                                                        payload: None,
                                                    },
                                                ),
                                            },
                                        ),
                                        arguments: [],
                                    },
                                ),
                            },
                        ),
                        arguments: [
                            Variant(
                                Variant {
                                    type_: None,
                                    payload: None,
                                },
                            ),
                        ],
                    },
                ),
            ],
        },
    ),
)
